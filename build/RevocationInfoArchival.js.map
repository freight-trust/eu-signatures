{"version":3,"sources":["../src/RevocationInfoArchival.js"],"names":["asn1js","RevocationInfoArchival","constructor","parameters","crl","defaultValues","ocsp","otherRevInfo","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificateRevocationList","OCSPResponse","OtherRevVals","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"RevocationInfoArchival.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { CertificateRevocationList, OCSPResponse } from \"pkijs\";\nimport OtherRevVals from \"./OtherRevVals.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class RevocationInfoArchival {\n  //**********************************************************************************\n  /**\n   * Constructor for RevocationInfoArchival class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"crl\" in parameters)\n      /**\n       * @type {Array.<CertificateRevocationList>}\n       * @description crl\n       */\n      this.crl = getParametersValue(\n        parameters,\n        \"crl\",\n        RevocationInfoArchival.defaultValues(\"crl\")\n      );\n\n    if (\"ocsp\" in parameters)\n      /**\n       * @type {Array.<OCSPResponse>}\n       * @description ocsp\n       */\n      this.ocsp = getParametersValue(\n        parameters,\n        \"ocsp\",\n        RevocationInfoArchival.defaultValues(\"ocsp\")\n      );\n\n    if (\"otherRevInfo\" in parameters)\n      /**\n       * @type {Array.<otherRevInfo>}\n       * @description otherRevInfo\n       */\n      this.otherRevInfo = getParametersValue(\n        parameters,\n        \"otherRevInfo\",\n        RevocationInfoArchival.defaultValues(\"otherRevInfo\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crl\":\n      case \"ocsp\":\n      case \"otherRevInfo\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for RevocationInfoArchival class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crl\":\n      case \"ocsp\":\n      case \"otherRevInfo\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for RevocationInfoArchival class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    //RevocationInfoArchival ::= SEQUENCE {\n    //    crl [0] EXPLICIT SEQUENCE of CRLs, OPTIONAL\n    //    ocsp [1] EXPLICIT SEQUENCE of OCSP Responses, OPTIONAL\n    //    otherRevInfo [2] EXPLICIT SEQUENCE of OtherRevInfo, OPTIONAL\n    //}\n    //OtherRevInfo ::= SEQUENCE {\n    //    Type OBJECT IDENTIFIER\n    //    Value OCTET STRING\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [crl]\n     * @property {string} [ocsp]\n     * @property {string} [otherRevInfo]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: [\n                new asn1js.Repeated({\n                  name: names.crl || \"\",\n                  value: CertificateRevocationList.schema(),\n                }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: [\n                new asn1js.Repeated({\n                  name: names.ocsp || \"\",\n                  value: OCSPResponse.schema(),\n                }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [\n            OtherRevVals.schema({\n              name: names.otherRevInfo || {\n                names: {\n                  blockName: \"otherRevInfo\",\n                },\n              },\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      RevocationInfoArchival.schema({\n        names: {\n          crl: \"crl\",\n          ocsp: \"ocsp\",\n          otherRevInfo: {\n            names: {\n              blockName: \"otherRevInfo\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for RevocationInfoArchival\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"crl\" in asn1.result)\n      this.crl = Array.from(\n        asn1.result.crl,\n        (element) => new CertificateRevocationList({ schema: element })\n      );\n\n    if (\"ocsp\" in asn1.result)\n      this.ocsp = Array.from(\n        asn1.result.ocsp,\n        (element) => new OCSPResponse({ schema: element })\n      );\n\n    if (\"otherRevInfo\" in asn1.result)\n      this.otherRevInfo = new OtherRevVals({\n        schema: asn1.result.otherRevInfo,\n      });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"crl\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: Array.from(this.crl, (element) => element.toSchema()),\n            }),\n          ],\n        })\n      );\n    }\n\n    if (\"ocsp\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: Array.from(this.ocsp, (element) => element.toSchema()),\n            }),\n          ],\n        })\n      );\n    }\n\n    if (\"otherRevInfo\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [this.otherRevInfo.toSchema()],\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"crl\" in this)\n      _object.crl = Array.from(this.crl, (element) => element.toJSON());\n\n    if (\"ocsp\" in this)\n      _object.ocsp = Array.from(this.ocsp, (element) => element.toJSON());\n\n    if (\"otherRevInfo\" in this)\n      _object.otherRevInfo = this.otherRevInfo.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}