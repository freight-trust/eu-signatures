{"version":3,"sources":["../src/OtherSigningCertificate.js"],"names":["asn1js","OtherSigningCertificate","constructor","parameters","certs","defaultValues","policies","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Repeated","OtherCertID","PolicyInformation","asn1","compareSchema","verified","Array","from","result","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"OtherSigningCertificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { PolicyInformation } from \"pkijs\";\r\nimport OtherCertID from \"./OtherCertID.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class OtherSigningCertificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherSigningCertificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<OtherCertID>}\r\n\t\t * @description certs\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", OtherSigningCertificate.defaultValues(\"certs\"));\r\n\t\t\r\n\t\tif(\"policies\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyInformation>}\r\n\t\t\t * @description policies\r\n\t\t\t */\r\n\t\t\tthis.policies = getParametersValue(parameters, \"policies\", OtherSigningCertificate.defaultValues(\"policies\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\tcase \"policies\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherSigningCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\tcase \"policies\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherSigningCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// OtherSigningCertificate ::= SEQUENCE {\r\n\t\t//    certs SEQUENCE OF OtherCertID,\r\n\t\t//    policies SEQUENCE OF PolicyInformation OPTIONAL\r\n\t\t//    -- NOT USED IN THE PRESENT DOCUMENT }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\t\t\tvalue: OtherCertID.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policies || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyInformation.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherSigningCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcerts: \"certs\",\r\n\t\t\t\t\tpolicies: \"policies\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherSigningCertificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t//region certs\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.certs = Array.from(asn1.result.certs, element => new OtherCertID({ schema: element }));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region policies\r\n\t\tif(\"policies\" in asn1.result)\r\n\t\t\tthis.policies = Array.from(asn1.result.policies, element => new PolicyInformation({ schema: element }));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t})\r\n\t\t];\r\n\t\t\r\n\t\t//region policies\r\n\t\tif(\"policies\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policies, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcerts: Array.from(this.certs, element => element.toJSON())\r\n\t\t};\r\n\t\t\r\n\t\t//region policies\r\n\t\tif(\"policies\" in this)\r\n\t\t\t_object.policies = Array.from(this.policies, element => element.toJSON());\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\r\n"]}