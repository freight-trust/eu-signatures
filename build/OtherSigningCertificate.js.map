{"version":3,"sources":["../src/OtherSigningCertificate.js"],"names":["asn1js","OtherSigningCertificate","constructor","parameters","certs","defaultValues","policies","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Repeated","OtherCertID","PolicyInformation","asn1","compareSchema","verified","Array","from","result","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"OtherSigningCertificate.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { PolicyInformation } from \"pkijs\";\nimport OtherCertID from \"./OtherCertID.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class OtherSigningCertificate {\n  //**********************************************************************************\n  /**\n   * Constructor for OtherSigningCertificate class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {Array.<OtherCertID>}\n     * @description certs\n     */\n    this.certs = getParametersValue(\n      parameters,\n      \"certs\",\n      OtherSigningCertificate.defaultValues(\"certs\")\n    );\n\n    if (\"policies\" in parameters)\n      /**\n       * @type {Array.<PolicyInformation>}\n       * @description policies\n       */\n      this.policies = getParametersValue(\n        parameters,\n        \"policies\",\n        OtherSigningCertificate.defaultValues(\"policies\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certs\":\n      case \"policies\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for OtherSigningCertificate class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"certs\":\n      case \"policies\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for OtherSigningCertificate class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // OtherSigningCertificate ::= SEQUENCE {\n    //    certs SEQUENCE OF OtherCertID,\n    //    policies SEQUENCE OF PolicyInformation OPTIONAL\n    //    -- NOT USED IN THE PRESENT DOCUMENT }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [type]\n     * @property {string} [setName]\n     * @property {string} [values]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.certs || \"\",\n              value: OtherCertID.schema(),\n            }),\n          ],\n        }),\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.policies || \"\",\n              value: PolicyInformation.schema(),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OtherSigningCertificate.schema({\n        names: {\n          certs: \"certs\",\n          policies: \"policies\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OtherSigningCertificate\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    //region certs\n    // noinspection JSUnusedGlobalSymbols\n    this.certs = Array.from(\n      asn1.result.certs,\n      (element) => new OtherCertID({ schema: element })\n    );\n    //endregion\n\n    //region policies\n    if (\"policies\" in asn1.result)\n      this.policies = Array.from(\n        asn1.result.policies,\n        (element) => new PolicyInformation({ schema: element })\n      );\n    //endregion\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [\n      new asn1js.Sequence({\n        value: Array.from(this.certs, (element) => element.toSchema()),\n      }),\n    ];\n\n    //region policies\n    if (\"policies\" in this) {\n      outputArray.push(\n        new asn1js.Sequence({\n          value: Array.from(this.policies, (element) => element.toSchema()),\n        })\n      );\n    }\n    //endregion\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      certs: Array.from(this.certs, (element) => element.toJSON()),\n    };\n\n    //region policies\n    if (\"policies\" in this)\n      _object.policies = Array.from(this.policies, (element) =>\n        element.toJSON()\n      );\n    //endregion\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}