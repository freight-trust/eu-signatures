{"version":3,"sources":["../src/CertificateValues.js"],"names":["asn1js","CertificateValues","constructor","parameters","certificateValues","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Repeated","Certificate","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON","fillValues","cmsSigned","i","certificates","push","makeAttribute","Attribute","type","values"],"mappings":"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","file":"CertificateValues.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { Certificate, Attribute } from \"pkijs\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class CertificateValues\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateValues class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @description certificateValues\r\n\t\t */\r\n\t\tthis.certificateValues = getParametersValue(parameters, \"certificateValues\", CertificateValues.defaultValues(\"certificateValues\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificateValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateValues class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificateValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateValues class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CertificateValues ::= SEQUENCE OF Certificate\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [certificateValues]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.certificateValues || \"\"),\r\n\t\t\t\t\tvalue: Certificate.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateValues.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertificateValues: \"certificateValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateValues\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificateValues = Array.from(asn1.result.certificateValues, element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificateValues, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificateValues: Array.from(this.certificateValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillValues(cmsSigned)\r\n\t{\r\n\t\tif(\"certificates\" in cmsSigned)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < cmsSigned.certificates.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(cmsSigned.certificates[i] instanceof Certificate)\r\n\t\t\t\t\tthis.certificateValues.push(cmsSigned.certificates[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeAttribute()\r\n\t{\r\n\t\treturn new Attribute({\r\n\t\t\ttype: \"1.2.840.113549.1.9.16.2.23\",\r\n\t\t\tvalues: [\r\n\t\t\t\tthis.toSchema()\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}