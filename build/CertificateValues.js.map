{"version":3,"sources":["../src/CertificateValues.js"],"names":["asn1js","CertificateValues","constructor","parameters","certificateValues","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Repeated","Certificate","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON","fillValues","cmsSigned","i","certificates","push","makeAttribute","Attribute","type","values"],"mappings":"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","file":"CertificateValues.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { Certificate, Attribute } from \"pkijs\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class CertificateValues {\n  //**********************************************************************************\n  /**\n   * Constructor for CertificateValues class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {Array.<Certificate>}\n     * @description certificateValues\n     */\n    this.certificateValues = getParametersValue(\n      parameters,\n      \"certificateValues\",\n      CertificateValues.defaultValues(\"certificateValues\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"certificateValues\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for CertificateValues class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"certificateValues\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for CertificateValues class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CertificateValues ::= SEQUENCE OF Certificate\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [optional]\n     * @property {string} [certificateValues]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Repeated({\n          name: names.certificateValues || \"\",\n          value: Certificate.schema(),\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CertificateValues.schema({\n        names: {\n          certificateValues: \"certificateValues\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CertificateValues\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.certificateValues = Array.from(\n      asn1.result.certificateValues,\n      (element) => new Certificate({ schema: element })\n    );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.certificateValues, (element) =>\n        element.toSchema()\n      ),\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      certificateValues: Array.from(this.certificateValues, (element) =>\n        element.toJSON()\n      ),\n    };\n  }\n  //**********************************************************************************\n  fillValues(cmsSigned) {\n    if (\"certificates\" in cmsSigned) {\n      for (let i = 0; i < cmsSigned.certificates.length; i++) {\n        if (cmsSigned.certificates[i] instanceof Certificate)\n          this.certificateValues.push(cmsSigned.certificates[i]);\n      }\n    }\n  }\n  //**********************************************************************************\n  makeAttribute() {\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.23\",\n      values: [this.toSchema()],\n    });\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}