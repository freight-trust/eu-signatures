{"version":3,"sources":["../src/CompleteCertificateReferences.js"],"names":["CompleteCertificateReferences","CompleteCertificateRefs","constructor","parameters","fillValues","cmsSigned","signerIndex","_this","hashAlgorithm","signerCertificate","Promise","reject","promises","i","certificates","length","issuer","isEqual","serialNumber","completeCertificateRefs","push","OtherCertID","certificate","all","resolve","makeAttribute","Attribute","type","values","toSchema"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AACA;AACA;AACe,MAAMA,6BAAN,SAA4CC,iCAA5C,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC,QAAMA,UAAN;AACA;AACD;AACA;;;;;;;AAOAC,YAAWC,SAAX,EAAsBC,WAAtB,EAAmCH,UAAnC,EACA;AACC;AACA,QAAMI,QAAQ,IAAd;;AAEA,MAAIC,gBAAgB,OAApB;AACA,MAAIC,iBAAJ,CALD,CAKwB;AACvB;;AAEA;AACA,MAAG,mBAAmBN,UAAtB,EACCK,gBAAgBL,WAAWK,aAA3B;;AAED,MAAG,uBAAuBL,UAA1B,EACCM,oBAAoBN,WAAWM,iBAA/B,CADD,KAGC,OAAOC,QAAQC,MAAR,CAAe,uGAAf,CAAP;AACD;;AAEA;AACA,MAAG,kBAAkBN,SAArB,EACA;AACC,SAAMO,WAAW,EAAjB;;AAEA,QAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIR,UAAUS,YAAV,CAAuBC,MAA1C,EAAkDF,GAAlD,EACA;AACC;AACA,QAAIR,UAAUS,YAAV,CAAuBD,CAAvB,EAA0BG,MAA1B,CAAiCC,OAAjC,CAAyCR,kBAAkBO,MAA3D,CAAD,IACDX,UAAUS,YAAV,CAAuBD,CAAvB,EAA0BK,YAA1B,CAAuCD,OAAvC,CAA+CR,kBAAkBS,YAAjE,CADF,EAEC,SAJF,CAIY;AACX;;AAEAX,UAAMY,uBAAN,CAA8BC,IAA9B,CAAmC,IAAIC,qBAAJ,EAAnC;AACAT,aAASQ,IAAT,CAAcb,MAAMY,uBAAN,CAA8BZ,MAAMY,uBAAN,CAA8BJ,MAA9B,GAAuC,CAArE,EAAwEX,UAAxE,CAAmF;AAChGI,kBADgG;AAEhGc,kBAAajB,UAAUS,YAAV,CAAuBD,CAAvB;AAFmF,KAAnF,CAAd;AAIA;;AAED,UAAOH,QAAQa,GAAR,CAAYX,QAAZ,CAAP;AACA;AACD;;AAEA,SAAOF,QAAQc,OAAR,EAAP;AACA;AACD;AACA;;;;;AAKAC,eAActB,aAAa,EAA3B,EACA;AACC;AACA,SAAO,IAAIuB,gBAAJ,CAAc;AACpBC,SAAM,4BADc;AAEpBC,WAAQ,CACP,KAAKC,QAAL,EADO;AAFY,GAAd,CAAP;AAMA;AACA;AACD;AAjFD;kBADqB7B,6B,EAoFrB","file":"CompleteCertificateReferences.js","sourcesContent":["import { Attribute } from \"pkijs\";\r\nimport CompleteCertificateRefs from \"./CompleteCertificateRefs.js\";\r\nimport OtherCertID from \"./OtherCertID.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class CompleteCertificateReferences extends CompleteCertificateRefs\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CompleteCertificateReferences class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tsuper(parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"complete-certificate-references\" for given CMS Signed Data and signer index\r\n\t * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\r\n\t * @param {number} signerIndex Index of signer to make attribute for\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(cmsSigned, signerIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-1\";\r\n\t\tlet signerCertificate; // in_window.org.pkijs.simpl.CERT\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t\r\n\t\tif(\"signerCertificate\" in parameters)\r\n\t\t\tsignerCertificate = parameters.signerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"signerCertificate\\\" is mandatory for making \\\"complete-certificate-references\\\" attribute\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Put all CMS Signed Data certificates inside \"completeCertificateRefs\" array\r\n\t\tif(\"certificates\" in cmsSigned)\r\n\t\t{\r\n\t\t\tconst promises = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < cmsSigned.certificates.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check it is not a \"signerCertificate\"\r\n\t\t\t\tif((cmsSigned.certificates[i].issuer.isEqual(signerCertificate.issuer)) &&\r\n\t\t\t\t\t(cmsSigned.certificates[i].serialNumber.isEqual(signerCertificate.serialNumber)))\r\n\t\t\t\t\tcontinue; // Not including \"signer certificate\" in \"complete-certificate-references\" attribute\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t_this.completeCertificateRefs.push(new OtherCertID());\r\n\t\t\t\tpromises.push(_this.completeCertificateRefs[_this.completeCertificateRefs.length - 1].fillValues({\r\n\t\t\t\t\thashAlgorithm,\r\n\t\t\t\t\tcertificate: cmsSigned.certificates[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn Promise.all(promises);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"complete-certificate-references\" CAdES attribute\r\n\t * @param {Object} [parameters]\r\n\t * @returns {Attribute}\r\n\t */\r\n\tmakeAttribute(parameters = {})\r\n\t{\r\n\t\t//region Create and return attribute\r\n\t\treturn new Attribute({\r\n\t\t\ttype: \"1.2.840.113549.1.9.16.2.21\",\r\n\t\t\tvalues: [\r\n\t\t\t\tthis.toSchema()\r\n\t\t\t]\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}