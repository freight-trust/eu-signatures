{"version":3,"sources":["../src/CompleteCertificateReferences.js"],"names":["CompleteCertificateReferences","CompleteCertificateRefs","constructor","parameters","fillValues","cmsSigned","signerIndex","_this","hashAlgorithm","signerCertificate","Promise","reject","promises","i","certificates","length","issuer","isEqual","serialNumber","completeCertificateRefs","push","OtherCertID","certificate","all","resolve","makeAttribute","Attribute","type","values","toSchema"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AACA;AACA;AACe,MAAMA,6BAAN,SAA4CC,iCAA5C,CAAoE;AACjF;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B,UAAMA,UAAN;AACD;AACD;AACA;;;;;;;AAOAC,aAAWC,SAAX,EAAsBC,WAAtB,EAAmCH,UAAnC,EAA+C;AAC7C;AACA,UAAMI,QAAQ,IAAd;;AAEA,QAAIC,gBAAgB,OAApB;AACA,QAAIC,iBAAJ,CAL6C,CAKtB;AACvB;;AAEA;AACA,QAAI,mBAAmBN,UAAvB,EAAmCK,gBAAgBL,WAAWK,aAA3B;;AAEnC,QAAI,uBAAuBL,UAA3B,EACEM,oBAAoBN,WAAWM,iBAA/B,CADF,KAGE,OAAOC,QAAQC,MAAR,CACL,mGADK,CAAP;AAGF;;AAEA;AACA,QAAI,kBAAkBN,SAAtB,EAAiC;AAC/B,YAAMO,WAAW,EAAjB;;AAEA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,UAAUS,YAAV,CAAuBC,MAA3C,EAAmDF,GAAnD,EAAwD;AACtD;AACA,YACER,UAAUS,YAAV,CAAuBD,CAAvB,EAA0BG,MAA1B,CAAiCC,OAAjC,CAAyCR,kBAAkBO,MAA3D,KACAX,UAAUS,YAAV,CAAuBD,CAAvB,EAA0BK,YAA1B,CAAuCD,OAAvC,CACER,kBAAkBS,YADpB,CAFF,EAME,SARoD,CAQ1C;AACZ;;AAEAX,cAAMY,uBAAN,CAA8BC,IAA9B,CAAmC,IAAIC,qBAAJ,EAAnC;AACAT,iBAASQ,IAAT,CACEb,MAAMY,uBAAN,CACEZ,MAAMY,uBAAN,CAA8BJ,MAA9B,GAAuC,CADzC,EAEEX,UAFF,CAEa;AACXI,uBADW;AAEXc,uBAAajB,UAAUS,YAAV,CAAuBD,CAAvB;AAFF,SAFb,CADF;AAQD;;AAED,aAAOH,QAAQa,GAAR,CAAYX,QAAZ,CAAP;AACD;AACD;;AAEA,WAAOF,QAAQc,OAAR,EAAP;AACD;AACD;AACA;;;;;AAKAC,gBAActB,aAAa,EAA3B,EAA+B;AAC7B;AACA,WAAO,IAAIuB,gBAAJ,CAAc;AACnBC,YAAM,4BADa;AAEnBC,cAAQ,CAAC,KAAKC,QAAL,EAAD;AAFW,KAAd,CAAP;AAIA;AACD;AACD;AAnFiF;kBAA9D7B,6B,EAqFrB","file":"CompleteCertificateReferences.js","sourcesContent":["import { Attribute } from \"pkijs\";\nimport CompleteCertificateRefs from \"./CompleteCertificateRefs.js\";\nimport OtherCertID from \"./OtherCertID.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class CompleteCertificateReferences extends CompleteCertificateRefs {\n  //**********************************************************************************\n  /**\n   * Constructor for CompleteCertificateReferences class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"complete-certificate-references\" for given CMS Signed Data and signer index\n   * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(cmsSigned, signerIndex, parameters) {\n    //region Initial variables\n    const _this = this;\n\n    let hashAlgorithm = \"SHA-1\";\n    let signerCertificate; // in_window.org.pkijs.simpl.CERT\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"signerCertificate\" in parameters)\n      signerCertificate = parameters.signerCertificate;\n    else\n      return Promise.reject(\n        'Parameter \"signerCertificate\" is mandatory for making \"complete-certificate-references\" attribute'\n      );\n    //endregion\n\n    //region Put all CMS Signed Data certificates inside \"completeCertificateRefs\" array\n    if (\"certificates\" in cmsSigned) {\n      const promises = [];\n\n      for (let i = 0; i < cmsSigned.certificates.length; i++) {\n        //region Check it is not a \"signerCertificate\"\n        if (\n          cmsSigned.certificates[i].issuer.isEqual(signerCertificate.issuer) &&\n          cmsSigned.certificates[i].serialNumber.isEqual(\n            signerCertificate.serialNumber\n          )\n        )\n          continue; // Not including \"signer certificate\" in \"complete-certificate-references\" attribute\n        //endregion\n\n        _this.completeCertificateRefs.push(new OtherCertID());\n        promises.push(\n          _this.completeCertificateRefs[\n            _this.completeCertificateRefs.length - 1\n          ].fillValues({\n            hashAlgorithm,\n            certificate: cmsSigned.certificates[i],\n          })\n        );\n      }\n\n      return Promise.all(promises);\n    }\n    //endregion\n\n    return Promise.resolve();\n  }\n  //**********************************************************************************\n  /**\n   * Create \"complete-certificate-references\" CAdES attribute\n   * @param {Object} [parameters]\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters = {}) {\n    //region Create and return attribute\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.21\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}