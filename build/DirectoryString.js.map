{"version":3,"sources":["../src/DirectoryString.js"],"names":["asn1js","DirectoryString","constructor","parameters","type","defaultValues","value","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","asn1","compareSchema","Choice","TeletexString","name","PrintableString","UniversalString","Utf8String","BmpString","verified","result","directoryString","valueBlock","idBlock","tagNumber","toSchema","toJSON"],"mappings":"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","file":"DirectoryString.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\nexport default class DirectoryString {\n  //**********************************************************************************\n  /**\n   * Constructor for DirectoryString class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {number}\n     * @description 0 - TELETEXSTRING, 1 - PRINTABLESTRING, 2 - UNIVERSALSTRING, 3 - UTF8STRING, 4 - BMPSTRING\n     */\n    this.type = getParametersValue(\n      parameters,\n      \"type\",\n      DirectoryString.defaultValues(\"type\")\n    );\n    /**\n     * @type {Array}\n     * @description value\n     */\n    this.value = getParametersValue(\n      parameters,\n      \"value\",\n      DirectoryString.defaultValues(\"value\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"type\":\n        return -1;\n      case \"value\":\n        return \"\";\n      default:\n        throw new Error(\n          `Invalid member name for DirectoryString class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"type\":\n        return memberValue === DirectoryString.defaultValues(memberName);\n      case \"values\":\n        return memberValue === \"\";\n      default:\n        throw new Error(\n          `Invalid member name for DirectoryString class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      new asn1js.Choice({\n        value: [\n          new asn1js.TeletexString({ name: \"directoryString\" }),\n          new asn1js.PrintableString({ name: \"directoryString\" }),\n          new asn1js.UniversalString({ name: \"directoryString\" }),\n          new asn1js.Utf8String({ name: \"directoryString\" }),\n          new asn1js.BmpString({ name: \"directoryString\" }),\n        ],\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for DirectoryString\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    // noinspection JSUnresolvedVariable\n    this.value = asn1.result.directoryString.valueBlock.value;\n\n    // noinspection JSUnresolvedVariable\n    switch (asn1.result.directoryString.idBlock.tagNumber) {\n      case 20: // TELETEXSTRING\n        this.type = 0;\n        break;\n      case 19: // PRINTABLESTRING\n        this.type = 1;\n        break;\n      case 28: // UNIVERSALSTRING\n        this.type = 2;\n        break;\n      case 12: // UTF8STRING\n        this.type = 3;\n        break;\n      case 30: // BMPSTRING\n        this.type = 4;\n        break;\n      default:\n        throw new Error(\n          \"Object's schema was not verified against input data for DirectoryString\"\n        );\n    }\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    let result;\n\n    switch (this.type) {\n      case 0: // TELETEXSTRING\n        result = new asn1js.TeletexString({ value: this.value });\n        break;\n      case 1: // PRINTABLESTRING\n        result = new asn1js.PrintableString({ value: this.value });\n        break;\n      case 2: // UNIVERSALSTRING\n        result = new asn1js.UniversalString({ value: this.value });\n        break;\n      case 3: // UTF8STRING\n        result = new asn1js.Utf8String({ value: this.value });\n        break;\n      case 4: // BMPSTRING\n        result = new asn1js.BmpString({ value: this.value });\n        break;\n      default:\n        throw new Error(\n          'Incorrectly initialized data for \"DirectoryString\" class'\n        );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return result;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      value: this.value,\n      type: this.type,\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}