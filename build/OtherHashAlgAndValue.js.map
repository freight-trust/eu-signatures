{"version":3,"sources":["../src/OtherHashAlgAndValue.js"],"names":["asn1js","OtherHashAlgAndValue","constructor","parameters","hashAlgorithm","defaultValues","hashValue","fromSchema","schema","memberName","AlgorithmIdentifier","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","file":"OtherHashAlgAndValue.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { AlgorithmIdentifier } from \"pkijs\";\r\n//**************************************************************************************\r\nexport default class OtherHashAlgAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherHashAlgAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @description hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", OtherHashAlgAndValue.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description hashValue\r\n\t\t */\r\n\t\tthis.hashValue = getParametersValue(parameters, \"hashValue\", OtherHashAlgAndValue.defaultValues(\"hashValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"hashValue\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherHashAlgAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\tcase \"hashValue\":\r\n\t\t\t\treturn (memberValue.isEqual(OtherHashAlgAndValue.defaultValues(memberValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherHashAlgAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// OtherHashValue ::= OCTET STRING\r\n\t\t//\r\n\t\t// OtherHashAlgAndValue ::= SEQUENCE {\r\n\t\t//    hashAlgorithm AlgorithmIdentifier,\r\n\t\t//    hashValue OtherHashValue }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"OtherHashAlgAndValue.hashAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.hashValue || \"OtherHashAlgAndValue.hashValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherHashAlgAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\thashValue: \"hashValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherHashAlgAndValue\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.hashValue = asn1.result.hashValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.hashValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\thashValue: this.hashValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}