{"version":3,"sources":["../src/OtherHashAlgAndValue.js"],"names":["asn1js","OtherHashAlgAndValue","constructor","parameters","hashAlgorithm","defaultValues","hashValue","fromSchema","schema","memberName","AlgorithmIdentifier","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","file":"OtherHashAlgAndValue.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { AlgorithmIdentifier } from \"pkijs\";\n//**************************************************************************************\nexport default class OtherHashAlgAndValue {\n  //**********************************************************************************\n  /**\n   * Constructor for OtherHashAlgAndValue class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {AlgorithmIdentifier}\n     * @description hashAlgorithm\n     */\n    this.hashAlgorithm = getParametersValue(\n      parameters,\n      \"hashAlgorithm\",\n      OtherHashAlgAndValue.defaultValues(\"hashAlgorithm\")\n    );\n    /**\n     * @type {OctetString}\n     * @description hashValue\n     */\n    this.hashValue = getParametersValue(\n      parameters,\n      \"hashValue\",\n      OtherHashAlgAndValue.defaultValues(\"hashValue\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n        return new AlgorithmIdentifier();\n      case \"hashValue\":\n        return new asn1js.OctetString();\n      default:\n        throw new Error(\n          `Invalid member name for OtherHashAlgAndValue class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n      case \"hashValue\":\n        return memberValue.isEqual(\n          OtherHashAlgAndValue.defaultValues(memberValue)\n        );\n      default:\n        throw new Error(\n          `Invalid member name for OtherHashAlgAndValue class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // OtherHashValue ::= OCTET STRING\n    //\n    // OtherHashAlgAndValue ::= SEQUENCE {\n    //    hashAlgorithm AlgorithmIdentifier,\n    //    hashValue OtherHashValue }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [hashAlgorithm]\n     * @property {string} [hashValue]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        AlgorithmIdentifier.schema(\n          names.hashAlgorithm || {\n            names: {\n              blockName: \"OtherHashAlgAndValue.hashAlgorithm\",\n            },\n          }\n        ),\n        new asn1js.OctetString({\n          name: names.hashValue || \"OtherHashAlgAndValue.hashValue\",\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OtherHashAlgAndValue.schema({\n        names: {\n          hashAlgorithm: {\n            names: {\n              blockName: \"hashAlgorithm\",\n            },\n          },\n          hashValue: \"hashValue\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OtherHashAlgAndValue\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.hashAlgorithm = new AlgorithmIdentifier({\n      schema: asn1.result.hashAlgorithm,\n    });\n    this.hashValue = asn1.result.hashValue;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.hashAlgorithm.toSchema(), this.hashValue],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      hashAlgorithm: this.hashAlgorithm.toJSON(),\n      hashValue: this.hashValue.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}