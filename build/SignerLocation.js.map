{"version":3,"sources":["../src/SignerLocation.js"],"names":["asn1js","SignerLocation","constructor","parameters","countryName","defaultValues","localityName","postalAdddress","fromSchema","schema","memberName","DirectoryString","Error","compareWithDefault","memberValue","type","value","length","names","Sequence","name","blockName","Constructed","optional","idBlock","tagClass","tagNumber","Choice","TeletexString","PrintableString","UniversalString","Utf8String","BmpString","Repeated","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"SignerLocation.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport DirectoryString from \"./DirectoryString.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class SignerLocation {\n  //**********************************************************************************\n  /**\n   * Constructor for SignerLocation class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"countryName\" in parameters)\n      /**\n       * @type {DirectoryString}\n       * @description countryName\n       */\n      this.countryName = getParametersValue(\n        parameters,\n        \"countryName\",\n        SignerLocation.defaultValues(\"countryName\")\n      );\n\n    if (\"localityName\" in parameters)\n      /**\n       * @type {DirectoryString}\n       * @description localityName\n       */\n      this.localityName = getParametersValue(\n        parameters,\n        \"localityName\",\n        SignerLocation.defaultValues(\"localityName\")\n      );\n\n    if (\"postalAdddress\" in parameters)\n      /**\n       * @type {Array.<DirectoryString>}\n       * @description postalAdddress\n       */\n      this.postalAdddress = getParametersValue(\n        parameters,\n        \"postalAdddress\",\n        SignerLocation.defaultValues(\"postalAdddress\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"countryName\":\n      case \"localityName\":\n        return new DirectoryString();\n      case \"postalAdddress\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for SignerLocation class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"countryName\":\n      case \"localityName\":\n        return (\n          DirectoryString.compareWithDefault(\"type\", memberValue.type) &&\n          DirectoryString.compareWithDefault(\"value\", memberValue.value)\n        );\n      case \"postalAdddress\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for SignerLocation class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString\n    //\n    // SignerLocation ::= SEQUENCE { -- at least one of the following shall be present:\n    //    countryName [0] DirectoryString OPTIONAL,\n    //    -- As used to name a Country in X.500\n    //    localityName [1] DirectoryString OPTIONAL,\n    //    -- As used to name a locality in X.500\n    //    postalAdddress [2] PostalAddress OPTIONAL }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [countryName]\n     * @property {string} [localityName]\n     * @property {string} [postalAdddress]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [\n            new asn1js.Choice({\n              value: [\n                new asn1js.TeletexString({ name: names.countryName || \"\" }),\n                new asn1js.PrintableString({ name: names.countryName || \"\" }),\n                new asn1js.UniversalString({ name: names.countryName || \"\" }),\n                new asn1js.Utf8String({ name: names.countryName || \"\" }),\n                new asn1js.BmpString({ name: names.countryName || \"\" }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          name: names.localityName || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            new asn1js.Choice({\n              value: [\n                new asn1js.TeletexString({ name: names.localityName || \"\" }),\n                new asn1js.PrintableString({ name: names.localityName || \"\" }),\n                new asn1js.UniversalString({ name: names.localityName || \"\" }),\n                new asn1js.Utf8String({ name: names.localityName || \"\" }),\n                new asn1js.BmpString({ name: names.localityName || \"\" }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [\n            new asn1js.Repeated({\n              name: names.postalAdddress || \"\",\n              value: new asn1js.Choice({\n                value: [\n                  new asn1js.TeletexString(),\n                  new asn1js.PrintableString(),\n                  new asn1js.UniversalString(),\n                  new asn1js.Utf8String(),\n                  new asn1js.BmpString(),\n                ],\n              }),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      SignerLocation.schema({\n        names: {\n          countryName: \"countryName\",\n          localityName: \"localityName\",\n          postalAdddress: \"postalAdddress\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for SignerLocation\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"countryName\" in asn1.result)\n      this.countryName = new DirectoryString({\n        schema: asn1.result.countryName,\n      });\n\n    if (\"localityName\" in asn1.result)\n      this.localityName = new DirectoryString({\n        schema: asn1.result.localityName,\n      });\n\n    if (\"postalAdddress\" in asn1.result)\n      this.postalAdddress = Array.from(\n        asn1.result.postalAdddress,\n        (element) => new DirectoryString({ schema: element })\n      );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"countryName\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [this.countryName.toSchema()],\n        })\n      );\n    }\n\n    if (\"localityName\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [this.localityName.toSchema()],\n        })\n      );\n    }\n\n    if (\"postalAdddress\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: Array.from(this.postalAdddress, (element) =>\n            element.toSchema()\n          ),\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"countryName\" in this) _object.countryName = this.countryName.toJSON();\n\n    if (\"localityName\" in this)\n      _object.localityName = this.localityName.toJSON();\n\n    if (\"postalAdddress\" in this)\n      _object.postalAdddress = Array.from(this.postalAdddress, (element) =>\n        element.toJSON()\n      );\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}