{"version":3,"sources":["../src/SigPolicyQualifierInfo.js"],"names":["asn1js","SigPolicyQualifierInfo","constructor","parameters","sigPolicyQualifierId","defaultValues","sigQualifier","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;;;AACA;AACe,MAAMC,sBAAN,CAA6B;AAC1C;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,oBAAL,GAA4B,iCAC1BD,UAD0B,EAE1B,sBAF0B,EAG1BF,uBAAuBI,aAAvB,CAAqC,sBAArC,CAH0B,CAA5B;AAKA;;;;AAIA,SAAKC,YAAL,GAAoB,iCAClBH,UADkB,EAElB,cAFkB,EAGlBF,uBAAuBI,aAAvB,CAAqC,cAArC,CAHkB,CAApB;AAKA;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOH,aAAP,CAAqBI,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,sBAAL;AACE,eAAO,EAAP;AACF,WAAK,cAAL;AACE,eAAO,IAAIT,OAAOU,GAAX,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,yDAAwDF,UAAW,EADhE,CAAN;AANJ;AAUD;AACD;AACA;;;;;AAKA,SAAOG,kBAAP,CAA0BH,UAA1B,EAAsCI,WAAtC,EAAmD;AACjD,YAAQJ,UAAR;AACE,WAAK,sBAAL;AACE,eAAOI,gBAAgB,EAAvB;AACF,WAAK,cAAL;AACE,eAAOA,uBAAuBb,OAAOU,GAArC;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,yDAAwDF,UAAW,EADhE,CAAN;AANJ;AAUD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcL,aAAa,EAA3B,EAA+B;AAC7B;AACA;AACA;;AAEA;;;;;;;AAOA,UAAMW,QAAQ,iCAAmBX,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOe,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,aAAO,CACL,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAEH,MAAMF,MAAMV,oBAAN,IAA8B,EAAtC,EAA5B,CADK,EAEL,IAAIJ,OAAOU,GAAX,CAAe;AACbM,cAAMF,MAAMR,YAAN,IAAsB;AADf,OAAf,CAFK;AAFkB,KAApB,CAAP;AASD;AACD;AACA;;;;AAIAC,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMY,OAAOpB,OAAOqB,aAAP,CACXb,MADW,EAEXA,MAFW,EAGXP,uBAAuBO,MAAvB,CAA8B;AAC5BM,aAAO;AACLV,8BAAsB,sBADjB;AAELE,sBAAc;AAFT;AADqB,KAA9B,CAHW,CAAb;;AAWA,QAAIc,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAIX,KAAJ,CACJ,gFADI,CAAN;AAGF;;AAEA;AACA,SAAKP,oBAAL,GAA4BgB,KAAKG,MAAL,CAAYnB,oBAAZ,CAAiCoB,UAAjC,CAA4CC,QAA5C,EAA5B;AACA,SAAKnB,YAAL,GAAoBc,KAAKG,MAAL,CAAYjB,YAAhC;AACA;AACD;AACD;AACA;;;;AAIAoB,aAAW;AACT,QACEzB,uBAAuBW,kBAAvB,CACE,cADF,EAEE,KAAKN,YAFP,CADF,EAME,MAAM,IAAIK,KAAJ,CAAU,0CAAV,CAAN;;AAEF;AACA,WAAO,IAAIX,OAAOe,QAAX,CAAoB;AACzBG,aAAO,CACL,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAED,OAAO,KAAKd,oBAAd,EAA5B,CADK,EAEL,KAAKE,YAFA;AADkB,KAApB,CAAP;AAMA;AACD;AACD;AACA;;;;AAIAqB,WAAS;AACP,QACE1B,uBAAuBW,kBAAvB,CACE,cADF,EAEE,KAAKN,YAFP,CADF,EAME,MAAM,IAAIK,KAAJ,CAAU,0CAAV,CAAN;;AAEF,WAAO;AACLP,4BAAsB,KAAKA,oBADtB;AAELE,oBAAc,KAAKA,YAAL,CAAkBqB,MAAlB;AAFT,KAAP;AAID;AACD;AAzK0C;kBAAvB1B,sB,EA2KrB","file":"SigPolicyQualifierInfo.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\nexport default class SigPolicyQualifierInfo {\n  //**********************************************************************************\n  /**\n   * Constructor for SigPolicyQualifierInfo class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description sigPolicyQualifierId\n     */\n    this.sigPolicyQualifierId = getParametersValue(\n      parameters,\n      \"sigPolicyQualifierId\",\n      SigPolicyQualifierInfo.defaultValues(\"sigPolicyQualifierId\")\n    );\n    /**\n     * @type {*}\n     * @description sigQualifier\n     */\n    this.sigQualifier = getParametersValue(\n      parameters,\n      \"sigQualifier\",\n      SigPolicyQualifierInfo.defaultValues(\"sigQualifier\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"sigPolicyQualifierId\":\n        return \"\";\n      case \"sigQualifier\":\n        return new asn1js.Any();\n      default:\n        throw new Error(\n          `Invalid member name for SigPolicyQualifierInfo class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"sigPolicyQualifierId\":\n        return memberValue === \"\";\n      case \"sigQualifier\":\n        return memberValue instanceof asn1js.Any;\n      default:\n        throw new Error(\n          `Invalid member name for SigPolicyQualifierInfo class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // SigPolicyQualifierInfo ::= SEQUENCE {\n    //    sigPolicyQualifierId SigPolicyQualifierId,\n    //    sigQualifier ANY DEFINED BY sigPolicyQualifierId }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [type]\n     * @property {string} [setName]\n     * @property {string} [values]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.ObjectIdentifier({ name: names.sigPolicyQualifierId || \"\" }),\n        new asn1js.Any({\n          name: names.sigQualifier || \"\",\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      SigPolicyQualifierInfo.schema({\n        names: {\n          sigPolicyQualifierId: \"sigPolicyQualifierId\",\n          sigQualifier: \"sigQualifier\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for SigPolicyQualifierInfo\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.sigPolicyQualifierId = asn1.result.sigPolicyQualifierId.valueBlock.toString();\n    this.sigQualifier = asn1.result.sigQualifier;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    if (\n      SigPolicyQualifierInfo.compareWithDefault(\n        \"sigQualifier\",\n        this.sigQualifier\n      )\n    )\n      throw new Error('Non-initialized value for \"sigQualifier\"');\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.ObjectIdentifier({ value: this.sigPolicyQualifierId }),\n        this.sigQualifier,\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    if (\n      SigPolicyQualifierInfo.compareWithDefault(\n        \"sigQualifier\",\n        this.sigQualifier\n      )\n    )\n      throw new Error('Non-initialized value for \"sigQualifier\"');\n\n    return {\n      sigPolicyQualifierId: this.sigPolicyQualifierId,\n      sigQualifier: this.sigQualifier.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}