{"version":3,"sources":["../src/CAdESCTimestamp.js"],"names":["asn1js","CAdESCTimestamp","ContentInfo","constructor","parameters","tspResponse","ArrayBuffer","getStampingBuffer","cmsSignedData","signerIndex","sequence","Promise","resolve","hashAlgorithm","resultBuffer","signatureTimeStamp","completeCertificateReferences","completeRevocationReferences","crypto","reject","then","signerInfos","signature","valueBlock","valueHex","makeAttribute","toSchema","toBER","error","digest","name","Error","asn1","fromBER","TimeStampResp","schema","result","fromSchema","timeStampToken","Attribute","type","values"],"mappings":"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","file":"CAdESCTimestamp.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\nimport { getCrypto, ContentInfo, Attribute, TimeStampResp } from \"pkijs\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class CAdESCTimestamp extends ContentInfo {\n  //**********************************************************************************\n  /**\n   * Constructor for CAdESCTimestamp class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n\n    /**\n     * @type {ArrayBuffer}\n     * @description tspResponse\n     */\n    this.tspResponse = getParametersValue(\n      parameters,\n      \"tspResponse\",\n      new ArrayBuffer(0)\n    );\n  }\n  //**********************************************************************************\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * Get \"ArrayBuffer\" to transfer to time-stamp server\n   * @param {SignedData} cmsSignedData CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} [parameters] Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  getStampingBuffer(cmsSignedData, signerIndex, parameters = {}) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-256\";\n\n    let resultBuffer = new ArrayBuffer(0);\n\n    let signatureTimeStamp; // SignatureTimeStamp\n    let completeCertificateReferences; // CompleteCertificateReferences\n    let completeRevocationReferences; // CompleteRevocationReferences\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"signatureTimeStamp\" in parameters)\n      signatureTimeStamp = parameters.signatureTimeStamp;\n    else\n      return Promise.reject(\n        'Parameter \"signatureTimeStamp\" is mandatory for making \"CAdES-C-Timestamp\" attribute'\n      );\n\n    if (\"completeCertificateReferences\" in parameters)\n      completeCertificateReferences = parameters.completeCertificateReferences;\n    else\n      return Promise.reject(\n        'Parameter \"completeCertificateReferences\" is mandatory for making \"CAdES-C-Timestamp\" attribute'\n      );\n\n    if (\"completeRevocationReferences\" in parameters)\n      completeRevocationReferences = parameters.completeRevocationReferences;\n    else\n      return Promise.reject(\n        'Parameter \"completeRevocationReferences\" is mandatory for making \"CAdES-C-Timestamp\" attribute'\n      );\n    //endregion\n\n    //region Make stamping buffer\n    sequence = sequence.then(\n      () => {\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          cmsSignedData.signerInfos[signerIndex].signature.valueBlock.valueHex\n        );\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          signatureTimeStamp.makeAttribute().toSchema().toBER(false)\n        );\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          completeCertificateReferences.makeAttribute().toSchema().toBER(false)\n        );\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          completeRevocationReferences.makeAttribute().toSchema().toBER(false)\n        );\n      },\n      (error) => Promise.reject(error)\n    );\n    //endregion\n\n    //region Make hash of signature\n    sequence = sequence.then(\n      () => crypto.digest({ name: hashAlgorithm }, resultBuffer),\n      (error) => Promise.reject(error)\n    );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n  /**\n   * Create \"CAdES-C-Timestamp\" CAdES attribute\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters) {\n    //region Initial variables\n    let tspResponse;\n    //endregion\n\n    //region Check input parameters\n    if (\"tspResponse\" in parameters) tspResponse = parameters.tspResponse;\n    else {\n      if (\"tspResponse\" in this) tspResponse = this.tspResponse;\n      else\n        throw new Error(\n          'Parameter \"tspResponse\" is mandatory for making \"CAdES-C-Timestamp\" attribute'\n        );\n    }\n\n    this.tspResponse = tspResponse;\n    //endregion\n\n    //region Change type of \"tspResponse\"\n    const asn1 = asn1js.fromBER(tspResponse);\n    tspResponse = new TimeStampResp({ schema: asn1.result });\n    //endregion\n\n    //region Initialize internal variables from \"tspResponse\"\n    if (\"timeStampToken\" in tspResponse)\n      this.fromSchema(tspResponse.timeStampToken.toSchema());\n    else throw new Error('No neccessary \"timeStampToken\" inside \"tspResponse\"');\n    //endregion\n\n    //region Create and return attribute\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.25\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}