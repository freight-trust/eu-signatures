{"version":3,"sources":["../src/NoticeReference.js"],"names":["asn1js","NoticeReference","constructor","parameters","organization","defaultValues","_organizationType","noticeNumbers","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Choice","VisibleString","BmpString","Utf8String","Repeated","Integer","asn1","compareSchema","verified","result","valueBlock","idBlock","tagNumber","Array","from","toSchema","outputArray","push","toJSON"],"mappings":"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","file":"NoticeReference.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\nexport default class NoticeReference {\n  //**********************************************************************************\n  /**\n   * Constructor for NoticeReference class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description organization\n     */\n    this.organization = getParametersValue(\n      parameters,\n      \"organization\",\n      NoticeReference.defaultValues(\"organization\")\n    );\n    /**\n     * @type {number}\n     * @description Type number for \"organization\"\n     */\n    this._organizationType = -1;\n    /**\n     * @type {Array}\n     * @description noticeNumbers\n     */\n    this.noticeNumbers = getParametersValue(\n      parameters,\n      \"noticeNumbers\",\n      NoticeReference.defaultValues(\"noticeNumbers\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"organization\":\n        return \"\";\n      case \"noticeNumbers\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for NoticeReference class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"organization\":\n        return memberValue === \"\";\n      case \"noticeNumbers\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for NoticeReference class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // NoticeReference ::= SEQUENCE {\n    //    organization DisplayText,\n    //    noticeNumbers SEQUENCE OF INTEGER }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [optional]\n     * @property {string} [organization]\n     * @property {string} [noticeNumbers]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Choice({\n          value: [\n            new asn1js.VisibleString({ name: names.organization || \"\" }),\n            new asn1js.BmpString({ name: names.organization || \"\" }),\n            new asn1js.Utf8String({ name: names.organization || \"\" }),\n          ],\n        }),\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.noticeNumbers || \"\",\n              value: new asn1js.Integer(),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      NoticeReference.schema({\n        names: {\n          organization: \"organization\",\n          noticeNumbers: \"noticeNumbers\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for NoticeReference\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.organization = asn1.result.organization.valueBlock.value;\n\n    switch (asn1.result.organization.idBlock.tagNumber) {\n      case 26: // VISIBLESTRING\n        // noinspection JSUnusedGlobalSymbols\n        this._organizationType = 0;\n        break;\n      case 30: // BMPSTRING\n        // noinspection JSUnusedGlobalSymbols\n        this._organizationType = 1;\n        break;\n      case 12: // UTF8STRING\n        // noinspection JSUnusedGlobalSymbols\n        this._organizationType = 2;\n        break;\n      default:\n        throw new Error(\n          \"Object's schema was not verified against input data for NoticeReference\"\n        );\n    }\n\n    this.noticeNumbers = Array.from(asn1.result.noticeNumbers);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    switch (this._organizationType) {\n      case 0:\n        outputArray.push(\n          new asn1js.VisibleString({ value: this.organization })\n        );\n        break;\n      case 1:\n        outputArray.push(new asn1js.BmpString({ value: this.organization }));\n        break;\n      case 2:\n        outputArray.push(new asn1js.Utf8String({ value: this.organization }));\n        break;\n      default:\n        throw new Error('Non-initialized \"organization\" value');\n    }\n\n    outputArray.push(\n      new asn1js.Sequence({\n        value: Array.from(this.noticeNumbers),\n      })\n    );\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      organization: this.organization,\n      noticeNumbers: Array.from(this.noticeNumbers.toJSON()),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}