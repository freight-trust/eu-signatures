{"version":3,"sources":["../src/NoticeReference.js"],"names":["asn1js","NoticeReference","constructor","parameters","organization","defaultValues","_organizationType","noticeNumbers","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Choice","VisibleString","BmpString","Utf8String","Repeated","Integer","asn1","compareSchema","verified","result","valueBlock","idBlock","tagNumber","Array","from","toSchema","outputArray","push","toJSON"],"mappings":"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","file":"NoticeReference.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class NoticeReference\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for NoticeReference class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description organization\r\n\t\t */\r\n\t\tthis.organization = getParametersValue(parameters, \"organization\", NoticeReference.defaultValues(\"organization\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @description Type number for \"organization\"\r\n\t\t */\r\n\t\tthis._organizationType = -1;\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @description noticeNumbers\r\n\t\t */\r\n\t\tthis.noticeNumbers = getParametersValue(parameters, \"noticeNumbers\", NoticeReference.defaultValues(\"noticeNumbers\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"organization\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"noticeNumbers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NoticeReference class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"organization\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"noticeNumbers\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for NoticeReference class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// NoticeReference ::= SEQUENCE {\r\n\t\t//    organization DisplayText,\r\n\t\t//    noticeNumbers SEQUENCE OF INTEGER }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [organization]\r\n\t\t * @property {string} [noticeNumbers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.VisibleString({ name: (names.organization || \"\") }),\r\n\t\t\t\t\t\tnew asn1js.BmpString({ name: (names.organization || \"\") }),\r\n\t\t\t\t\t\tnew asn1js.Utf8String({ name: (names.organization || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.noticeNumbers || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Integer()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tNoticeReference.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\torganization: \"organization\",\r\n\t\t\t\t\tnoticeNumbers: \"noticeNumbers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NoticeReference\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.organization = asn1.result.organization.valueBlock.value;\r\n\t\t\r\n\t\tswitch(asn1.result.organization.idBlock.tagNumber)\r\n\t\t{\r\n\t\t\tcase 26: // VISIBLESTRING\r\n\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\tthis._organizationType = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 30: // BMPSTRING\r\n\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\tthis._organizationType = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12: // UTF8STRING\r\n\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\tthis._organizationType = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Object's schema was not verified against input data for NoticeReference\");\r\n\t\t}\r\n\r\n\t\tthis.noticeNumbers = Array.from(asn1.result.noticeNumbers);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tswitch(this._organizationType)\r\n\t\t{\r\n\t\t\tcase 0:\r\n\t\t\t\toutputArray.push(new asn1js.VisibleString({ value: this.organization }));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1:\r\n\t\t\t\toutputArray.push(new asn1js.BmpString({ value: this.organization }));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\toutputArray.push(new asn1js.Utf8String({ value: this.organization }));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Non-initialized \\\"organization\\\" value\");\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.noticeNumbers)\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\torganization: this.organization,\r\n\t\t\tnoticeNumbers: Array.from(this.noticeNumbers.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}