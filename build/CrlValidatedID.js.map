{"version":3,"sources":["../src/CrlValidatedID.js"],"names":["asn1js","CrlValidatedID","constructor","parameters","crlHash","defaultValues","_crlHashType","crlIdentifier","fromSchema","schema","memberName","Any","CrlIdentifier","Error","compareWithDefault","memberValue","crlissuer","crlIssuedTime","names","Sequence","name","blockName","optional","value","Choice","OctetString","crlHashSimple","OtherHashAlgAndValue","crlHashComplex","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","_this","sequence","Promise","resolve","hashAlgorithm","crl","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","valueHex","hashValue"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;;;;;;;AACA;AACe,MAAMC,cAAN,CAAqB;AAClC;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,OAAL,GAAe,iCACbD,UADa,EAEb,SAFa,EAGbF,eAAeI,aAAf,CAA6B,SAA7B,CAHa,CAAf;;AAMA,SAAKC,YAAL,GAAoB,CAAC,CAArB,CAZ2B,CAYH;;AAExB,QAAI,mBAAmBH,UAAvB;AACE;;;;AAIA,WAAKI,aAAL,GAAqB,iCACnBJ,UADmB,EAEnB,eAFmB,EAGnBF,eAAeI,aAAf,CAA6B,eAA7B,CAHmB,CAArB;AAKF;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOJ,aAAP,CAAqBK,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,SAAL;AACE,eAAO,IAAIV,OAAOW,GAAX,EAAP;AACF,WAAK,eAAL;AACE,eAAO,IAAIC,uBAAJ,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,iDAAgDH,UAAW,EADxD,CAAN;AANJ;AAUD;AACD;AACA;;;;;AAKA,SAAOI,kBAAP,CAA0BJ,UAA1B,EAAsCK,WAAtC,EAAmD;AACjD,YAAQL,UAAR;AACE,WAAK,SAAL;AACE,eAAOK,uBAAuBf,OAAOW,GAArC;AACF,WAAK,eAAL;AACE,eACEC,wBAAcE,kBAAd,CACE,WADF,EAEEC,YAAYC,SAFd,KAIAJ,wBAAcE,kBAAd,CACE,eADF,EAEEC,YAAYE,aAFd,CAJA,IAQA,eAAeF,WAAf,KAA+B,KATjC;AAWF;AACE,cAAM,IAAIF,KAAJ,CACH,iDAAgDH,UAAW,EADxD,CAAN;AAhBJ;AAoBD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcN,aAAa,EAA3B,EAA+B;AAC7B;AACA;AACA;;AAEA;;;;;;;AAOA,UAAMe,QAAQ,iCAAmBf,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOmB,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,gBAAUJ,MAAMI,QAAN,IAAkB,KAFH;AAGzBC,aAAO,CACL,IAAIvB,OAAOwB,MAAX,CAAkB;AAChBD,eAAO,CACL,IAAIvB,OAAOyB,WAAX,CAAuB,EAAEL,MAAMF,MAAMQ,aAAN,IAAuB,EAA/B,EAAvB,CADK,EAELC,+BAAqBlB,MAArB,CACES,MAAMU,cAAN,IAAwB;AACtBV,iBAAO;AACLG,uBAAW;AADN;AADe,SAD1B,CAFK;AADS,OAAlB,CADK,EAaLT,wBAAcH,MAAd,CACES,MAAMX,aAAN,IAAuB;AACrBW,eAAO;AACLG,qBAAW;AADN;AADc,OADzB,CAbK;AAHkB,KAApB,CAAP;AAyBD;AACD;AACA;;;;AAIAb,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMoB,OAAO7B,OAAO8B,aAAP,CACXrB,MADW,EAEXA,MAFW,EAGXR,eAAeQ,MAAf,CAAsB;AACpBS,aAAO;AACLQ,uBAAe,SADV;AAELE,wBAAgB;AACdV,iBAAO;AACLG,uBAAW;AADN;AADO,SAFX;AAOLd,uBAAe;AACbW,iBAAO;AACLG,uBAAW;AADN;AADM;AAPV;AADa,KAAtB,CAHW,CAAb;;AAoBA,QAAIQ,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAIlB,KAAJ,CACJ,wEADI,CAAN;AAGF;;AAEA;AACA,QAAIgB,KAAKG,MAAL,CAAY5B,OAAZ,YAA+BJ,OAAOyB,WAA1C,EAAuD;AACrD,WAAKrB,OAAL,GAAeyB,KAAKG,MAAL,CAAY5B,OAA3B;AACA,WAAKE,YAAL,GAAoB,CAApB;AACD,KAHD,MAGO;AACL,WAAKF,OAAL,GAAe,IAAIuB,8BAAJ,CAAyB,EAAElB,QAAQoB,KAAKG,MAAL,CAAY5B,OAAtB,EAAzB,CAAf;AACA,WAAKE,YAAL,GAAoB,CAApB;AACD;;AAED,QAAI,mBAAmBuB,KAAKG,MAA5B,EACE,KAAKzB,aAAL,GAAqB,IAAIK,uBAAJ,CAAkB;AACrCH,cAAQoB,KAAKG,MAAL,CAAYzB;AADiB,KAAlB,CAArB;AAGF;AACD;AACD;AACA;;;;AAIA0B,aAAW;AACT,QAAI,KAAK3B,YAAL,KAAsB,CAAC,CAA3B,EACE,MAAM,IAAIO,KAAJ,CAAU,gDAAV,CAAN;;AAEF;AACA,UAAMqB,cAAc,EAApB;;AAEA,QAAI,KAAK5B,YAAL,KAAsB,CAA1B;AACE;AACA4B,kBAAYC,IAAZ,CAAiB,KAAK/B,OAAtB,EAFF,KAGK8B,YAAYC,IAAZ,CAAiB,KAAK/B,OAAL,CAAa6B,QAAb,EAAjB;;AAEL,QAAI,mBAAmB,IAAvB,EACEC,YAAYC,IAAZ,CAAiB,KAAK5B,aAAL,CAAmB0B,QAAnB,EAAjB;AACF;;AAEA;AACA,WAAO,IAAIjC,OAAOmB,QAAX,CAAoB;AACzBI,aAAOW;AADkB,KAApB,CAAP;AAGA;AACD;AACD;AACA;;;;AAIAE,WAAS;AACP,UAAMC,UAAU;AACdjC,eAAS,KAAKA,OAAL,CAAagC,MAAb;AADK,KAAhB;;AAIA,QAAI,mBAAmB,IAAvB,EACEC,QAAQ9B,aAAR,GAAwB,KAAKA,aAAL,CAAmB6B,MAAnB,EAAxB;;AAEF,WAAOC,OAAP;AACD;AACD;AACA;;;;;AAKAC,aAAWnC,UAAX,EAAuB;AACrB;AACA,UAAMoC,QAAQ,IAAd;;AAEA,QAAIC,WAAWC,QAAQC,OAAR,EAAf;;AAEA,QAAIC,gBAAgB,OAApB;;AAEA,QAAIC,GAAJ;AACA;;AAEA;AACA,QAAI,mBAAmBzC,UAAvB,EAAmCwC,gBAAgBxC,WAAWwC,aAA3B;;AAEnC,QAAI,SAASxC,UAAb,EAAyByC,MAAMzC,WAAWyC,GAAjB;AACzB;AADA,SAGE,OAAOH,QAAQI,MAAR,CACL,0DADK,CAAP;AAGF;;AAEA;AACA,UAAMC,SAAS,uBAAf;AACA,QAAI,OAAOA,MAAP,KAAkB,WAAtB,EACE,OAAOL,QAAQI,MAAR,CAAe,mCAAf,CAAP;AACF;;AAEA;AACAL,eAAWA,SAASO,IAAT,CAAc,MAAM;AAC7B,UAAIJ,cAAcK,WAAd,OAAgC,OAApC,EAA6C;AAC3C,cAAMC,MAAM,8BAAkB,EAAE7B,MAAMuB,aAAR,EAAlB,CAAZ;AACA,YAAIM,QAAQ,EAAZ,EACE,OAAOR,QAAQI,MAAR,CACJ,gCAA+BF,aAAc,EADzC,CAAP;;AAIFJ,cAAMjC,YAAN,GAAqB,CAArB;AACAiC,cAAMnC,OAAN,GAAgB,IAAIuB,8BAAJ,CAAyB;AACvCgB,yBAAe,IAAIO,0BAAJ,CAAwB;AACrCC,yBAAaF,GADwB;AAErCG,6BAAiB,IAAIpD,OAAOqD,IAAX;AAFoB,WAAxB;AADwB,SAAzB,CAAhB;AAMD,OAdD,MAcOd,MAAMjC,YAAN,GAAqB,CAArB;;AAEP,aAAOmC,QAAQC,OAAR,EAAP;AACD,KAlBU,CAAX;AAmBA;;AAEA;AACAF,eAAWA,SACRO,IADQ,CAEP,MACED,OAAOQ,MAAP,CAAc,EAAElC,MAAMuB,aAAR,EAAd,EAAuCC,IAAIX,QAAJ,GAAesB,KAAf,CAAqB,KAArB,CAAvC,CAHK,EAINC,KAAD,IAAWf,QAAQI,MAAR,CAAeW,KAAf,CAJJ,EAMRT,IANQ,CAONf,MAAD,IAAY;AACV,UAAIO,MAAMjC,YAAN,KAAuB,CAA3B,EACEiC,MAAMnC,OAAN,GAAgB,IAAIJ,OAAOyB,WAAX,CAAuB,EAAEgC,UAAUzB,MAAZ,EAAvB,CAAhB,CADF,KAGEO,MAAMnC,OAAN,CAAcsD,SAAd,GAA0B,IAAI1D,OAAOyB,WAAX,CAAuB;AAC/CgC,kBAAUzB;AADqC,OAAvB,CAA1B;;AAIFO,YAAMhC,aAAN,GAAsB,IAAIK,uBAAJ,EAAtB;AACA2B,YAAMhC,aAAN,CAAoB+B,UAApB,CAA+B;AAC7BM;AAD6B,OAA/B;AAGD,KAnBM,EAoBNY,KAAD,IAAWf,QAAQI,MAAR,CAAeW,KAAf,CApBJ,CAAX;AAsBA;;AAEA,WAAOhB,QAAP;AACD;AACD;AA7SkC;kBAAfvC,c,EA+SrB","file":"CrlValidatedID.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier } from \"pkijs\";\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\nimport CrlIdentifier from \"./CrlIdentifier.js\";\n//**************************************************************************************\nexport default class CrlValidatedID {\n  //**********************************************************************************\n  /**\n   * Constructor for CrlValidatedID class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {OctetString|OtherHashAlgAndValue}\n     * @description crlHash\n     */\n    this.crlHash = getParametersValue(\n      parameters,\n      \"crlHash\",\n      CrlValidatedID.defaultValues(\"crlHash\")\n    );\n\n    this._crlHashType = -1; // 0 - OCTETSTRING, 1 - \"OtherHashAlgAndValue\"\n\n    if (\"crlIdentifier\" in parameters)\n      /**\n       * @type {CrlIdentifier}\n       * @description crlIdentifier\n       */\n      this.crlIdentifier = getParametersValue(\n        parameters,\n        \"crlIdentifier\",\n        CrlValidatedID.defaultValues(\"crlIdentifier\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crlHash\":\n        return new asn1js.Any();\n      case \"crlIdentifier\":\n        return new CrlIdentifier();\n      default:\n        throw new Error(\n          `Invalid member name for CrlValidatedID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crlHash\":\n        return memberValue instanceof asn1js.Any;\n      case \"crlIdentifier\":\n        return (\n          CrlIdentifier.compareWithDefault(\n            \"crlissuer\",\n            memberValue.crlissuer\n          ) &&\n          CrlIdentifier.compareWithDefault(\n            \"crlIssuedTime\",\n            memberValue.crlIssuedTime\n          ) &&\n          \"crlNumber\" in memberValue === false\n        );\n      default:\n        throw new Error(\n          `Invalid member name for CrlValidatedID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CrlValidatedID ::= SEQUENCE {\n    //    crlHash OtherHash,\n    //    crlIdentifier CrlIdentifier OPTIONAL }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [crlHashSimple]\n     * @property {string} [crlHashComplex]\n     * @property {string} [crlIdentifier]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Choice({\n          value: [\n            new asn1js.OctetString({ name: names.crlHashSimple || \"\" }),\n            OtherHashAlgAndValue.schema(\n              names.crlHashComplex || {\n                names: {\n                  blockName: \"\",\n                },\n              }\n            ),\n          ],\n        }),\n        CrlIdentifier.schema(\n          names.crlIdentifier || {\n            names: {\n              blockName: \"\",\n            },\n          }\n        ),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CrlValidatedID.schema({\n        names: {\n          crlHashSimple: \"crlHash\",\n          crlHashComplex: {\n            names: {\n              blockName: \"crlHash\",\n            },\n          },\n          crlIdentifier: {\n            names: {\n              blockName: \"crlIdentifier\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CrlValidatedID\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (asn1.result.crlHash instanceof asn1js.OctetString) {\n      this.crlHash = asn1.result.crlHash;\n      this._crlHashType = 0;\n    } else {\n      this.crlHash = new OtherHashAlgAndValue({ schema: asn1.result.crlHash });\n      this._crlHashType = 1;\n    }\n\n    if (\"crlIdentifier\" in asn1.result)\n      this.crlIdentifier = new CrlIdentifier({\n        schema: asn1.result.crlIdentifier,\n      });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    if (this._crlHashType === -1)\n      throw new Error('Incorrectly initialized \"CrlValidatedID\" class');\n\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (this._crlHashType === 0)\n      // OCTETSTRING\n      outputArray.push(this.crlHash);\n    else outputArray.push(this.crlHash.toSchema());\n\n    if (\"crlIdentifier\" in this)\n      outputArray.push(this.crlIdentifier.toSchema());\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      crlHash: this.crlHash.toJSON(),\n    };\n\n    if (\"crlIdentifier\" in this)\n      _object.crlIdentifier = this.crlIdentifier.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"CrlValidatedID\" for given CMS Signed Data and signer index\n   * @param parameters\n   * @returns {Promise}\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    const _this = this;\n\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-1\";\n\n    let crl;\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"crl\" in parameters) crl = parameters.crl;\n    // in_window.org.pkijs.simpl.CRL\n    else\n      return Promise.reject(\n        'Parameter \"crl\" is mandatory for making \"CrlValidatedID\"'\n      );\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Fill correct value for \"hashIndAlgorithm\"\n    sequence = sequence.then(() => {\n      if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n        const oid = getOIDByAlgorithm({ name: hashAlgorithm });\n        if (oid === \"\")\n          return Promise.reject(\n            `Incorrect hashing algorithm: ${hashAlgorithm}`\n          );\n\n        _this._crlHashType = 1;\n        _this.crlHash = new OtherHashAlgAndValue({\n          hashAlgorithm: new AlgorithmIdentifier({\n            algorithmId: oid,\n            algorithmParams: new asn1js.Null(),\n          }),\n        });\n      } else _this._crlHashType = 0;\n\n      return Promise.resolve();\n    });\n    //endregion\n\n    //region Create all remaining attributes\n    sequence = sequence\n      .then(\n        () =>\n          crypto.digest({ name: hashAlgorithm }, crl.toSchema().toBER(false)),\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          if (_this._crlHashType === 0)\n            _this.crlHash = new asn1js.OctetString({ valueHex: result });\n          else\n            _this.crlHash.hashValue = new asn1js.OctetString({\n              valueHex: result,\n            });\n\n          _this.crlIdentifier = new CrlIdentifier();\n          _this.crlIdentifier.fillValues({\n            crl,\n          });\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}