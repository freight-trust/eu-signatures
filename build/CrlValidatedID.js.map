{"version":3,"sources":["../src/CrlValidatedID.js"],"names":["asn1js","CrlValidatedID","constructor","parameters","crlHash","defaultValues","_crlHashType","crlIdentifier","fromSchema","schema","memberName","Any","CrlIdentifier","Error","compareWithDefault","memberValue","crlissuer","crlIssuedTime","names","Sequence","name","blockName","optional","value","Choice","OctetString","crlHashSimple","OtherHashAlgAndValue","crlHashComplex","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","_this","sequence","Promise","resolve","hashAlgorithm","crl","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","valueHex","hashValue"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;;;;;;;AACA;AACe,MAAMC,cAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CF,eAAeI,aAAf,CAA6B,SAA7B,CAA1C,CAAf;;AAEA,OAAKC,YAAL,GAAqB,CAAC,CAAtB,CARD,CAQ2B;;AAE1B,MAAG,mBAAmBH,UAAtB;AACC;;;;AAIA,QAAKI,aAAL,GAAqB,iCAAmBJ,UAAnB,EAA+B,eAA/B,EAAgDF,eAAeI,aAAf,CAA6B,eAA7B,CAAhD,CAArB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOJ,aAAP,CAAqBK,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,SAAL;AACC,WAAO,IAAIV,OAAOW,GAAX,EAAP;AACD,QAAK,eAAL;AACC,WAAO,IAAIC,uBAAJ,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,iDAAgDH,UAAW,EAAtE,CAAN;AAPF;AASA;AACD;AACA;;;;;AAKA,QAAOI,kBAAP,CAA0BJ,UAA1B,EAAsCK,WAAtC,EACA;AACC,UAAOL,UAAP;AAEC,QAAK,SAAL;AACC,WAAQK,uBAAuBf,OAAOW,GAAtC;AACD,QAAK,eAAL;AACC,WAASC,wBAAcE,kBAAd,CAAiC,WAAjC,EAA8CC,YAAYC,SAA1D,CAAD,IACLJ,wBAAcE,kBAAd,CAAiC,eAAjC,EAAkDC,YAAYE,aAA9D,CADK,IAEJ,eAAeF,WAAhB,KAAiC,KAFpC;AAGD;AACC,UAAM,IAAIF,KAAJ,CAAW,iDAAgDH,UAAW,EAAtE,CAAN;AATF;AAWA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcN,aAAa,EAA3B,EACA;AACC;AACA;AACA;;AAEA;;;;;;;AAOA,QAAMe,QAAQ,iCAAmBf,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOmB,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,aAAWJ,MAAMI,QAAN,IAAkB,KAFF;AAG3BC,UAAO,CACN,IAAIvB,OAAOwB,MAAX,CAAkB;AACjBD,WAAO,CACN,IAAIvB,OAAOyB,WAAX,CAAuB,EAAEL,MAAOF,MAAMQ,aAAN,IAAuB,EAAhC,EAAvB,CADM,EAENC,+BAAqBlB,MAArB,CAA4BS,MAAMU,cAAN,IAAwB;AACnDV,YAAO;AACNG,iBAAW;AADL;AAD4C,KAApD,CAFM;AADU,IAAlB,CADM,EAWNT,wBAAcH,MAAd,CAAqBS,MAAMX,aAAN,IAAuB;AAC3CW,WAAO;AACNG,gBAAW;AADL;AADoC,IAA5C,CAXM;AAHoB,GAApB,CAAR;AAqBA;AACD;AACA;;;;AAIAb,YAAWC,MAAX,EACA;AACC;AACA,QAAMoB,OAAO7B,OAAO8B,aAAP,CAAqBrB,MAArB,EACZA,MADY,EAEZR,eAAeQ,MAAf,CAAsB;AACrBS,UAAO;AACNQ,mBAAe,SADT;AAENE,oBAAgB;AACfV,YAAO;AACNG,iBAAW;AADL;AADQ,KAFV;AAONd,mBAAe;AACdW,YAAO;AACNG,iBAAW;AADL;AADO;AAPT;AADc,GAAtB,CAFY,CAAb;;AAmBA,MAAGQ,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIlB,KAAJ,CAAU,wEAAV,CAAN;AACD;;AAEA;AACA,MAAGgB,KAAKG,MAAL,CAAY5B,OAAZ,YAA+BJ,OAAOyB,WAAzC,EACA;AACC,QAAKrB,OAAL,GAAeyB,KAAKG,MAAL,CAAY5B,OAA3B;AACA,QAAKE,YAAL,GAAoB,CAApB;AACA,GAJD,MAMA;AACC,QAAKF,OAAL,GAAe,IAAIuB,8BAAJ,CAAyB,EAAElB,QAAQoB,KAAKG,MAAL,CAAY5B,OAAtB,EAAzB,CAAf;AACA,QAAKE,YAAL,GAAoB,CAApB;AACA;;AAED,MAAG,mBAAmBuB,KAAKG,MAA3B,EACC,KAAKzB,aAAL,GAAqB,IAAIK,uBAAJ,CAAkB,EAAEH,QAAQoB,KAAKG,MAAL,CAAYzB,aAAtB,EAAlB,CAArB;AACD;AACA;AACD;AACA;;;;AAIA0B,YACA;AACC,MAAG,KAAK3B,YAAL,KAAuB,CAAC,CAA3B,EACC,MAAM,IAAIO,KAAJ,CAAU,kDAAV,CAAN;;AAED;AACA,QAAMqB,cAAc,EAApB;;AAEA,MAAG,KAAK5B,YAAL,KAAsB,CAAzB,EAA4B;AAC3B4B,eAAYC,IAAZ,CAAiB,KAAK/B,OAAtB,EADD,KAGC8B,YAAYC,IAAZ,CAAiB,KAAK/B,OAAL,CAAa6B,QAAb,EAAjB;;AAED,MAAG,mBAAmB,IAAtB,EACCC,YAAYC,IAAZ,CAAiB,KAAK5B,aAAL,CAAmB0B,QAAnB,EAAjB;AACD;;AAEA;AACA,SAAQ,IAAIjC,OAAOmB,QAAX,CAAoB;AAC3BI,UAAOW;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAE,UACA;AACC,QAAMC,UAAU;AACfjC,YAAS,KAAKA,OAAL,CAAagC,MAAb;AADM,GAAhB;;AAIA,MAAG,mBAAmB,IAAtB,EACCC,QAAQ9B,aAAR,GAAwB,KAAKA,aAAL,CAAmB6B,MAAnB,EAAxB;;AAED,SAAOC,OAAP;AACA;AACD;AACA;;;;;AAKAC,YAAWnC,UAAX,EACA;AACC;AACA,QAAMoC,QAAQ,IAAd;;AAEA,MAAIC,WAAWC,QAAQC,OAAR,EAAf;;AAEA,MAAIC,gBAAgB,OAApB;;AAEA,MAAIC,GAAJ;AACA;;AAEA;AACA,MAAG,mBAAmBzC,UAAtB,EACCwC,gBAAgBxC,WAAWwC,aAA3B;;AAED,MAAG,SAASxC,UAAZ,EACCyC,MAAMzC,WAAWyC,GAAjB,CADD,CACuB;AADvB,OAGC,OAAOH,QAAQI,MAAR,CAAe,8DAAf,CAAP;AACD;;AAEA;AACA,QAAMC,SAAS,uBAAf;AACA,MAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAOL,QAAQI,MAAR,CAAe,mCAAf,CAAP;AACD;;AAEA;AACAL,aAAWA,SAASO,IAAT,CACV,MAAM;AACL,OAAGJ,cAAcK,WAAd,OAAgC,OAAnC,EACA;AACC,UAAMC,MAAM,8BAAkB,EAAE7B,MAAMuB,aAAR,EAAlB,CAAZ;AACA,QAAGM,QAAQ,EAAX,EACC,OAAOR,QAAQI,MAAR,CAAgB,gCAA+BF,aAAc,EAA7D,CAAP;;AAEDJ,UAAMjC,YAAN,GAAqB,CAArB;AACAiC,UAAMnC,OAAN,GAAgB,IAAIuB,8BAAJ,CAAyB;AACxCgB,oBAAe,IAAIO,0BAAJ,CAAwB;AACtCC,mBAAaF,GADyB;AAEtCG,uBAAiB,IAAIpD,OAAOqD,IAAX;AAFqB,MAAxB;AADyB,KAAzB,CAAhB;AAMA,IAbD,MAeCd,MAAMjC,YAAN,GAAqB,CAArB;;AAED,UAAOmC,QAAQC,OAAR,EAAP;AACA,GApBS,CAAX;AAsBA;;AAEA;AACAF,aAAWA,SAASO,IAAT,CACV,MAAMD,OAAOQ,MAAP,CAAc,EAAElC,MAAMuB,aAAR,EAAd,EAAuCC,IAAIX,QAAJ,GAAesB,KAAf,CAAqB,KAArB,CAAvC,CADI,EAEVC,SAASf,QAAQI,MAAR,CAAeW,KAAf,CAFC,EAGTT,IAHS,CAIVf,UAAU;AACT,OAAGO,MAAMjC,YAAN,KAAuB,CAA1B,EACCiC,MAAMnC,OAAN,GAAgB,IAAIJ,OAAOyB,WAAX,CAAuB,EAAEgC,UAAUzB,MAAZ,EAAvB,CAAhB,CADD,KAGCO,MAAMnC,OAAN,CAAcsD,SAAd,GAA0B,IAAI1D,OAAOyB,WAAX,CAAuB,EAAEgC,UAAUzB,MAAZ,EAAvB,CAA1B;;AAEDO,SAAMhC,aAAN,GAAsB,IAAIK,uBAAJ,EAAtB;AACA2B,SAAMhC,aAAN,CAAoB+B,UAApB,CAA+B;AAC9BM;AAD8B,IAA/B;AAGA,GAdS,EAeVY,SAASf,QAAQI,MAAR,CAAeW,KAAf,CAfC,CAAX;AAiBA;;AAEA,SAAOhB,QAAP;AACA;AACD;AA3RD;kBADqBvC,c,EA8RrB","file":"CrlValidatedID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier } from \"pkijs\";\r\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\r\nimport CrlIdentifier from \"./CrlIdentifier.js\";\r\n//**************************************************************************************\r\nexport default class CrlValidatedID\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CrlValidatedID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString|OtherHashAlgAndValue}\r\n\t\t * @description crlHash\r\n\t\t */\r\n\t\tthis.crlHash = getParametersValue(parameters, \"crlHash\", CrlValidatedID.defaultValues(\"crlHash\"));\r\n\t\t\r\n\t\tthis._crlHashType = (-1); // 0 - OCTETSTRING, 1 - \"OtherHashAlgAndValue\"\r\n\t\t\r\n\t\tif(\"crlIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {CrlIdentifier}\r\n\t\t\t * @description crlIdentifier\r\n\t\t\t */\r\n\t\t\tthis.crlIdentifier = getParametersValue(parameters, \"crlIdentifier\", CrlValidatedID.defaultValues(\"crlIdentifier\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlHash\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"crlIdentifier\":\r\n\t\t\t\treturn new CrlIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CrlValidatedID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlHash\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"crlIdentifier\":\r\n\t\t\t\treturn ((CrlIdentifier.compareWithDefault(\"crlissuer\", memberValue.crlissuer)) &&\r\n\t\t\t\t\t\t(CrlIdentifier.compareWithDefault(\"crlIssuedTime\", memberValue.crlIssuedTime)) &&\r\n\t\t\t\t\t\t((\"crlNumber\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CrlValidatedID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CrlValidatedID ::= SEQUENCE {\r\n\t\t//    crlHash OtherHash,\r\n\t\t//    crlIdentifier CrlIdentifier OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crlHashSimple]\r\n\t\t * @property {string} [crlHashComplex]\r\n\t\t * @property {string} [crlIdentifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.crlHashSimple || \"\") }),\r\n\t\t\t\t\t\tOtherHashAlgAndValue.schema(names.crlHashComplex || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tCrlIdentifier.schema(names.crlIdentifier || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCrlValidatedID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrlHashSimple: \"crlHash\",\r\n\t\t\t\t\tcrlHashComplex: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"crlHash\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcrlIdentifier: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"crlIdentifier\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CrlValidatedID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.crlHash instanceof asn1js.OctetString)\r\n\t\t{\r\n\t\t\tthis.crlHash = asn1.result.crlHash;\r\n\t\t\tthis._crlHashType = 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.crlHash = new OtherHashAlgAndValue({ schema: asn1.result.crlHash });\r\n\t\t\tthis._crlHashType = 1;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlIdentifier\" in asn1.result)\r\n\t\t\tthis.crlIdentifier = new CrlIdentifier({ schema: asn1.result.crlIdentifier });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(this._crlHashType === (-1))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"CrlValidatedID\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this._crlHashType === 0) // OCTETSTRING\r\n\t\t\toutputArray.push(this.crlHash);\r\n\t\telse\r\n\t\t\toutputArray.push(this.crlHash.toSchema());\r\n\t\t\r\n\t\tif(\"crlIdentifier\" in this)\r\n\t\t\toutputArray.push(this.crlIdentifier.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcrlHash: this.crlHash.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"crlIdentifier\" in this)\r\n\t\t\t_object.crlIdentifier = this.crlIdentifier.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"CrlValidatedID\" for given CMS Signed Data and signer index\r\n\t * @param parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tlet crl;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input parameters \r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t\r\n\t\tif(\"crl\" in parameters)\r\n\t\t\tcrl = parameters.crl; // in_window.org.pkijs.simpl.CRL\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"crl\\\" is mandatory for making \\\"CrlValidatedID\\\"\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Fill correct value for \"hashIndAlgorithm\" \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\tif(oid === \"\")\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect hashing algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\t_this._crlHashType = 1;\r\n\t\t\t\t\t_this.crlHash = new OtherHashAlgAndValue({\r\n\t\t\t\t\t\thashAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oid,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_this._crlHashType = 0;\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create all remaining attributes\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => crypto.digest({ name: hashAlgorithm }, crl.toSchema().toBER(false)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tif(_this._crlHashType === 0)\r\n\t\t\t\t\t_this.crlHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\telse\r\n\t\t\t\t\t_this.crlHash.hashValue = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\r\n\t\t\t\t_this.crlIdentifier = new CrlIdentifier();\r\n\t\t\t\t_this.crlIdentifier.fillValues({\r\n\t\t\t\t\tcrl\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}