{"version":3,"sources":["../src/common.js"],"names":["createCommonAttributes","asn1js","cmsSigned","parameters","sequence","Promise","resolve","hashAlgorithm","digistedContent","ArrayBuffer","contentOID","resultAttributes","essCertificate","ESSCertIDv2","crypto","reject","then","contentTypeAttribute","Attribute","type","values","ObjectIdentifier","value","push","signingTimeAttribute","UTCTime","valueDate","Date","error","encapContentInfo","eContent","idBlock","tagClass","tagNumber","isConstructed","valueBlock","valueHex","i","length","content","digest","name","result","attribute","OctetString","fillValues","signingCertificateV2","SigningCertificateV2","certs","toSchema"],"mappings":"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","file":"common.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { utilConcatBuf, getUTCDate } from \"pvutils\";\nimport { getCrypto, Attribute } from \"pkijs\";\nimport ESSCertIDv2 from \"./ESSCertIDv2.js\";\nimport SigningCertificateV2 from \"./SigningCertificateV2.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\n/**\n * Creates common CAdES attributes for given CMS Signed Data\n * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\n * @param {Object} parameters Additional parameters for making attribute\n * @returns {Promise}\n */\nexport function createCommonAttributes(cmsSigned, parameters) {\n  //region Initial variables\n  let sequence = Promise.resolve();\n\n  let hashAlgorithm = \"SHA-256\";\n\n  let digistedContent = new ArrayBuffer(0);\n\n  let contentOID;\n\n  const resultAttributes = [];\n\n  const essCertificate = new ESSCertIDv2();\n  //endregion\n\n  //region Get a \"crypto\" extension\n  const crypto = getCrypto();\n  if (typeof crypto === \"undefined\")\n    return Promise.reject(\"Unable to create WebCrypto object\");\n  //endregion\n\n  //region Check input parameters\n  if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n  if (\"certificate\" in parameters === false)\n    return Promise.reject(\n      'Parameter \"certificate\" is mandatory for making common CAdES attributes'\n    );\n\n  if (\"contentOID\" in parameters) contentOID = parameters.contentOID;\n  else\n    return Promise.reject(\n      'Parameter \"contentOID\" is mandatory for making common CAdES attributes'\n    );\n  //endregion\n\n  //region Prepare \"Content type\" and \"Signing Time\" attributes\n  sequence = sequence.then(\n    () => {\n      //region Create \"Content type\" attribute\n      const contentTypeAttribute = new Attribute({\n        type: \"1.2.840.113549.1.9.3\",\n        values: [new asn1js.ObjectIdentifier({ value: contentOID })],\n      });\n\n      resultAttributes.push(contentTypeAttribute);\n      //endregion\n\n      //region Create \"Signing Time\" attribute\n      const signingTimeAttribute = new Attribute({\n        type: \"1.2.840.113549.1.9.5\",\n        values: [new asn1js.UTCTime({ valueDate: getUTCDate(new Date()) })],\n      });\n\n      resultAttributes.push(signingTimeAttribute);\n      //endregion\n    },\n    (error) => Promise.reject(error)\n  );\n  //endregion\n\n  //region Prepare \"Message digest\" attribute\n  sequence = sequence\n    .then(\n      () => {\n        //region Prepare buffer for making digest\n        if (\"eContent\" in cmsSigned.encapContentInfo) {\n          // Attached data\n          if (\n            cmsSigned.encapContentInfo.eContent.idBlock.tagClass === 1 &&\n            cmsSigned.encapContentInfo.eContent.idBlock.tagNumber === 4\n          ) {\n            if (\n              cmsSigned.encapContentInfo.eContent.idBlock.isConstructed ===\n              false\n            )\n              digistedContent =\n                cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\n            else {\n              for (\n                let i = 0;\n                i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length;\n                i++\n              )\n                digistedContent = utilConcatBuf(\n                  digistedContent,\n                  cmsSigned.encapContentInfo.eContent.valueBlock.value[i]\n                    .valueBlock.valueHex\n                );\n            }\n          } else\n            digistedContent =\n              cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\n        } // Detached data\n        else {\n          if (\"content\" in parameters === false)\n            return Promise.reject('Please provide \"content\" parameter');\n\n          digistedContent = parameters.content;\n        }\n        //endregion\n\n        return crypto.digest({ name: hashAlgorithm }, digistedContent);\n      },\n      (error) => Promise.reject(error)\n    )\n    .then(\n      (result) => {\n        //region Create signed attribute with \"message digest\" value\n        const attribute = new Attribute({\n          type: \"1.2.840.113549.1.9.4\",\n          values: [new asn1js.OctetString({ valueHex: result })],\n        });\n        //endregion\n\n        resultAttributes.push(attribute);\n      },\n      (error) => Promise.reject(error)\n    );\n  //endregion\n\n  //region Prepare \"ESS-signing-certificate-v2\" attribute\n  sequence = sequence\n    .then(\n      () => essCertificate.fillValues(parameters),\n      (error) => Promise.reject(error)\n    )\n    .then(\n      () => {\n        const signingCertificateV2 = new SigningCertificateV2({\n          certs: [essCertificate],\n        });\n\n        const attribute = new Attribute({\n          type: \"1.2.840.113549.1.9.16.2.47\",\n          values: [signingCertificateV2.toSchema()],\n        });\n\n        resultAttributes.push(attribute);\n\n        return resultAttributes;\n      },\n      (error) => Promise.reject(error)\n    );\n  //endregion\n\n  return sequence;\n}\n//**************************************************************************************\n"]}