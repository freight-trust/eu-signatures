{"version":3,"sources":["../src/common.js"],"names":["createCommonAttributes","asn1js","cmsSigned","parameters","sequence","Promise","resolve","hashAlgorithm","digistedContent","ArrayBuffer","contentOID","resultAttributes","essCertificate","ESSCertIDv2","crypto","reject","then","contentTypeAttribute","Attribute","type","values","ObjectIdentifier","value","push","signingTimeAttribute","UTCTime","valueDate","Date","error","encapContentInfo","eContent","idBlock","tagClass","tagNumber","isConstructed","valueBlock","valueHex","i","length","content","digest","name","result","attribute","OctetString","fillValues","signingCertificateV2","SigningCertificateV2","certs","toSchema"],"mappings":"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","file":"common.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf, getUTCDate } from \"pvutils\";\r\nimport { getCrypto, Attribute } from \"pkijs\";\r\nimport ESSCertIDv2 from \"./ESSCertIDv2.js\";\r\nimport SigningCertificateV2 from \"./SigningCertificateV2.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\n/**\r\n * Creates common CAdES attributes for given CMS Signed Data\r\n * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\r\n * @param {Object} parameters Additional parameters for making attribute\r\n * @returns {Promise}\r\n */\r\nexport function createCommonAttributes(cmsSigned, parameters)\r\n{\r\n\t//region Initial variables\r\n\tlet sequence = Promise.resolve();\r\n\t\r\n\tlet hashAlgorithm = \"SHA-256\";\r\n\t\r\n\tlet digistedContent = new ArrayBuffer(0);\r\n\t\r\n\tlet contentOID;\r\n\t\r\n\tconst resultAttributes = [];\r\n\t\r\n\tconst essCertificate = new ESSCertIDv2();\r\n\t//endregion \r\n\t\r\n\t//region Get a \"crypto\" extension \r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion \r\n\t\r\n\t//region Check input parameters \r\n\tif(\"hashAlgorithm\" in parameters)\r\n\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\r\n\tif((\"certificate\" in parameters) === false)\r\n\t\treturn Promise.reject(\"Parameter \\\"certificate\\\" is mandatory for making common CAdES attributes\");\r\n\t\r\n\tif(\"contentOID\" in parameters)\r\n\t\tcontentOID = parameters.contentOID;\r\n\telse\r\n\t\treturn Promise.reject(\"Parameter \\\"contentOID\\\" is mandatory for making common CAdES attributes\");\r\n\t//endregion \r\n\t\r\n\t//region Prepare \"Content type\" and \"Signing Time\" attributes \r\n\tsequence = sequence.then(\r\n\t\t() => {\r\n\t\t\t//region Create \"Content type\" attribute \r\n\t\t\tconst contentTypeAttribute = new Attribute({\r\n\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\tvalues: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: contentOID })\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tresultAttributes.push(contentTypeAttribute);\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\t//region Create \"Signing Time\" attribute \r\n\t\t\tconst signingTimeAttribute = new Attribute({\r\n\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\tvalues: [\r\n\t\t\t\t\tnew asn1js.UTCTime({ valueDate: getUTCDate(new Date()) })\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tresultAttributes.push(signingTimeAttribute);\r\n\t\t\t//endregion \r\n\t\t},\r\n\t\terror => Promise.reject(error)\r\n\t);\r\n\t//endregion \r\n\t\r\n\t//region Prepare \"Message digest\" attribute \r\n\tsequence = sequence.then(\r\n\t\t() => {\r\n\t\t\t//region Prepare buffer for making digest \r\n\t\t\tif(\"eContent\" in cmsSigned.encapContentInfo) // Attached data\r\n\t\t\t{\r\n\t\t\t\tif((cmsSigned.encapContentInfo.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t\t(cmsSigned.encapContentInfo.eContent.idBlock.tagNumber === 4))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdigistedContent = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdigistedContent = utilConcatBuf(digistedContent, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\tdigistedContent = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t}\r\n\t\t\telse // Detached data\r\n\t\t\t{\r\n\t\t\t\tif((\"content\" in parameters) === false)\r\n\t\t\t\t\treturn Promise.reject(\"Please provide \\\"content\\\" parameter\");\r\n\t\t\t\t\r\n\t\t\t\tdigistedContent = parameters.content;\r\n\t\t\t}\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: hashAlgorithm }, digistedContent);\r\n\t\t},\r\n\t\terror => Promise.reject(error)\r\n\t).then(\r\n\t\tresult => {\r\n\t\t\t//region Create signed attribute with \"message digest\" value \r\n\t\t\tconst attribute = new Attribute({\r\n\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\tvalues: [\r\n\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t//endregion \r\n\t\t\t\r\n\t\t\tresultAttributes.push(attribute);\r\n\t\t},\r\n\t\terror => Promise.reject(error)\r\n\t);\r\n\t//endregion \r\n\t\r\n\t//region Prepare \"ESS-signing-certificate-v2\" attribute \r\n\tsequence = sequence.then(\r\n\t\t() => essCertificate.fillValues(parameters),\r\n\t\terror => Promise.reject(error)\r\n\t).then(\r\n\t\t() => {\r\n\t\t\tconst signingCertificateV2 = new SigningCertificateV2({\r\n\t\t\t\tcerts: [\r\n\t\t\t\t\tessCertificate\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst attribute = new Attribute({\r\n\t\t\t\ttype: \"1.2.840.113549.1.9.16.2.47\",\r\n\t\t\t\tvalues: [signingCertificateV2.toSchema()]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tresultAttributes.push(attribute);\r\n\t\t\t\r\n\t\t\treturn resultAttributes;\r\n\t\t},\r\n\t\terror => Promise.reject(error)\r\n\t);\r\n\t//endregion \r\n\t\r\n\treturn sequence;\r\n}\r\n//**************************************************************************************\r\n"]}