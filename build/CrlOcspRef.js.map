{"version":3,"sources":["../src/CrlOcspRef.js"],"names":["asn1js","CrlOcspRef","constructor","parameters","crlids","defaultValues","ocspids","otherRev","fromSchema","schema","memberName","CRLListID","OcspListID","OtherRevRefs","Error","compareWithDefault","memberValue","crls","ocspResponses","otherRevRefType","otherRevRefs","names","Sequence","name","blockName","optional","value","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"CrlOcspRef.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport CRLListID from \"./CRLListID.js\";\nimport OcspListID from \"./OcspListID.js\";\nimport OtherRevRefs from \"./OtherRevRefs.js\";\n//**************************************************************************************\nexport default class CrlOcspRef {\n  //**********************************************************************************\n  /**\n   * Constructor for CrlOcspRef class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"crlids\" in parameters)\n      /**\n       * @type {CRLListID}\n       * @description crlids\n       */\n      this.crlids = getParametersValue(\n        parameters,\n        \"crlids\",\n        CrlOcspRef.defaultValues(\"crlids\")\n      );\n\n    if (\"ocspids\" in parameters)\n      /**\n       * @type {OcspListID}\n       * @description ocspids\n       */\n      this.ocspids = getParametersValue(\n        parameters,\n        \"ocspids\",\n        CrlOcspRef.defaultValues(\"ocspids\")\n      );\n\n    if (\"otherRev\" in parameters)\n      /**\n       * @type {OtherRevRefs}\n       * @description otherRev\n       */\n      this.otherRev = getParametersValue(\n        parameters,\n        \"otherRev\",\n        CrlOcspRef.defaultValues(\"otherRev\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crlids\":\n        return new CRLListID();\n      case \"ocspids\":\n        return new OcspListID();\n      case \"otherRev\":\n        return new OtherRevRefs();\n      default:\n        throw new Error(\n          `Invalid member name for CrlOcspRef class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crlids\":\n        return CRLListID.compareWithDefault(\"crls\", memberValue.crls);\n      case \"ocspids\":\n        return OcspListID.compareWithDefault(\n          \"ocspResponses\",\n          memberValue.ocspResponses\n        );\n      case \"otherRev\":\n        return (\n          OtherRevRefs.compareWithDefault(\n            \"otherRevRefType\",\n            memberValue.otherRevRefType\n          ) &&\n          OtherRevRefs.compareWithDefault(\n            \"otherRevRefs\",\n            memberValue.otherRevRefs\n          )\n        );\n      default:\n        throw new Error(\n          `Invalid member name for CrlOcspRef class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    //CrlOcspRef ::= SEQUENCE {\n    //    crlids [0] CRLListID OPTIONAL,\n    //    ocspids [1] OcspListID OPTIONAL,\n    //    otherRev [2] OtherRevRefs OPTIONAL\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [type]\n     * @property {string} [setName]\n     * @property {string} [values]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Constructed({\n          name: names.crlids || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [CRLListID.schema()],\n        }),\n        new asn1js.Constructed({\n          name: names.ocspids || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            OcspListID.schema({\n              names: {\n                blockName: \"ocspids.int\",\n                ocspResponses: \"ocspResponses\",\n              },\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          name: names.otherRev || \"\",\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [OtherRevRefs.schema()],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CrlOcspRef.schema({\n        names: {\n          crlids: \"crlids\",\n          ocspids: \"ocspids\",\n          otherRev: \"otherRev\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CrlOcspRef\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"crlids\" in asn1.result)\n      this.crlids = new CRLListID({\n        schema: asn1.result.crlids.valueBlock.value[0],\n      });\n\n    if (\"ocspids\" in asn1.result)\n      this.ocspids = new OcspListID({\n        schema: asn1.result.ocspids.valueBlock.value[0],\n      });\n\n    if (\"otherRev\" in asn1.result)\n      this.otherRev = new OtherRevRefs({\n        schema: asn1.result.otherRev.valueBlock.value[0],\n      });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"crlids\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [this.crlids.toSchema()],\n        })\n      );\n    }\n\n    if (\"ocspids\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [this.ocspids.toSchema()],\n        })\n      );\n    }\n\n    if (\"otherRev\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [this.otherRev.toSchema()],\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"crlids\" in this) _object.crlids = this.crlids.toJSON();\n\n    if (\"ocspids\" in this) _object.ocspids = this.ocspids.toJSON();\n\n    if (\"otherRev\" in this) _object.otherRev = this.otherRev.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}