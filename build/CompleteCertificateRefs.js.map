{"version":3,"sources":["../src/CompleteCertificateRefs.js"],"names":["asn1js","CompleteCertificateRefs","constructor","parameters","completeCertificateRefs","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Repeated","OtherCertID","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACe,MAAMC,uBAAN,CAA8B;AAC3C;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,uBAAL,GAA+B,iCAC7BD,UAD6B,EAE7B,yBAF6B,EAG7BF,wBAAwBI,aAAxB,CAAsC,yBAAtC,CAH6B,CAA/B;AAKA;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOF,aAAP,CAAqBG,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,yBAAL;AACE,eAAO,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,0DAAyDD,UAAW,EADjE,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EAAmD;AACjD,YAAQH,UAAR;AACE,WAAK,yBAAL;AACE,eAAOG,YAAYC,MAAZ,KAAuB,CAA9B;AACF;AACE,cAAM,IAAIH,KAAJ,CACH,0DAAyDD,UAAW,EADjE,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcJ,aAAa,EAA3B,EAA+B;AAC7B;;AAEA;;;;;AAKA,UAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOc,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,aAAO,CACL,IAAIjB,OAAOkB,QAAX,CAAoB;AAClBH,cAAMF,MAAMT,uBAAN,IAAiC,EADrB;AAElBa,eAAOE,sBAAYZ,MAAZ;AAFW,OAApB,CADK;AAFkB,KAApB,CAAP;AASD;AACD;AACA;;;;AAIAD,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMa,OAAOpB,OAAOqB,aAAP,CACXd,MADW,EAEXA,MAFW,EAGXN,wBAAwBM,MAAxB,CAA+B;AAC7BM,aAAO;AACLT,iCAAyB;AADpB;AADsB,KAA/B,CAHW,CAAb;;AAUA,QAAIgB,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAIb,KAAJ,CACJ,iFADI,CAAN;AAGF;;AAEA;AACA,SAAKL,uBAAL,GAA+BmB,MAAMC,IAAN,CAC7BJ,KAAKK,MAAL,CAAYrB,uBADiB,EAE5BsB,OAAD,IAAa,IAAIP,qBAAJ,CAAgB,EAAEZ,QAAQmB,OAAV,EAAhB,CAFgB,CAA/B;AAIA;AACD;AACD;AACA;;;;AAIAC,aAAW;AACT;AACA,WAAO,IAAI3B,OAAOc,QAAX,CAAoB;AACzBG,aAAOM,MAAMC,IAAN,CAAW,KAAKpB,uBAAhB,EAA0CsB,OAAD,IAC9CA,QAAQC,QAAR,EADK;AADkB,KAApB,CAAP;AAKA;AACD;AACD;AACA;;;;AAIAC,WAAS;AACP,WAAO;AACLxB,+BAAyBmB,MAAMC,IAAN,CACvB,KAAKpB,uBADkB,EAEtBsB,OAAD,IAAaA,QAAQE,MAAR,EAFU;AADpB,KAAP;AAMD;AACD;AA1I2C;kBAAxB3B,uB,EA4IrB","file":"CompleteCertificateRefs.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport OtherCertID from \"./OtherCertID.js\";\n//**************************************************************************************\nexport default class CompleteCertificateRefs {\n  //**********************************************************************************\n  /**\n   * Constructor for CompleteCertificateRefs class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {Array.<OtherCertID>}\n     * @description completeCertificateRefs\n     */\n    this.completeCertificateRefs = getParametersValue(\n      parameters,\n      \"completeCertificateRefs\",\n      CompleteCertificateRefs.defaultValues(\"completeCertificateRefs\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"completeCertificateRefs\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for CompleteCertificateRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"completeCertificateRefs\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for CompleteCertificateRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CompleteCertificateRefs ::= SEQUENCE OF OtherCertID\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [completeCertificateRefs]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Repeated({\n          name: names.completeCertificateRefs || \"\",\n          value: OtherCertID.schema(),\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CompleteCertificateRefs.schema({\n        names: {\n          completeCertificateRefs: \"completeCertificateRefs\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CompleteCertificateRefs\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.completeCertificateRefs = Array.from(\n      asn1.result.completeCertificateRefs,\n      (element) => new OtherCertID({ schema: element })\n    );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.completeCertificateRefs, (element) =>\n        element.toSchema()\n      ),\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      completeCertificateRefs: Array.from(\n        this.completeCertificateRefs,\n        (element) => element.toJSON()\n      ),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}