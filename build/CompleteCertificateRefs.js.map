{"version":3,"sources":["../src/CompleteCertificateRefs.js"],"names":["asn1js","CompleteCertificateRefs","constructor","parameters","completeCertificateRefs","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Repeated","OtherCertID","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACe,MAAMC,uBAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,uBAAL,GAA+B,iCAAmBD,UAAnB,EAA+B,yBAA/B,EAA0DF,wBAAwBI,aAAxB,CAAsC,yBAAtC,CAA1D,CAA/B;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,yBAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AALF;AAOA;AACD;AACA;;;;;AAKA,QAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,UAAOH,UAAP;AAEC,QAAK,yBAAL;AACC,WAAQG,YAAYC,MAAZ,KAAuB,CAA/B;AACD;AACC,UAAM,IAAIH,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AALF;AAOA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcJ,aAAa,EAA3B,EACA;AACC;;AAEA;;;;;AAKA,QAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOc,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,UAAO,CACN,IAAIjB,OAAOkB,QAAX,CAAoB;AACnBH,UAAOF,MAAMT,uBAAN,IAAiC,EADrB;AAEnBa,WAAOE,sBAAYZ,MAAZ;AAFY,IAApB,CADM;AAFoB,GAApB,CAAR;AASA;AACD;AACA;;;;AAIAD,YAAWC,MAAX,EACA;AACC;AACA,QAAMa,OAAOpB,OAAOqB,aAAP,CAAqBd,MAArB,EACZA,MADY,EAEZN,wBAAwBM,MAAxB,CAA+B;AAC9BM,UAAO;AACNT,6BAAyB;AADnB;AADuB,GAA/B,CAFY,CAAb;;AASA,MAAGgB,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIb,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAEA;AACA,OAAKL,uBAAL,GAA+BmB,MAAMC,IAAN,CAAWJ,KAAKK,MAAL,CAAYrB,uBAAvB,EAAgDsB,WAAW,IAAIP,qBAAJ,CAAgB,EAAEZ,QAAQmB,OAAV,EAAhB,CAA3D,CAA/B;AACA;AACA;AACD;AACA;;;;AAIAC,YACA;AACC;AACA,SAAQ,IAAI3B,OAAOc,QAAX,CAAoB;AAC3BG,UAAOM,MAAMC,IAAN,CAAW,KAAKpB,uBAAhB,EAAyCsB,WAAWA,QAAQC,QAAR,EAApD;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAC,UACA;AACC,SAAO;AACNxB,4BAAyBmB,MAAMC,IAAN,CAAW,KAAKpB,uBAAhB,EAAyCsB,WAAWA,QAAQE,MAAR,EAApD;AADnB,GAAP;AAGA;AACD;AAjID;kBADqB3B,uB,EAoIrB","file":"CompleteCertificateRefs.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport OtherCertID from \"./OtherCertID.js\";\r\n//**************************************************************************************\r\nexport default class CompleteCertificateRefs\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CompleteCertificateRefs class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<OtherCertID>}\r\n\t\t * @description completeCertificateRefs\r\n\t\t */\r\n\t\tthis.completeCertificateRefs = getParametersValue(parameters, \"completeCertificateRefs\", CompleteCertificateRefs.defaultValues(\"completeCertificateRefs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"completeCertificateRefs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CompleteCertificateRefs class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"completeCertificateRefs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CompleteCertificateRefs class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CompleteCertificateRefs ::= SEQUENCE OF OtherCertID\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [completeCertificateRefs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.completeCertificateRefs || \"\"),\r\n\t\t\t\t\tvalue: OtherCertID.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCompleteCertificateRefs.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcompleteCertificateRefs: \"completeCertificateRefs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CompleteCertificateRefs\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.completeCertificateRefs = Array.from(asn1.result.completeCertificateRefs, element => new OtherCertID({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.completeCertificateRefs, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcompleteCertificateRefs: Array.from(this.completeCertificateRefs, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}