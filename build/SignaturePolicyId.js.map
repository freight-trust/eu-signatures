{"version":3,"sources":["../src/SignaturePolicyId.js"],"names":["asn1js","SignaturePolicyId","constructor","parameters","sigPolicyId","defaultValues","sigPolicyHash","sigPolicyQualifiers","fromSchema","schema","memberName","OtherHashAlgAndValue","Error","compareWithDefault","memberValue","hashAlgorithm","hashValue","length","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","SigPolicyQualifierInfo","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"SignaturePolicyId.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\r\nimport SigPolicyQualifierInfo from \"./SigPolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class SignaturePolicyId\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignaturePolicyId class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description sigPolicyId\r\n\t\t */\r\n\t\tthis.sigPolicyId = getParametersValue(parameters, \"sigPolicyId\", SignaturePolicyId.defaultValues(\"sigPolicyId\"));\r\n\t\t/**\r\n\t\t * @type {OtherHashAlgAndValue}\r\n\t\t * @description sigPolicyHash\r\n\t\t */\r\n\t\tthis.sigPolicyHash = getParametersValue(parameters, \"sigPolicyHash\", SignaturePolicyId.defaultValues(\"sigPolicyHash\"));\r\n\t\t\r\n\t\tif(\"sigPolicyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<SigPolicyQualifierInfo>}\r\n\t\t\t * @description sigPolicyQualifiers\r\n\t\t\t */\r\n\t\t\tthis.sigPolicyQualifiers = getParametersValue(parameters, \"sigPolicyQualifiers\", SignaturePolicyId.defaultValues(\"sigPolicyQualifiers\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"sigPolicyId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"sigPolicyHash\":\r\n\t\t\t\treturn new OtherHashAlgAndValue();\r\n\t\t\tcase \"sigPolicyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignaturePolicyId class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"sigPolicyId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"sigPolicyHash\":\r\n\t\t\t\treturn (OtherHashAlgAndValue.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm) &&\r\n\t\t\t\t\t\tOtherHashAlgAndValue.compareWithDefault(\"hashValue\", memberValue.hashValue));\r\n\t\t\tcase \"sigPolicyQualifiers\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignaturePolicyId class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// SignaturePolicyId ::= SEQUENCE {\r\n\t\t//    sigPolicyId SigPolicyId,\r\n\t\t//    sigPolicyHash SigPolicyHash,\r\n\t\t//    sigPolicyQualifiers SEQUENCE SIZE (1..MAX) OF\r\n\t\t//    SigPolicyQualifierInfo OPTIONAL}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [sigPolicyId]\r\n\t\t * @property {string} [sigPolicyHash]\r\n\t\t * @property {string} [sigPolicyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.sigPolicyId || \"\") }),\r\n\t\t\t\tOtherHashAlgAndValue.schema(names.sigPolicyHash || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.sigPolicyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: SigPolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignaturePolicyId.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsigPolicyId: \"sigPolicyId\",\r\n\t\t\t\t\tsigPolicyHash: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"sigPolicyHash\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsigPolicyQualifiers: \"sigPolicyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignaturePolicyId\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.sigPolicyId = asn1.result.sigPolicyId.valueBlock.toString();\r\n\t\tthis.sigPolicyHash = new OtherHashAlgAndValue({ schema: asn1.result.sigPolicyHash });\r\n\t\t\r\n\t\tif(\"sigPolicyQualifiers\" in asn1.result)\r\n\t\t\tthis.sigPolicyQualifiers = Array.from(asn1.result.sigPolicyQualifiers, element => new SigPolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.sigPolicyId }),\r\n\t\t\tthis.sigPolicyHash.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"sigPolicyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.sigPolicyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsigPolicyId: this.sigPolicyId,\r\n\t\t\tsigPolicyHash: this.sigPolicyHash.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"sigPolicyQualifiers\" in this)\r\n\t\t\t_object.sigPolicyQualifiers = Array.from(this.sigPolicyQualifiers, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}