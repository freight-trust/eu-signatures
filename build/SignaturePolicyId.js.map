{"version":3,"sources":["../src/SignaturePolicyId.js"],"names":["asn1js","SignaturePolicyId","constructor","parameters","sigPolicyId","defaultValues","sigPolicyHash","sigPolicyQualifiers","fromSchema","schema","memberName","OtherHashAlgAndValue","Error","compareWithDefault","memberValue","hashAlgorithm","hashValue","length","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","SigPolicyQualifierInfo","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;AACA;;;;;;;;AACA;AACA;AACe,MAAMC,iBAAN,CAAwB;AACrC;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,WAAL,GAAmB,iCACjBD,UADiB,EAEjB,aAFiB,EAGjBF,kBAAkBI,aAAlB,CAAgC,aAAhC,CAHiB,CAAnB;AAKA;;;;AAIA,SAAKC,aAAL,GAAqB,iCACnBH,UADmB,EAEnB,eAFmB,EAGnBF,kBAAkBI,aAAlB,CAAgC,eAAhC,CAHmB,CAArB;;AAMA,QAAI,yBAAyBF,UAA7B;AACE;;;;AAIA,WAAKI,mBAAL,GAA2B,iCACzBJ,UADyB,EAEzB,qBAFyB,EAGzBF,kBAAkBI,aAAlB,CAAgC,qBAAhC,CAHyB,CAA3B;AAKF;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOJ,aAAP,CAAqBK,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,aAAL;AACE,eAAO,EAAP;AACF,WAAK,eAAL;AACE,eAAO,IAAIC,8BAAJ,EAAP;AACF,WAAK,qBAAL;AACE,eAAO,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,oDAAmDF,UAAW,EAD3D,CAAN;AARJ;AAYD;AACD;AACA;;;;;AAKA,SAAOG,kBAAP,CAA0BH,UAA1B,EAAsCI,WAAtC,EAAmD;AACjD,YAAQJ,UAAR;AACE,WAAK,aAAL;AACE,eAAOI,gBAAgB,EAAvB;AACF,WAAK,eAAL;AACE,eACEH,+BAAqBE,kBAArB,CACE,eADF,EAEEC,YAAYC,aAFd,KAIAJ,+BAAqBE,kBAArB,CACE,WADF,EAEEC,YAAYE,SAFd,CALF;AAUF,WAAK,qBAAL;AACE,eAAOF,YAAYG,MAAZ,KAAuB,CAA9B;AACF;AACE,cAAM,IAAIL,KAAJ,CACH,oDAAmDF,UAAW,EAD3D,CAAN;AAjBJ;AAqBD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcN,aAAa,EAA3B,EAA+B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,UAAMe,QAAQ,iCAAmBf,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOmB,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,aAAO,CACL,IAAItB,OAAOuB,gBAAX,CAA4B,EAAEH,MAAMF,MAAMd,WAAN,IAAqB,EAA7B,EAA5B,CADK,EAELO,+BAAqBF,MAArB,CACES,MAAMZ,aAAN,IAAuB;AACrBY,eAAO;AACLG,qBAAW;AADN;AADc,OADzB,CAFK,EASL,IAAIrB,OAAOmB,QAAX,CAAoB;AAClBK,kBAAU,IADQ;AAElBF,eAAO,CACL,IAAItB,OAAOyB,QAAX,CAAoB;AAClBL,gBAAMF,MAAMX,mBAAN,IAA6B,EADjB;AAElBe,iBAAOI,iCAAuBjB,MAAvB;AAFW,SAApB,CADK;AAFW,OAApB,CATK;AAFkB,KAApB,CAAP;AAsBD;AACD;AACA;;;;AAIAD,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMkB,OAAO3B,OAAO4B,aAAP,CACXnB,MADW,EAEXA,MAFW,EAGXR,kBAAkBQ,MAAlB,CAAyB;AACvBS,aAAO;AACLd,qBAAa,aADR;AAELE,uBAAe;AACbY,iBAAO;AACLG,uBAAW;AADN;AADM,SAFV;AAOLd,6BAAqB;AAPhB;AADgB,KAAzB,CAHW,CAAb;;AAgBA,QAAIoB,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAIjB,KAAJ,CACJ,2EADI,CAAN;AAGF;;AAEA;AACA,SAAKR,WAAL,GAAmBuB,KAAKG,MAAL,CAAY1B,WAAZ,CAAwB2B,UAAxB,CAAmCC,QAAnC,EAAnB;AACA,SAAK1B,aAAL,GAAqB,IAAIK,8BAAJ,CAAyB;AAC5CF,cAAQkB,KAAKG,MAAL,CAAYxB;AADwB,KAAzB,CAArB;;AAIA,QAAI,yBAAyBqB,KAAKG,MAAlC,EACE,KAAKvB,mBAAL,GAA2B0B,MAAMC,IAAN,CACzBP,KAAKG,MAAL,CAAYvB,mBADa,EAExB4B,OAAD,IAAa,IAAIT,gCAAJ,CAA2B,EAAEjB,QAAQ0B,OAAV,EAA3B,CAFY,CAA3B;AAIF;AACD;AACD;AACA;;;;AAIAC,aAAW;AACT;AACA,UAAMC,cAAc,CAClB,IAAIrC,OAAOuB,gBAAX,CAA4B,EAAED,OAAO,KAAKlB,WAAd,EAA5B,CADkB,EAElB,KAAKE,aAAL,CAAmB8B,QAAnB,EAFkB,CAApB;;AAKA,QAAI,yBAAyB,IAA7B,EAAmC;AACjCC,kBAAYC,IAAZ,CACE,IAAItC,OAAOmB,QAAX,CAAoB;AAClBG,eAAOW,MAAMC,IAAN,CAAW,KAAK3B,mBAAhB,EAAsC4B,OAAD,IAC1CA,QAAQC,QAAR,EADK;AADW,OAApB,CADF;AAOD;AACD;;AAEA;AACA,WAAO,IAAIpC,OAAOmB,QAAX,CAAoB;AACzBG,aAAOe;AADkB,KAApB,CAAP;AAGA;AACD;AACD;AACA;;;;AAIAE,WAAS;AACP,UAAMC,UAAU;AACdpC,mBAAa,KAAKA,WADJ;AAEdE,qBAAe,KAAKA,aAAL,CAAmBiC,MAAnB;AAFD,KAAhB;;AAKA,QAAI,yBAAyB,IAA7B,EACEC,QAAQjC,mBAAR,GAA8B0B,MAAMC,IAAN,CAC5B,KAAK3B,mBADuB,EAE3B4B,OAAD,IAAaA,QAAQI,MAAR,EAFe,CAA9B;;AAKF,WAAOC,OAAP;AACD;AACD;AAnOqC;kBAAlBvC,iB,EAqOrB","file":"SignaturePolicyId.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\nimport SigPolicyQualifierInfo from \"./SigPolicyQualifierInfo.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class SignaturePolicyId {\n  //**********************************************************************************\n  /**\n   * Constructor for SignaturePolicyId class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description sigPolicyId\n     */\n    this.sigPolicyId = getParametersValue(\n      parameters,\n      \"sigPolicyId\",\n      SignaturePolicyId.defaultValues(\"sigPolicyId\")\n    );\n    /**\n     * @type {OtherHashAlgAndValue}\n     * @description sigPolicyHash\n     */\n    this.sigPolicyHash = getParametersValue(\n      parameters,\n      \"sigPolicyHash\",\n      SignaturePolicyId.defaultValues(\"sigPolicyHash\")\n    );\n\n    if (\"sigPolicyQualifiers\" in parameters)\n      /**\n       * @type {Array.<SigPolicyQualifierInfo>}\n       * @description sigPolicyQualifiers\n       */\n      this.sigPolicyQualifiers = getParametersValue(\n        parameters,\n        \"sigPolicyQualifiers\",\n        SignaturePolicyId.defaultValues(\"sigPolicyQualifiers\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"sigPolicyId\":\n        return \"\";\n      case \"sigPolicyHash\":\n        return new OtherHashAlgAndValue();\n      case \"sigPolicyQualifiers\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for SignaturePolicyId class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"sigPolicyId\":\n        return memberValue === \"\";\n      case \"sigPolicyHash\":\n        return (\n          OtherHashAlgAndValue.compareWithDefault(\n            \"hashAlgorithm\",\n            memberValue.hashAlgorithm\n          ) &&\n          OtherHashAlgAndValue.compareWithDefault(\n            \"hashValue\",\n            memberValue.hashValue\n          )\n        );\n      case \"sigPolicyQualifiers\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for SignaturePolicyId class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // SignaturePolicyId ::= SEQUENCE {\n    //    sigPolicyId SigPolicyId,\n    //    sigPolicyHash SigPolicyHash,\n    //    sigPolicyQualifiers SEQUENCE SIZE (1..MAX) OF\n    //    SigPolicyQualifierInfo OPTIONAL}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [sigPolicyId]\n     * @property {string} [sigPolicyHash]\n     * @property {string} [sigPolicyQualifiers]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.ObjectIdentifier({ name: names.sigPolicyId || \"\" }),\n        OtherHashAlgAndValue.schema(\n          names.sigPolicyHash || {\n            names: {\n              blockName: \"\",\n            },\n          }\n        ),\n        new asn1js.Sequence({\n          optional: true,\n          value: [\n            new asn1js.Repeated({\n              name: names.sigPolicyQualifiers || \"\",\n              value: SigPolicyQualifierInfo.schema(),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      SignaturePolicyId.schema({\n        names: {\n          sigPolicyId: \"sigPolicyId\",\n          sigPolicyHash: {\n            names: {\n              blockName: \"sigPolicyHash\",\n            },\n          },\n          sigPolicyQualifiers: \"sigPolicyQualifiers\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for SignaturePolicyId\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.sigPolicyId = asn1.result.sigPolicyId.valueBlock.toString();\n    this.sigPolicyHash = new OtherHashAlgAndValue({\n      schema: asn1.result.sigPolicyHash,\n    });\n\n    if (\"sigPolicyQualifiers\" in asn1.result)\n      this.sigPolicyQualifiers = Array.from(\n        asn1.result.sigPolicyQualifiers,\n        (element) => new SigPolicyQualifierInfo({ schema: element })\n      );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [\n      new asn1js.ObjectIdentifier({ value: this.sigPolicyId }),\n      this.sigPolicyHash.toSchema(),\n    ];\n\n    if (\"sigPolicyQualifiers\" in this) {\n      outputArray.push(\n        new asn1js.Sequence({\n          value: Array.from(this.sigPolicyQualifiers, (element) =>\n            element.toSchema()\n          ),\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      sigPolicyId: this.sigPolicyId,\n      sigPolicyHash: this.sigPolicyHash.toJSON(),\n    };\n\n    if (\"sigPolicyQualifiers\" in this)\n      _object.sigPolicyQualifiers = Array.from(\n        this.sigPolicyQualifiers,\n        (element) => element.toJSON()\n      );\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}