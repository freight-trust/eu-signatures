{"version":3,"sources":["../src/CRLListID.js"],"names":["asn1js","CRLListID","constructor","parameters","crls","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Repeated","CrlValidatedID","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACe,MAAMC,SAAN,CAAgB;AAC7B;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,IAAL,GAAY,iCACVD,UADU,EAEV,MAFU,EAGVF,UAAUI,aAAV,CAAwB,MAAxB,CAHU,CAAZ;AAKA;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOF,aAAP,CAAqBG,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,MAAL;AACE,eAAO,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,4CAA2CD,UAAW,EADnD,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EAAmD;AACjD,YAAQH,UAAR;AACE,WAAK,MAAL;AACE,eAAOG,YAAYC,MAAZ,KAAuB,CAA9B;AACF;AACE,cAAM,IAAIH,KAAJ,CACH,4CAA2CD,UAAW,EADnD,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcJ,aAAa,EAA3B,EAA+B;AAC7B;AACA;;AAEA;;;;;;;AAOA,UAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOc,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,gBAAUJ,MAAMI,QAAN,IAAkB,KAFH;AAGzBC,aAAO,CACL,IAAIlB,OAAOmB,QAAX,CAAoB;AAClBJ,cAAMF,MAAMT,IAAN,IAAc,EADF;AAElBc,eAAO,IAAIlB,OAAOc,QAAX,CAAoB;AACzBI,iBAAO,CACL,IAAIlB,OAAOmB,QAAX,CAAoB;AAClBD,mBAAOE,yBAAeb,MAAf;AADW,WAApB,CADK;AADkB,SAApB;AAFW,OAApB,CADK;AAHkB,KAApB,CAAP;AAgBD;AACD;AACA;;;;AAIAD,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMc,OAAOrB,OAAOsB,aAAP,CACXf,MADW,EAEXA,MAFW,EAGXN,UAAUM,MAAV,CAAiB;AACfM,aAAO;AACLT,cAAM;AADD;AADQ,KAAjB,CAHW,CAAb;;AAUA,QAAIiB,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAId,KAAJ,CACJ,mEADI,CAAN;AAGF;;AAEA;AACA,SAAKL,IAAL,GAAYoB,MAAMC,IAAN,CACVJ,KAAKK,MAAL,CAAYtB,IADF,EAETuB,OAAD,IAAa,IAAIP,wBAAJ,CAAmB,EAAEb,QAAQoB,OAAV,EAAnB,CAFH,CAAZ;AAIA;AACD;AACD;AACA;;;;AAIAC,aAAW;AACT;AACA,WAAO,IAAI5B,OAAOc,QAAX,CAAoB;AACzBI,aAAO,CACL,IAAIlB,OAAOc,QAAX,CAAoB;AAClBI,eAAOM,MAAMC,IAAN,CAAW,KAAKrB,IAAhB,EAAuBuB,OAAD,IAAaA,QAAQC,QAAR,EAAnC;AADW,OAApB,CADK;AADkB,KAApB,CAAP;AAOA;AACD;AACD;AACA;;;;AAIAC,WAAS;AACP,WAAO;AACLzB,YAAMoB,MAAMC,IAAN,CAAW,KAAKrB,IAAhB,EAAuBuB,OAAD,IAAaA,QAAQE,MAAR,EAAnC;AADD,KAAP;AAGD;AACD;AAnJ6B;kBAAV5B,S,EAqJrB","file":"CRLListID.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport CrlValidatedID from \"./CrlValidatedID.js\";\n//**************************************************************************************\nexport default class CRLListID {\n  //**********************************************************************************\n  /**\n   * Constructor for CRLListID class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {Array.<CrlValidatedID>}\n     * @description crls\n     */\n    this.crls = getParametersValue(\n      parameters,\n      \"crls\",\n      CRLListID.defaultValues(\"crls\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crls\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for CRLListID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crls\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for CRLListID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CRLListID ::= SEQUENCE {\n    //    crls SEQUENCE OF CrlValidatedID }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [type]\n     * @property {string} [setName]\n     * @property {string} [values]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Repeated({\n          name: names.crls || \"\",\n          value: new asn1js.Sequence({\n            value: [\n              new asn1js.Repeated({\n                value: CrlValidatedID.schema(),\n              }),\n            ],\n          }),\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CRLListID.schema({\n        names: {\n          crls: \"crls\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CRLListID\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.crls = Array.from(\n      asn1.result.crls,\n      (element) => new CrlValidatedID({ schema: element })\n    );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.Sequence({\n          value: Array.from(this.crls, (element) => element.toSchema()),\n        }),\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      crls: Array.from(this.crls, (element) => element.toJSON()),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}