{"version":3,"sources":["../src/CRLListID.js"],"names":["asn1js","CRLListID","constructor","parameters","crls","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Repeated","CrlValidatedID","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACe,MAAMC,SAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,IAAL,GAAY,iCAAmBD,UAAnB,EAA+B,MAA/B,EAAuCF,UAAUI,aAAV,CAAwB,MAAxB,CAAvC,CAAZ;AACA;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,MAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,4CAA2CD,UAAW,EAAjE,CAAN;AALF;AAOA;AACD;AACA;;;;;AAKA,QAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,UAAOH,UAAP;AAEC,QAAK,MAAL;AACC,WAAQG,YAAYC,MAAZ,KAAuB,CAA/B;AACD;AACC,UAAM,IAAIH,KAAJ,CAAW,4CAA2CD,UAAW,EAAjE,CAAN;AALF;AAOA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcJ,aAAa,EAA3B,EACA;AACC;AACA;;AAEA;;;;;;;AAOA,QAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOc,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,aAAWJ,MAAMI,QAAN,IAAkB,KAFF;AAG3BC,UAAO,CACN,IAAIlB,OAAOmB,QAAX,CAAoB;AACnBJ,UAAOF,MAAMT,IAAN,IAAc,EADF;AAEnBc,WAAO,IAAIlB,OAAOc,QAAX,CAAoB;AAC1BI,YAAO,CACN,IAAIlB,OAAOmB,QAAX,CAAoB;AACnBD,aAAOE,yBAAeb,MAAf;AADY,MAApB,CADM;AADmB,KAApB;AAFY,IAApB,CADM;AAHoB,GAApB,CAAR;AAgBA;AACD;AACA;;;;AAIAD,YAAWC,MAAX,EACA;AACC;AACA,QAAMc,OAAOrB,OAAOsB,aAAP,CAAqBf,MAArB,EACZA,MADY,EAEZN,UAAUM,MAAV,CAAiB;AAChBM,UAAO;AACNT,UAAM;AADA;AADS,GAAjB,CAFY,CAAb;;AASA,MAAGiB,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAId,KAAJ,CAAU,mEAAV,CAAN;AACD;;AAEA;AACA,OAAKL,IAAL,GAAYoB,MAAMC,IAAN,CAAWJ,KAAKK,MAAL,CAAYtB,IAAvB,EAA6BuB,WAAW,IAAIP,wBAAJ,CAAmB,EAAEb,QAAQoB,OAAV,EAAnB,CAAxC,CAAZ;AACA;AACA;AACD;AACA;;;;AAIAC,YACA;AACC;AACA,SAAQ,IAAI5B,OAAOc,QAAX,CAAoB;AAC3BI,UAAO,CACN,IAAIlB,OAAOc,QAAX,CAAoB;AACnBI,WAAOM,MAAMC,IAAN,CAAW,KAAKrB,IAAhB,EAAsBuB,WAAWA,QAAQC,QAAR,EAAjC;AADY,IAApB,CADM;AADoB,GAApB,CAAR;AAOA;AACA;AACD;AACA;;;;AAIAC,UACA;AACC,SAAO;AACNzB,SAAMoB,MAAMC,IAAN,CAAW,KAAKrB,IAAhB,EAAsBuB,WAAWA,QAAQE,MAAR,EAAjC;AADA,GAAP;AAGA;AACD;AA/ID;kBADqB5B,S,EAkJrB","file":"CRLListID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CrlValidatedID from \"./CrlValidatedID.js\";\r\n//**************************************************************************************\r\nexport default class CRLListID\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLListID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CrlValidatedID>}\r\n\t\t * @description crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", CRLListID.defaultValues(\"crls\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLListID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLListID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CRLListID ::= SEQUENCE {\r\n\t\t//    crls SEQUENCE OF CrlValidatedID }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tvalue: CrlValidatedID.schema()\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLListID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLListID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crls = Array.from(asn1.result.crls, element => new CrlValidatedID({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.crls, element => element.toSchema())\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n\r\n"]}