{"version":3,"sources":["../src/RevocationValues.js"],"names":["asn1js","RevocationValues","constructor","parameters","crlVals","defaultValues","ocspVals","otherRevVals","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificateRevocationList","BasicOCSPResponse","OtherRevVals","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","fillValues","cmsSigned","ocspResponses","i","crls","fromBER","ocspResponse","OCSPResponse","asn1Basic","responseBytes","response","valueBlock","valueHex","basicResponse","makeAttribute","Attribute","type","values"],"mappings":"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","file":"RevocationValues.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport {\n  CertificateRevocationList,\n  BasicOCSPResponse,\n  OCSPResponse,\n  Attribute,\n} from \"pkijs\";\nimport OtherRevVals from \"./OtherRevVals.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class RevocationValues {\n  //**********************************************************************************\n  /**\n   * Constructor for RevocationValues class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"crlVals\" in parameters)\n      /**\n       * @type {Array.<CertificateRevocationList>}\n       * @description crlVals\n       */\n      this.crlVals = getParametersValue(\n        parameters,\n        \"crlVals\",\n        RevocationValues.defaultValues(\"crlVals\")\n      );\n\n    if (\"ocspVals\" in parameters)\n      /**\n       * @type {Array.<BasicOCSPResponse>}\n       * @description ocspVals\n       */\n      this.ocspVals = getParametersValue(\n        parameters,\n        \"ocspVals\",\n        RevocationValues.defaultValues(\"ocspVals\")\n      );\n\n    if (\"otherRevVals\" in parameters)\n      /**\n       * @type {Array.<OtherRevVals>}\n       * @description otherRevVals\n       */\n      this.otherRevVals = getParametersValue(\n        parameters,\n        \"otherRevVals\",\n        RevocationValues.defaultValues(\"otherRevVals\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crlVals\":\n      case \"ocspVals\":\n      case \"otherRevVals\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for RevocationValues class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crlVals\":\n      case \"ocspVals\":\n      case \"otherRevVals\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for RevocationValues class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // RevocationValues ::= SEQUENCE {\n    //    crlVals [0] SEQUENCE OF CertificateList OPTIONAL,\n    //    ocspVals [1] SEQUENCE OF BasicOCSPResponse OPTIONAL,\n    //    otherRevVals [2] OtherRevVals OPTIONAL}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [crlVals]\n     * @property {string} [ocspVals]\n     * @property {string} [otherRevVals]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: [\n                new asn1js.Repeated({\n                  name: names.crlVals || \"\",\n                  value: CertificateRevocationList.schema(),\n                }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: [\n                new asn1js.Repeated({\n                  name: names.ocspVals || \"\",\n                  value: BasicOCSPResponse.schema(),\n                }),\n              ],\n            }),\n          ],\n        }),\n        new asn1js.Constructed({\n          optional: true,\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [\n            OtherRevVals.schema({\n              name: names.otherRevVals || {\n                names: {\n                  blockName: \"otherRevVals\",\n                },\n              },\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      RevocationValues.schema({\n        names: {\n          crlVals: \"crlVals\",\n          ocspVals: \"ocspVals\",\n          otherRevVals: {\n            names: {\n              blockName: \"otherRevVals\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for RevocationValues\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"crlVals\" in asn1.result)\n      this.crlVals = Array.from(\n        asn1.result.crlVals,\n        (element) => new CertificateRevocationList({ schema: element })\n      );\n\n    if (\"ocspVals\" in asn1.result)\n      this.ocspVals = Array.from(\n        asn1.result.ocspVals,\n        (element) => new BasicOCSPResponse({ schema: element })\n      );\n\n    if (\"otherRevVals\" in asn1.result)\n      this.otherRevVals = new OtherRevVals({\n        schema: asn1.result.otherRevVals,\n      });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"crlVals\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 0, // [0]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: Array.from(this.crlVals, (element) => element.toSchema()),\n            }),\n          ],\n        })\n      );\n    }\n\n    if (\"ocspVals\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 1, // [1]\n          },\n          value: [\n            new asn1js.Sequence({\n              value: Array.from(this.ocspVals, (element) => element.toSchema()),\n            }),\n          ],\n        })\n      );\n    }\n\n    if (\"otherRevVals\" in this) {\n      outputArray.push(\n        new asn1js.Constructed({\n          idBlock: {\n            tagClass: 3, // CONTEXT-SPECIFIC\n            tagNumber: 2, // [2]\n          },\n          value: [this.otherRevVals.toSchema()],\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"crlVals\" in this)\n      _object.crlVals = Array.from(this.crlVals, (element) => element.toJSON());\n\n    if (\"ocspVals\" in this)\n      _object.ocspVals = Array.from(this.ocspVals, (element) =>\n        element.toJSON()\n      );\n\n    if (\"otherRevVals\" in this)\n      _object.otherRevVals = this.otherRevVals.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n  fillValues(cmsSigned, parameters) {\n    //region Initial variables\n    let ocspResponses = [];\n    //endregion\n\n    //region Check input parameters\n    if (\"ocspResponses\" in parameters) ocspResponses = parameters.ocspResponses;\n    //endregion\n\n    //region Put information about all CRLs\n    if (\"crls\" in cmsSigned) {\n      for (let i = 0; i < cmsSigned.crls.length; i++) {\n        if (cmsSigned.crls[i] instanceof CertificateRevocationList) {\n          if (\"crlVals\" in this === false) this.crlVals = [];\n\n          this.crlVals.push(cmsSigned.crls[i]);\n        }\n      }\n    }\n    //endregion\n\n    //region Put information about all OCSP responses\n    if (ocspResponses.length) {\n      this.ocspVals = [];\n\n      for (let i = 0; i < ocspResponses.length; i++) {\n        const asn1 = asn1js.fromBER(ocspResponses[i]);\n        const ocspResponse = new OCSPResponse({ schema: asn1.result });\n\n        const asn1Basic = asn1js.fromBER(\n          ocspResponse.responseBytes.response.valueBlock.valueHex\n        );\n        const basicResponse = new BasicOCSPResponse({\n          schema: asn1Basic.result,\n        });\n\n        this.ocspVals.push(basicResponse);\n      }\n    }\n    //endregion\n  }\n  //**********************************************************************************\n  makeAttribute() {\n    //region Create and return attribute\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.24\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}