{"version":3,"sources":["../src/RevocationValues.js"],"names":["asn1js","RevocationValues","constructor","parameters","crlVals","defaultValues","ocspVals","otherRevVals","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificateRevocationList","BasicOCSPResponse","OtherRevVals","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","fillValues","cmsSigned","ocspResponses","i","crls","fromBER","ocspResponse","OCSPResponse","asn1Basic","responseBytes","response","valueBlock","valueHex","basicResponse","makeAttribute","Attribute","type","values"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;;;;;AACA;AACA;AACe,MAAMC,gBAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA,MAAG,aAAaA,UAAhB;AACC;;;;AAIA,QAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CF,iBAAiBI,aAAjB,CAA+B,SAA/B,CAA1C,CAAf;;AAED,MAAG,cAAcF,UAAjB;AACC;;;;AAIA,QAAKG,QAAL,GAAgB,iCAAmBH,UAAnB,EAA+B,UAA/B,EAA2CF,iBAAiBI,aAAjB,CAA+B,UAA/B,CAA3C,CAAhB;;AAED,MAAG,kBAAkBF,UAArB;AACC;;;;AAIA,QAAKI,YAAL,GAAoB,iCAAmBJ,UAAnB,EAA+B,cAA/B,EAA+CF,iBAAiBI,aAAjB,CAA+B,cAA/B,CAA/C,CAApB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,WAAWM,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOJ,aAAP,CAAqBK,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,SAAL;AACA,QAAK,UAAL;AACA,QAAK,cAAL;AACC,WAAO,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,mDAAkDD,UAAW,EAAxE,CAAN;AAPF;AASA;AACD;AACA;;;;;AAKA,QAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,UAAOH,UAAP;AAEC,QAAK,SAAL;AACA,QAAK,UAAL;AACA,QAAK,cAAL;AACC,WAAQG,YAAYC,MAAZ,KAAuB,CAA/B;AACD;AACC,UAAM,IAAIH,KAAJ,CAAW,mDAAkDD,UAAW,EAAxE,CAAN;AAPF;AASA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcN,aAAa,EAA3B,EACA;AACC;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,QAAMY,QAAQ,iCAAmBZ,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOgB,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,UAAO,CACN,IAAInB,OAAOoB,WAAX,CAAuB;AACtBC,cAAU,IADY;AAEtBC,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAFa;AAMtBL,WAAO,CACN,IAAInB,OAAOgB,QAAX,CAAoB;AACnBG,YAAO,CACN,IAAInB,OAAOyB,QAAX,CAAoB;AACnBR,YAAOF,MAAMX,OAAN,IAAiB,EADL;AAEnBe,aAAOO,iCAA0BjB,MAA1B;AAFY,MAApB,CADM;AADY,KAApB,CADM;AANe,IAAvB,CADM,EAkBN,IAAIT,OAAOoB,WAAX,CAAuB;AACtBC,cAAU,IADY;AAEtBC,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAFa;AAMtBL,WAAO,CACN,IAAInB,OAAOgB,QAAX,CAAoB;AACnBG,YAAO,CACN,IAAInB,OAAOyB,QAAX,CAAoB;AACnBR,YAAOF,MAAMT,QAAN,IAAkB,EADN;AAEnBa,aAAOQ,yBAAkBlB,MAAlB;AAFY,MAApB,CADM;AADY,KAApB,CADM;AANe,IAAvB,CAlBM,EAmCN,IAAIT,OAAOoB,WAAX,CAAuB;AACtBC,cAAU,IADY;AAEtBC,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAFa;AAMtBL,WAAO,CACNS,uBAAanB,MAAb,CAAoB;AACnBQ,WAAOF,MAAMR,YAAN,IAAsB;AAC5BQ,aAAO;AACNG,kBAAW;AADL;AADqB;AADV,KAApB,CADM;AANe,IAAvB,CAnCM;AAFoB,GAApB,CAAR;AAuDA;AACD;AACA;;;;AAIAV,YAAWC,MAAX,EACA;AACC;AACA,QAAMoB,OAAO7B,OAAO8B,aAAP,CAAqBrB,MAArB,EACZA,MADY,EAEZR,iBAAiBQ,MAAjB,CAAwB;AACvBM,UAAO;AACNX,aAAS,SADH;AAENE,cAAU,UAFJ;AAGNC,kBAAc;AACbQ,YAAO;AACNG,iBAAW;AADL;AADM;AAHR;AADgB,GAAxB,CAFY,CAAb;;AAeA,MAAGW,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIpB,KAAJ,CAAU,0EAAV,CAAN;AACD;;AAEA;AACA,MAAG,aAAakB,KAAKG,MAArB,EACC,KAAK5B,OAAL,GAAe6B,MAAMC,IAAN,CAAWL,KAAKG,MAAL,CAAY5B,OAAvB,EAAgC+B,WAAW,IAAIT,gCAAJ,CAA8B,EAAEjB,QAAQ0B,OAAV,EAA9B,CAA3C,CAAf;;AAED,MAAG,cAAcN,KAAKG,MAAtB,EACC,KAAK1B,QAAL,GAAgB2B,MAAMC,IAAN,CAAWL,KAAKG,MAAL,CAAY1B,QAAvB,EAAiC6B,WAAW,IAAIR,wBAAJ,CAAsB,EAAElB,QAAQ0B,OAAV,EAAtB,CAA5C,CAAhB;;AAED,MAAG,kBAAkBN,KAAKG,MAA1B,EACC,KAAKzB,YAAL,GAAoB,IAAIqB,sBAAJ,CAAiB,EAAEnB,QAAQoB,KAAKG,MAAL,CAAYzB,YAAtB,EAAjB,CAApB;AACD;AACA;AACD;AACA;;;;AAIA6B,YACA;AACC;AACA,QAAMC,cAAc,EAApB;;AAEA,MAAG,aAAa,IAAhB,EACA;AACCA,eAAYC,IAAZ,CAAiB,IAAItC,OAAOoB,WAAX,CAAuB;AACvCE,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAD8B;AAKvCL,WAAO,CACN,IAAInB,OAAOgB,QAAX,CAAoB;AACnBG,YAAOc,MAAMC,IAAN,CAAW,KAAK9B,OAAhB,EAAyB+B,WAAWA,QAAQC,QAAR,EAApC;AADY,KAApB,CADM;AALgC,IAAvB,CAAjB;AAWA;;AAED,MAAG,cAAc,IAAjB,EACA;AACCC,eAAYC,IAAZ,CAAiB,IAAItC,OAAOoB,WAAX,CAAuB;AACvCE,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAD8B;AAKvCL,WAAO,CACN,IAAInB,OAAOgB,QAAX,CAAoB;AACnBG,YAAOc,MAAMC,IAAN,CAAW,KAAK5B,QAAhB,EAA0B6B,WAAWA,QAAQC,QAAR,EAArC;AADY,KAApB,CADM;AALgC,IAAvB,CAAjB;AAWA;;AAED,MAAG,kBAAkB,IAArB,EACA;AACCC,eAAYC,IAAZ,CAAiB,IAAItC,OAAOoB,WAAX,CAAuB;AACvCE,aAAS;AACRC,eAAU,CADF,EACK;AACbC,gBAAW,CAFH,CAEK;AAFL,KAD8B;AAKvCL,WAAO,CAAC,KAAKZ,YAAL,CAAkB6B,QAAlB,EAAD;AALgC,IAAvB,CAAjB;AAOA;AACD;;AAEA;AACA,SAAQ,IAAIpC,OAAOgB,QAAX,CAAoB;AAC3BG,UAAOkB;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAE,UACA;AACC,QAAMC,UAAU,EAAhB;;AAEA,MAAG,aAAa,IAAhB,EACCA,QAAQpC,OAAR,GAAkB6B,MAAMC,IAAN,CAAW,KAAK9B,OAAhB,EAAyB+B,WAAWA,QAAQI,MAAR,EAApC,CAAlB;;AAED,MAAG,cAAc,IAAjB,EACCC,QAAQlC,QAAR,GAAmB2B,MAAMC,IAAN,CAAW,KAAK5B,QAAhB,EAA0B6B,WAAWA,QAAQI,MAAR,EAArC,CAAnB;;AAED,MAAG,kBAAkB,IAArB,EACCC,QAAQjC,YAAR,GAAuB,KAAKA,YAAL,CAAkBgC,MAAlB,EAAvB;;AAED,SAAOC,OAAP;AACA;AACD;AACAC,YAAWC,SAAX,EAAsBvC,UAAtB,EACA;AACC;AACA,MAAIwC,gBAAgB,EAApB;AACA;;AAEA;AACA,MAAG,mBAAmBxC,UAAtB,EACCwC,gBAAgBxC,WAAWwC,aAA3B;AACD;;AAEA;AACA,MAAG,UAAUD,SAAb,EACA;AACC,QAAI,IAAIE,IAAI,CAAZ,EAAeA,IAAIF,UAAUG,IAAV,CAAe/B,MAAlC,EAA0C8B,GAA1C,EACA;AACC,QAAGF,UAAUG,IAAV,CAAeD,CAAf,aAA6BlB,gCAAhC,EACA;AACC,SAAI,aAAa,IAAd,KAAwB,KAA3B,EACC,KAAKtB,OAAL,GAAe,EAAf;;AAED,UAAKA,OAAL,CAAakC,IAAb,CAAkBI,UAAUG,IAAV,CAAeD,CAAf,CAAlB;AACA;AACD;AACD;AACD;;AAEA;AACA,MAAGD,cAAc7B,MAAjB,EACA;AACC,QAAKR,QAAL,GAAgB,EAAhB;;AAEA,QAAI,IAAIsC,IAAI,CAAZ,EAAeA,IAAID,cAAc7B,MAAjC,EAAyC8B,GAAzC,EACA;AACC,UAAMf,OAAO7B,OAAO8C,OAAP,CAAeH,cAAcC,CAAd,CAAf,CAAb;AACA,UAAMG,eAAe,IAAIC,mBAAJ,CAAiB,EAAEvC,QAAQoB,KAAKG,MAAf,EAAjB,CAArB;;AAEA,UAAMiB,YAAYjD,OAAO8C,OAAP,CAAeC,aAAaG,aAAb,CAA2BC,QAA3B,CAAoCC,UAApC,CAA+CC,QAA9D,CAAlB;AACA,UAAMC,gBAAgB,IAAI3B,wBAAJ,CAAsB,EAAElB,QAAQwC,UAAUjB,MAApB,EAAtB,CAAtB;;AAEA,SAAK1B,QAAL,CAAcgC,IAAd,CAAmBgB,aAAnB;AACA;AACD;AACD;AACA;AACD;AACAC,iBACA;AACC;AACA,SAAO,IAAIC,gBAAJ,CAAc;AACpBC,SAAM,4BADc;AAEpBC,WAAQ,CACP,KAAKtB,QAAL,EADO;AAFY,GAAd,CAAP;AAMA;AACA;AACD;AApUD;kBADqBnC,gB,EAuUrB","file":"RevocationValues.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { CertificateRevocationList, BasicOCSPResponse, OCSPResponse, Attribute } from \"pkijs\";\r\nimport OtherRevVals from \"./OtherRevVals.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class RevocationValues\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationValues class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"crlVals\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t\t * @description crlVals\r\n\t\t\t */\r\n\t\t\tthis.crlVals = getParametersValue(parameters, \"crlVals\", RevocationValues.defaultValues(\"crlVals\"));\r\n\t\t\r\n\t\tif(\"ocspVals\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<BasicOCSPResponse>}\r\n\t\t\t * @description ocspVals\r\n\t\t\t */\r\n\t\t\tthis.ocspVals = getParametersValue(parameters, \"ocspVals\", RevocationValues.defaultValues(\"ocspVals\"));\r\n\t\t\r\n\t\tif(\"otherRevVals\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<OtherRevVals>}\r\n\t\t\t * @description otherRevVals\r\n\t\t\t */\r\n\t\t\tthis.otherRevVals = getParametersValue(parameters, \"otherRevVals\", RevocationValues.defaultValues(\"otherRevVals\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlVals\":\r\n\t\t\tcase \"ocspVals\":\r\n\t\t\tcase \"otherRevVals\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationValues class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlVals\":\r\n\t\t\tcase \"ocspVals\":\r\n\t\t\tcase \"otherRevVals\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationValues class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// RevocationValues ::= SEQUENCE {\r\n\t\t//    crlVals [0] SEQUENCE OF CertificateList OPTIONAL,\r\n\t\t//    ocspVals [1] SEQUENCE OF BasicOCSPResponse OPTIONAL,\r\n\t\t//    otherRevVals [2] OtherRevVals OPTIONAL}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crlVals]\r\n\t\t * @property {string} [ocspVals]\r\n\t\t * @property {string} [otherRevVals]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tname: (names.crlVals || \"\"),\r\n\t\t\t\t\t\t\t\t\tvalue: CertificateRevocationList.schema()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tname: (names.ocspVals || \"\"),\r\n\t\t\t\t\t\t\t\t\tvalue: BasicOCSPResponse.schema()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tOtherRevVals.schema({\r\n\t\t\t\t\t\t\tname: (names.otherRevVals || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"otherRevVals\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationValues.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrlVals: \"crlVals\",\r\n\t\t\t\t\tocspVals: \"ocspVals\",\r\n\t\t\t\t\totherRevVals: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherRevVals\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationValues\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"crlVals\" in asn1.result)\r\n\t\t\tthis.crlVals = Array.from(asn1.result.crlVals, element => new CertificateRevocationList({ schema: element }));\r\n\t\t\r\n\t\tif(\"ocspVals\" in asn1.result)\r\n\t\t\tthis.ocspVals = Array.from(asn1.result.ocspVals, element => new BasicOCSPResponse({ schema: element }));\r\n\t\t\r\n\t\tif(\"otherRevVals\" in asn1.result)\r\n\t\t\tthis.otherRevVals = new OtherRevVals({ schema: asn1.result.otherRevVals });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"crlVals\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.crlVals, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"ocspVals\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.ocspVals, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"otherRevVals\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.otherRevVals.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\t\t\r\n\t\tif(\"crlVals\" in this)\r\n\t\t\t_object.crlVals = Array.from(this.crlVals, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"ocspVals\" in this)\r\n\t\t\t_object.ocspVals = Array.from(this.ocspVals, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"otherRevVals\" in this)\r\n\t\t\t_object.otherRevVals = this.otherRevVals.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillValues(cmsSigned, parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet ocspResponses = [];\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Check input parameters \r\n\t\tif(\"ocspResponses\" in parameters)\r\n\t\t\tocspResponses = parameters.ocspResponses;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Put information about all CRLs \r\n\t\tif(\"crls\" in cmsSigned)\r\n\t\t{\r\n\t\t\tfor(let i = 0; i < cmsSigned.crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(cmsSigned.crls[i] instanceof CertificateRevocationList)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((\"crlVals\" in this) === false)\r\n\t\t\t\t\t\tthis.crlVals = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.crlVals.push(cmsSigned.crls[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Put information about all OCSP responses \r\n\t\tif(ocspResponses.length)\r\n\t\t{\r\n\t\t\tthis.ocspVals = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < ocspResponses.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(ocspResponses[i]);\r\n\t\t\t\tconst ocspResponse = new OCSPResponse({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\tconst asn1Basic = asn1js.fromBER(ocspResponse.responseBytes.response.valueBlock.valueHex);\r\n\t\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t\t\t\r\n\t\t\t\tthis.ocspVals.push(basicResponse);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeAttribute()\r\n\t{\r\n\t\t//region Create and return attribute\r\n\t\treturn new Attribute({\r\n\t\t\ttype: \"1.2.840.113549.1.9.16.2.24\",\r\n\t\t\tvalues: [\r\n\t\t\t\tthis.toSchema()\r\n\t\t\t]\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}