{"version":3,"sources":["../src/ESSCertIDv2.js"],"names":["asn1js","ESSCertIDv2","constructor","parameters","hashAlgorithm","defaultValues","certHash","issuerSerial","fromSchema","schema","memberName","AlgorithmIdentifier","OctetString","IssuerSerial","Error","compareWithDefault","memberValue","isEqual","issuer","serialNumber","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","_this","sequence","Promise","resolve","certificate","reject","crypto","then","toUpperCase","oid","algorithmId","algorithmParams","Null","digest","toBER","error","valueHex","GeneralNames","GeneralName","type"],"mappings":"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","file":"ESSCertIDv2.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier, GeneralNames, GeneralName } from \"pkijs\";\r\nimport IssuerSerial from \"./IssuerSerial.js\";\r\n//**************************************************************************************\r\nexport default class ESSCertIDv2\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ESSCertIDv2 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @description hashAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", ESSCertIDv2.defaultValues(\"hashAlgorithm\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description certHash\r\n\t\t */\r\n\t\tthis.certHash = getParametersValue(parameters, \"certHash\", ESSCertIDv2.defaultValues(\"certHash\"));\r\n\t\t/**\r\n\t\t * @type {IssuerSerial}\r\n\t\t * @description issuerSerial\r\n\t\t */\r\n\t\tthis.issuerSerial = getParametersValue(parameters, \"issuerSerial\", ESSCertIDv2.defaultValues(\"issuerSerial\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"certHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"issuerSerial\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ESSCertIDv2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\tcase \"certHash\":\r\n\t\t\t\treturn (memberValue.isEqual(ESSCertIDv2.defaultValues(memberName)));\r\n\t\t\tcase \"issuerSerial\":\r\n\t\t\t\treturn (IssuerSerial.compareWithDefault(\"issuer\", memberValue.issuer) &&\r\n\t\t\t\t\t\tIssuerSerial.compareWithDefault(\"serialNumber\", memberValue.serialNumber));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ESSCertIDv2 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// Hash ::= OCTET STRING\r\n\t\t//\r\n\t\t// ESSCertIDv2 ::=  SEQUENCE {\r\n\t\t//    hashAlgorithm           AlgorithmIdentifier\r\n\t\t//    DEFAULT {algorithm id-sha256},\r\n\t\t//    certHash                 Hash,\r\n\t\t//    issuerSerial             IssuerSerial OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [certHash]\r\n\t\t * @property {string} [issuerSerial]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"ESSCertIDv2.hashAlgorithm\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.certHash || \"\") }),\r\n\t\t\t\tIssuerSerial.schema(names.issuerSerial || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"ESSCertIDv2.issuerSerial\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tESSCertIDv2.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertHash: \"certHash\",\r\n\t\t\t\t\tissuerSerial: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuerSerial\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ESSCertIDv2\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"hashAlgorithm\" in asn1.result)\r\n\t\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\t\r\n\t\tthis.certHash = asn1.result.serialNumber;\r\n\t\tthis.issuerSerial = new IssuerSerial({ schema: asn1.result.issuerSerial });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"hashAlgorithm\" in this)\r\n\t\t\toutputArray.push(this.hashAlgorithm.toSchema());\r\n\t\t\r\n\t\toutputArray.push(this.certHash);\r\n\t\toutputArray.push(this.issuerSerial.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\t\t\r\n\t\tif(\"hashAlgorithm\" in this)\r\n\t\t\t_object.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n\t\t\r\n\t\t_object.certHash = this.certHash.toJSON();\r\n\t\t_object.issuerSerial = this.issuerSerial.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"ESSCertIDv2\" for given CMS Signed Data and signer index\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet _this = this;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-256\";\r\n\t\t\r\n\t\tlet certificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t\r\n\t\tif(\"certificate\" in parameters)\r\n\t\t\tcertificate = parameters.certificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"certificate\\\" is mandatory for making \\\"ESSCertIDv2\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill correct value for \"hashIndAlgorithm\"\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-256\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\tif(oid === \"\")\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect hashing algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\t_this.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: oid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all remaining attributes\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => crypto.digest({ name: hashAlgorithm }, certificate.toSchema().toBER(false)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\t_this.certHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t_this.issuerSerial = new IssuerSerial({\r\n\t\t\t\t\tissuer: new GeneralNames({\r\n\t\t\t\t\t\tnames: [\r\n\t\t\t\t\t\t\tnew GeneralName({\r\n\t\t\t\t\t\t\t\ttype: 4,\r\n\t\t\t\t\t\t\t\tvalue: certificate.issuer\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}