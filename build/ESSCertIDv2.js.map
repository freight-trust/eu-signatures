{"version":3,"sources":["../src/ESSCertIDv2.js"],"names":["asn1js","ESSCertIDv2","constructor","parameters","hashAlgorithm","defaultValues","certHash","issuerSerial","fromSchema","schema","memberName","AlgorithmIdentifier","OctetString","IssuerSerial","Error","compareWithDefault","memberValue","isEqual","issuer","serialNumber","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","_this","sequence","Promise","resolve","certificate","reject","crypto","then","toUpperCase","oid","algorithmId","algorithmParams","Null","digest","toBER","error","valueHex","GeneralNames","GeneralName","type"],"mappings":"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","file":"ESSCertIDv2.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport {\n  getCrypto,\n  getOIDByAlgorithm,\n  AlgorithmIdentifier,\n  GeneralNames,\n  GeneralName,\n} from \"pkijs\";\nimport IssuerSerial from \"./IssuerSerial.js\";\n//**************************************************************************************\nexport default class ESSCertIDv2 {\n  //**********************************************************************************\n  /**\n   * Constructor for ESSCertIDv2 class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"hashAlgorithm\" in parameters)\n      /**\n       * @type {AlgorithmIdentifier}\n       * @description hashAlgorithm\n       */\n      this.hashAlgorithm = getParametersValue(\n        parameters,\n        \"hashAlgorithm\",\n        ESSCertIDv2.defaultValues(\"hashAlgorithm\")\n      );\n\n    /**\n     * @type {OctetString}\n     * @description certHash\n     */\n    this.certHash = getParametersValue(\n      parameters,\n      \"certHash\",\n      ESSCertIDv2.defaultValues(\"certHash\")\n    );\n    /**\n     * @type {IssuerSerial}\n     * @description issuerSerial\n     */\n    this.issuerSerial = getParametersValue(\n      parameters,\n      \"issuerSerial\",\n      ESSCertIDv2.defaultValues(\"issuerSerial\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n        return new AlgorithmIdentifier();\n      case \"certHash\":\n        return new asn1js.OctetString();\n      case \"issuerSerial\":\n        return new IssuerSerial();\n      default:\n        throw new Error(\n          `Invalid member name for ESSCertIDv2 class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"hashAlgorithm\":\n      case \"certHash\":\n        return memberValue.isEqual(ESSCertIDv2.defaultValues(memberName));\n      case \"issuerSerial\":\n        return (\n          IssuerSerial.compareWithDefault(\"issuer\", memberValue.issuer) &&\n          IssuerSerial.compareWithDefault(\n            \"serialNumber\",\n            memberValue.serialNumber\n          )\n        );\n      default:\n        throw new Error(\n          `Invalid member name for ESSCertIDv2 class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // Hash ::= OCTET STRING\n    //\n    // ESSCertIDv2 ::=  SEQUENCE {\n    //    hashAlgorithm           AlgorithmIdentifier\n    //    DEFAULT {algorithm id-sha256},\n    //    certHash                 Hash,\n    //    issuerSerial             IssuerSerial OPTIONAL\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [hashAlgorithm]\n     * @property {string} [certHash]\n     * @property {string} [issuerSerial]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        AlgorithmIdentifier.schema(\n          names.hashAlgorithm || {\n            names: {\n              blockName: \"ESSCertIDv2.hashAlgorithm\",\n              optional: true,\n            },\n          }\n        ),\n        new asn1js.OctetString({ name: names.certHash || \"\" }),\n        IssuerSerial.schema(\n          names.issuerSerial || {\n            names: {\n              blockName: \"ESSCertIDv2.issuerSerial\",\n            },\n          }\n        ),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      ESSCertIDv2.schema({\n        names: {\n          hashAlgorithm: {\n            names: {\n              blockName: \"hashAlgorithm\",\n            },\n          },\n          certHash: \"certHash\",\n          issuerSerial: {\n            names: {\n              blockName: \"issuerSerial\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for ESSCertIDv2\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"hashAlgorithm\" in asn1.result)\n      this.hashAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.hashAlgorithm,\n      });\n\n    this.certHash = asn1.result.serialNumber;\n    this.issuerSerial = new IssuerSerial({ schema: asn1.result.issuerSerial });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"hashAlgorithm\" in this)\n      outputArray.push(this.hashAlgorithm.toSchema());\n\n    outputArray.push(this.certHash);\n    outputArray.push(this.issuerSerial.toSchema());\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"hashAlgorithm\" in this)\n      _object.hashAlgorithm = this.hashAlgorithm.toJSON();\n\n    _object.certHash = this.certHash.toJSON();\n    _object.issuerSerial = this.issuerSerial.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"ESSCertIDv2\" for given CMS Signed Data and signer index\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    let _this = this;\n\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-256\";\n\n    let certificate;\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"certificate\" in parameters) certificate = parameters.certificate;\n    else\n      return Promise.reject(\n        'Parameter \"certificate\" is mandatory for making \"ESSCertIDv2\"'\n      );\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Fill correct value for \"hashIndAlgorithm\"\n    sequence = sequence.then(() => {\n      if (hashAlgorithm.toUpperCase() !== \"SHA-256\") {\n        const oid = getOIDByAlgorithm({ name: hashAlgorithm });\n        if (oid === \"\")\n          return Promise.reject(\n            `Incorrect hashing algorithm: ${hashAlgorithm}`\n          );\n\n        _this.hashAlgorithm = new AlgorithmIdentifier({\n          algorithmId: oid,\n          algorithmParams: new asn1js.Null(),\n        });\n      }\n\n      return Promise.resolve();\n    });\n    //endregion\n\n    //region Create all remaining attributes\n    sequence = sequence\n      .then(\n        () =>\n          crypto.digest(\n            { name: hashAlgorithm },\n            certificate.toSchema().toBER(false)\n          ),\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          _this.certHash = new asn1js.OctetString({ valueHex: result });\n          _this.issuerSerial = new IssuerSerial({\n            issuer: new GeneralNames({\n              names: [\n                new GeneralName({\n                  type: 4,\n                  value: certificate.issuer,\n                }),\n              ],\n            }),\n            serialNumber: certificate.serialNumber,\n          });\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}