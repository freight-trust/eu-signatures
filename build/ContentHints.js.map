{"version":3,"sources":["../src/ContentHints.js"],"names":["asn1js","ContentHints","constructor","parameters","contentDescription","defaultValues","contentType","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","Utf8String","optinal","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"ContentHints.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class ContentHints {\n  //**********************************************************************************\n  /**\n   * Constructor for ContentHints class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"contentDescription\" in parameters)\n      /**\n       * @type {string}\n       * @description contentDescription\n       */\n      this.contentDescription = getParametersValue(\n        parameters,\n        \"contentDescription\",\n        ContentHints.defaultValues(\"contentDescription\")\n      );\n\n    /**\n     * @type {string}\n     * @description contentType\n     */\n    this.contentType = getParametersValue(\n      parameters,\n      \"contentType\",\n      ContentHints.defaultValues(\"contentType\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"contentDescription\":\n      case \"contentType\":\n        return \"\";\n      default:\n        throw new Error(\n          `Invalid member name for ContentHints class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"contentDescription\":\n      case \"contentType\":\n        return memberValue === \"\";\n      default:\n        throw new Error(\n          `Invalid member name for ContentHints class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // ContentHints ::= SEQUENCE {\n    //    contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,\n    //    contentType ContentType }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [contentDescription]\n     * @property {string} [contentType]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Utf8String({\n          name: names.contentDescription || \"\",\n          optinal: true,\n        }),\n        new asn1js.ObjectIdentifier({ name: names.contentType || \"\" }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      ContentHints.schema({\n        names: {\n          contentDescription: \"contentDescription\",\n          contentType: \"contentType\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for ContentHints\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"contentDescription\" in asn1.result)\n      this.contentDescription = asn1.result.contentDescription.valueBlock.value;\n\n    // noinspection JSUnusedGlobalSymbols\n    this.contentType = asn1.result.contentType.valueBlock.toString();\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.Utf8String({ value: this.contentType }),\n        new asn1js.ObjectIdentifier({ value: this.contentType }),\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      contentDescription: this.contentDescription,\n      contentType: this.contentType,\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}