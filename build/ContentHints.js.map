{"version":3,"sources":["../src/ContentHints.js"],"names":["asn1js","ContentHints","constructor","parameters","contentDescription","defaultValues","contentType","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","Utf8String","optinal","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"ContentHints.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class ContentHints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentHints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"contentDescription\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @description contentDescription\r\n\t\t\t */\r\n\t\t\tthis.contentDescription = getParametersValue(parameters, \"contentDescription\", ContentHints.defaultValues(\"contentDescription\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentHints.defaultValues(\"contentType\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentDescription\":\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentHints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentDescription\":\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentHints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ContentHints ::= SEQUENCE {\r\n\t\t//    contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,\r\n\t\t//    contentType ContentType }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentDescription]\r\n\t\t * @property {string} [contentType]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Utf8String({\r\n\t\t\t\t\tname: (names.contentDescription || \"\"),\r\n\t\t\t\t\toptinal: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentHints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentDescription: \"contentDescription\",\r\n\t\t\t\t\tcontentType: \"contentType\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentHints\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"contentDescription\" in asn1.result)\r\n\t\t\tthis.contentDescription = asn1.result.contentDescription.valueBlock.value;\r\n\t\t\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Utf8String({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType })\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcontentDescription: this.contentDescription,\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}