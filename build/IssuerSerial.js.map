{"version":3,"sources":["../src/IssuerSerial.js"],"names":["asn1js","IssuerSerial","constructor","parameters","issuer","defaultValues","serialNumber","fromSchema","schema","memberName","GeneralNames","Integer","Error","compareWithDefault","memberValue","names","length","isEqual","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","file":"IssuerSerial.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { GeneralNames } from \"pkijs\";\r\n//**************************************************************************************\r\nexport default class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralNames}\r\n\t\t * @description issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @description serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn (memberValue.names.length === 0);\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(IssuerSerial.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//IssuerSerial ::= SEQUENCE {\r\n\t\t//    issuer                   GeneralNames,\r\n\t\t//    serialNumber             CertificateSerialNumber\r\n\t\t//}\r\n\t\t//\r\n\t\t//CertificateSerialNumber ::= INTEGER\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}