{"version":3,"sources":["../src/IssuerSerial.js"],"names":["asn1js","IssuerSerial","constructor","parameters","issuer","defaultValues","serialNumber","fromSchema","schema","memberName","GeneralNames","Integer","Error","compareWithDefault","memberValue","names","length","isEqual","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","file":"IssuerSerial.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { GeneralNames } from \"pkijs\";\n//**************************************************************************************\nexport default class IssuerSerial {\n  //**********************************************************************************\n  /**\n   * Constructor for IssuerSerial class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {GeneralNames}\n     * @description issuer\n     */\n    this.issuer = getParametersValue(\n      parameters,\n      \"issuer\",\n      IssuerSerial.defaultValues(\"issuer\")\n    );\n    /**\n     * @type {Integer}\n     * @description serialNumber\n     */\n    this.serialNumber = getParametersValue(\n      parameters,\n      \"serialNumber\",\n      IssuerSerial.defaultValues(\"serialNumber\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"issuer\":\n        return new GeneralNames();\n      case \"serialNumber\":\n        return new asn1js.Integer();\n      default:\n        throw new Error(\n          `Invalid member name for IssuerSerial class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"issuer\":\n        return memberValue.names.length === 0;\n      case \"serialNumber\":\n        return memberValue.isEqual(IssuerSerial.defaultValues(memberName));\n      default:\n        throw new Error(\n          `Invalid member name for IssuerSerial class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    //IssuerSerial ::= SEQUENCE {\n    //    issuer                   GeneralNames,\n    //    serialNumber             CertificateSerialNumber\n    //}\n    //\n    //CertificateSerialNumber ::= INTEGER\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [issuer]\n     * @property {string} [serialNumber]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        GeneralNames.schema(names.issuer || {}),\n        new asn1js.Integer({ name: names.serialNumber || \"\" }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      IssuerSerial.schema({\n        names: {\n          issuer: {\n            names: {\n              blockName: \"issuer\",\n            },\n          },\n          serialNumber: \"serialNumber\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for IssuerSerial\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    // noinspection JSUnusedGlobalSymbols\n    this.issuer = new GeneralNames({ schema: asn1.result.issuer });\n    // noinspection JSUnusedGlobalSymbols\n    this.serialNumber = asn1.result.serialNumber;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [this.issuer.toSchema(), this.serialNumber],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      issuer: this.issuer.toJSON(),\n      serialNumber: this.serialNumber.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}