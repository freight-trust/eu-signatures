{"version":3,"sources":["../src/CommitmentTypeIndication.js"],"names":["asn1js","CommitmentTypeIndication","constructor","parameters","commitmentTypeId","defaultValues","commitmentTypeQualifier","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","CommitmentTypeQualifier","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"CommitmentTypeIndication.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport CommitmentTypeQualifier from \"./CommitmentTypeQualifier.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class CommitmentTypeIndication\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CommitmentTypeIndication class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description commitmentTypeId\r\n\t\t */\r\n\t\tthis.commitmentTypeId = getParametersValue(parameters, \"commitmentTypeId\", CommitmentTypeIndication.defaultValues(\"commitmentTypeId\"));\r\n\t\t\r\n\t\tif(\"commitmentTypeQualifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<CommitmentTypeQualifier>}\r\n\t\t\t * @description commitmentTypeQualifier\r\n\t\t\t */\r\n\t\t\tthis.commitmentTypeQualifier = getParametersValue(parameters, \"commitmentTypeQualifier\", CommitmentTypeIndication.defaultValues(\"commitmentTypeQualifier\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"commitmentTypeId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"commitmentTypeQualifier\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CommitmentTypeIndication class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"commitmentTypeId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"commitmentTypeQualifier\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CommitmentTypeIndication class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CommitmentTypeIdentifier ::= OBJECT IDENTIFIER\r\n\t\t//\r\n\t\t// CommitmentTypeIndication ::= SEQUENCE {\r\n\t\t//    commitmentTypeId CommitmentTypeIdentifier,\r\n\t\t//    commitmentTypeQualifier SEQUENCE SIZE (1..MAX) OF CommitmentTypeQualifier OPTIONAL}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [commitmentTypeId]\r\n\t\t * @property {string} [commitmentTypeQualifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.commitmentTypeId || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.commitmentTypeQualifier || \"\"),\r\n\t\t\t\t\t\t\tvalue: CommitmentTypeQualifier.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCommitmentTypeIndication.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcommitmentTypeId: \"commitmentTypeId\",\r\n\t\t\t\t\tcommitmentTypeQualifier: \"commitmentTypeQualifier\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CommitmentTypeIndication\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.commitmentTypeId = asn1.result.commitmentTypeId.valueBlock.toString();\r\n\t\t\r\n\t\tif(\"commitmentTypeQualifier\" in asn1.result)\r\n\t\t\tthis.commitmentTypeQualifier = Array.from(asn1.result.commitmentTypeQualifier, element => new CommitmentTypeQualifier({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.commitmentTypeId })\r\n\t\t];\r\n\r\n\t\tif(\"commitmentTypeQualifier\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.commitmentTypeQualifier, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcommitmentTypeId: this.commitmentTypeId\r\n\t\t};\r\n\t\t\r\n\t\tif(\"commitmentTypeQualifier\" in this)\r\n\t\t\t_object.commitmentTypeQualifier = Array.from(this.commitmentTypeQualifier, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}