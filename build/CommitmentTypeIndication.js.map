{"version":3,"sources":["../src/CommitmentTypeIndication.js"],"names":["asn1js","CommitmentTypeIndication","constructor","parameters","commitmentTypeId","defaultValues","commitmentTypeQualifier","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","CommitmentTypeQualifier","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"CommitmentTypeIndication.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport CommitmentTypeQualifier from \"./CommitmentTypeQualifier.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class CommitmentTypeIndication {\n  //**********************************************************************************\n  /**\n   * Constructor for CommitmentTypeIndication class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description commitmentTypeId\n     */\n    this.commitmentTypeId = getParametersValue(\n      parameters,\n      \"commitmentTypeId\",\n      CommitmentTypeIndication.defaultValues(\"commitmentTypeId\")\n    );\n\n    if (\"commitmentTypeQualifier\" in parameters)\n      /**\n       * @type {Array.<CommitmentTypeQualifier>}\n       * @description commitmentTypeQualifier\n       */\n      this.commitmentTypeQualifier = getParametersValue(\n        parameters,\n        \"commitmentTypeQualifier\",\n        CommitmentTypeIndication.defaultValues(\"commitmentTypeQualifier\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"commitmentTypeId\":\n        return \"\";\n      case \"commitmentTypeQualifier\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for CommitmentTypeIndication class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"commitmentTypeId\":\n        return memberValue === \"\";\n      case \"commitmentTypeQualifier\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for CommitmentTypeIndication class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CommitmentTypeIdentifier ::= OBJECT IDENTIFIER\n    //\n    // CommitmentTypeIndication ::= SEQUENCE {\n    //    commitmentTypeId CommitmentTypeIdentifier,\n    //    commitmentTypeQualifier SEQUENCE SIZE (1..MAX) OF CommitmentTypeQualifier OPTIONAL}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [commitmentTypeId]\n     * @property {string} [commitmentTypeQualifier]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.ObjectIdentifier({ name: names.commitmentTypeId || \"\" }),\n        new asn1js.Sequence({\n          optional: true,\n          value: [\n            new asn1js.Repeated({\n              name: names.commitmentTypeQualifier || \"\",\n              value: CommitmentTypeQualifier.schema(),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CommitmentTypeIndication.schema({\n        names: {\n          commitmentTypeId: \"commitmentTypeId\",\n          commitmentTypeQualifier: \"commitmentTypeQualifier\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CommitmentTypeIndication\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.commitmentTypeId = asn1.result.commitmentTypeId.valueBlock.toString();\n\n    if (\"commitmentTypeQualifier\" in asn1.result)\n      this.commitmentTypeQualifier = Array.from(\n        asn1.result.commitmentTypeQualifier,\n        (element) => new CommitmentTypeQualifier({ schema: element })\n      );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [\n      new asn1js.ObjectIdentifier({ value: this.commitmentTypeId }),\n    ];\n\n    if (\"commitmentTypeQualifier\" in this) {\n      outputArray.push(\n        new asn1js.Sequence({\n          value: Array.from(this.commitmentTypeQualifier, (element) =>\n            element.toSchema()\n          ),\n        })\n      );\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      commitmentTypeId: this.commitmentTypeId,\n    };\n\n    if (\"commitmentTypeQualifier\" in this)\n      _object.commitmentTypeQualifier = Array.from(\n        this.commitmentTypeQualifier,\n        (element) => element.toJSON()\n      );\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}