{"version":3,"sources":["../src/ArchiveTimeStampV3.js"],"names":["asn1js","ArchiveTimeStampV3","ContentInfo","constructor","parameters","tspResponse","defaultValues","aTSHashIndex","fromSchema","schema","memberName","ArrayBuffer","ATSHashIndex","Error","compareWithDefault","memberValue","byteLength","certificatesHashIndex","crlsHashIndex","unsignedAttrsHashIndex","initValues","contentType","TimeStampResp","timeStampToken","cmsSignedData","SignedData","content","signerInfos","length","unsignedAttrs","attributes","attribute","Attribute","type","parsedValue","values","e","getStampingBuffer","signerIndex","sequence","Promise","resolve","hashAlgorithm","resultBuffer","crypto","reject","encapContentInfo","eContent","idBlock","tagClass","tagNumber","isConstructed","valueBlock","valueHex","i","value","then","digest","name","error","result","contentOID","ObjectIdentifier","eContentType","toBER","version","Integer","sid","IssuerAndSerialNumber","toSchema","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","makeAttribute","asn1","fromBER","SignedAndUnsignedAttributes"],"mappings":"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","file":"ArchiveTimeStampV3.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\nimport {\n  getCrypto,\n  ContentInfo,\n  SignedData,\n  IssuerAndSerialNumber,\n  Attribute,\n  TimeStampResp,\n  SignedAndUnsignedAttributes,\n} from \"pkijs\";\nimport ATSHashIndex from \"./ATSHashIndex.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class ArchiveTimeStampV3 extends ContentInfo {\n  //**********************************************************************************\n  /**\n   * Constructor for ArchiveTimeStampV3 class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n\n    //region Internal properties of the object\n    if (\"tspResponse\" in parameters)\n      /**\n       * @type {ArrayBuffer}\n       * @description tspResponse\n       */\n      this.tspResponse = getParametersValue(\n        parameters,\n        \"tspResponse\",\n        ArchiveTimeStampV3.defaultValues(\"tspResponse\")\n      );\n\n    /**\n     * @type {ATSHashIndex}\n     * @description aTSHashIndex\n     */\n    this.aTSHashIndex = getParametersValue(\n      parameters,\n      \"aTSHashIndex\",\n      ArchiveTimeStampV3.defaultValues(\"aTSHashIndex\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"tspResponse\":\n        return new ArrayBuffer(0);\n      case \"aTSHashIndex\":\n        return new ATSHashIndex();\n      default:\n        throw new Error(\n          `Invalid member name for ArchiveTimeStampV3 class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"tspResponse\":\n        return memberValue.byteLength === 0;\n      case \"aTSHashIndex\":\n        // noinspection OverlyComplexBooleanExpressionJS\n        return (\n          \"hashIndAlgorithm\" in memberValue === false &&\n          ATSHashIndex.compareWithDefault(\n            \"certificatesHashIndex\",\n            memberValue.certificatesHashIndex\n          ) &&\n          ATSHashIndex.compareWithDefault(\n            \"crlsHashIndex\",\n            memberValue.crlsHashIndex\n          ) &&\n          ATSHashIndex.compareWithDefault(\n            \"unsignedAttrsHashIndex\",\n            memberValue.unsignedAttrsHashIndex\n          )\n        );\n      default:\n        throw new Error(\n          `Invalid member name for ArchiveTimeStampV3 class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   * @param {boolean} [initValues=true]\n   */\n  fromSchema(schema, initValues = true) {\n    super.fromSchema(schema);\n\n    if (initValues) {\n      if (this.contentType !== \"1.2.840.113549.1.7.2\")\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: incorrect content type\"\n        );\n\n      this.tspResponse = new TimeStampResp({ timeStampToken: schema });\n\n      const cmsSignedData = new SignedData({ schema: this.content });\n\n      if (cmsSignedData.signerInfos.length !== 1)\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: incorrect signerInfos length\"\n        );\n\n      if (\"unsignedAttrs\" in cmsSignedData.signerInfos[0] === false)\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: missing unsignedAttrs\"\n        );\n\n      if (cmsSignedData.signerInfos[0].unsignedAttrs.attributes.length !== 1)\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: incorrect unsignedAttrs length\"\n        );\n\n      const attribute = new Attribute(\n        cmsSignedData.signerInfos[0].unsignedAttrs.attributes[0]\n      );\n\n      if (attribute.type !== \"0.4.0.1733.2.5\")\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: incorrect type for aTSHashIndex value\"\n        );\n\n      let parsedValue;\n\n      try {\n        parsedValue = new ATSHashIndex({ schema: attribute.values[0] });\n      } catch (e) {\n        throw new Error(\n          \"Incorrect object schema for archive-time-stamp-v3 attribute: incorrect aTSHashIndex value\"\n        );\n      }\n\n      this.aTSHashIndex = parsedValue;\n    }\n  }\n  //**********************************************************************************\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * Get \"ArrayBuffer\" to transfer to time-stamp server\n   * @param {SignedData} cmsSignedData CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  getStampingBuffer(cmsSignedData, signerIndex, parameters) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-256\";\n\n    let content = new ArrayBuffer(0);\n    let aTSHashIndex = new ArrayBuffer(0);\n\n    let resultBuffer = new ArrayBuffer(0);\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"content\" in parameters) content = parameters.content;\n    // ArrayBuffer\n    else {\n      if (\"eContent\" in cmsSignedData.encapContentInfo) {\n        if (\n          cmsSignedData.encapContentInfo.eContent.idBlock.tagClass === 1 &&\n          cmsSignedData.encapContentInfo.eContent.idBlock.tagNumber === 4\n        ) {\n          if (\n            cmsSignedData.encapContentInfo.eContent.idBlock.isConstructed ===\n            false\n          )\n            content =\n              cmsSignedData.encapContentInfo.eContent.valueBlock.valueHex;\n          else {\n            for (\n              let i = 0;\n              i <\n              cmsSignedData.encapContentInfo.eContent.valueBlock.value.length;\n              i++\n            )\n              content = utilConcatBuf(\n                content,\n                cmsSignedData.encapContentInfo.eContent.valueBlock.value[i]\n                  .valueBlock.valueHex\n              );\n          }\n        } else\n          content = cmsSignedData.encapContentInfo.eContent.valueBlock.valueHex;\n      } else\n        return Promise.reject(\n          'Parameter \"content\" is mandatory for making archive-time-stamp-v3'\n        );\n    }\n\n    if (\"aTSHashIndex\" in parameters) aTSHashIndex = parameters.aTSHashIndex;\n    // ArrayBuffer\n    else\n      return Promise.reject(\n        'Parameter \"aTSHashIndex\" is mandatory for making archive-time-stamp-v3'\n      );\n    //endregion\n\n    //region Make hash of initial content\n    sequence = sequence.then(\n      () => crypto.digest({ name: hashAlgorithm }, content),\n      (error) => Promise.reject(error)\n    );\n    //endregion\n\n    //region Make final stamping buffer\n    sequence = sequence.then(\n      (result) => {\n        //region eContentType\n        const contentOID = new asn1js.ObjectIdentifier({\n          value: cmsSignedData.encapContentInfo.eContentType,\n        });\n        resultBuffer = utilConcatBuf(resultBuffer, contentOID.toBER(false));\n        //endregion\n\n        //region message-digest\n        // noinspection JSCheckFunctionSignatures\n        resultBuffer = utilConcatBuf(resultBuffer, result);\n        //endregion\n\n        //region version\n        const version = new asn1js.Integer({\n          value: cmsSignedData.signerInfos[signerIndex].version,\n        });\n        resultBuffer = utilConcatBuf(resultBuffer, version.toBER(false));\n        //endregion\n\n        //region sid\n        let sid;\n\n        if (\n          cmsSignedData.signerInfos[signerIndex].sid instanceof\n          IssuerAndSerialNumber\n        )\n          sid = cmsSignedData.signerInfos[signerIndex].sid.toSchema();\n        else sid = cmsSignedData.signerInfos[signerIndex].sid;\n\n        resultBuffer = utilConcatBuf(resultBuffer, sid.toBER(false));\n        //endregion\n\n        //region digestAlgorithm\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          cmsSignedData.signerInfos[signerIndex].digestAlgorithm\n            .toSchema()\n            .toBER(false)\n        );\n        //endregion\n\n        //region signedAttrs\n        if (\"signedAttrs\" in cmsSignedData.signerInfos[signerIndex])\n          resultBuffer = utilConcatBuf(\n            resultBuffer,\n            cmsSignedData.signerInfos[signerIndex].signedAttrs\n              .toSchema()\n              .toBER(false)\n          );\n        else\n          return Promise.reject(\n            'Must be \"signedAttrs\" inside SignerInfo structure. Check correctness of the signed data.'\n          );\n        //endregion\n\n        //region signatureAlgorithm\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          cmsSignedData.signerInfos[signerIndex].signatureAlgorithm\n            .toSchema()\n            .toBER(false)\n        );\n        //endregion\n\n        //region signature\n        resultBuffer = utilConcatBuf(\n          resultBuffer,\n          cmsSignedData.signerInfos[signerIndex].signature.toBER(false)\n        );\n        //endregion\n\n        //region ATSHashIndexV2\n        resultBuffer = utilConcatBuf(resultBuffer, aTSHashIndex);\n        //endregion\n\n        return resultBuffer;\n      },\n      (error) => Promise.reject(error)\n    );\n    //endregion\n\n    //region Make hash of result buffer\n    sequence = sequence.then(\n      (result) => crypto.digest({ name: hashAlgorithm }, result),\n      (error) => Promise.reject(error)\n    );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n  /**\n   * Create \"archive-time-stamp-v3\" CAdES attribute\n   * @param {Object} [parameters] Additional parameters for making attribute\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters = {}) {\n    //region Initial variables\n    let tspResponse;\n    //endregion\n\n    //region Check input parameters\n    if (\"tspResponse\" in parameters) tspResponse = parameters.tspResponse;\n    else {\n      if (\"tspResponse\" in this) tspResponse = this.tspResponse;\n      else\n        throw new Error(\n          'Parameter \"tspResponse\" is mandatory for making archive-time-stamp-v3 attribute'\n        );\n    }\n\n    this.tspResponse = tspResponse;\n    //endregion\n\n    //region Change type of \"tspResponse\"\n    const asn1 = asn1js.fromBER(tspResponse);\n    tspResponse = new TimeStampResp({ schema: asn1.result });\n    //endregion\n\n    //region Initialize internal variables from \"tspResponse\"\n    if (\"timeStampToken\" in tspResponse)\n      this.fromSchema(tspResponse.timeStampToken.toSchema(), false);\n    else throw new Error('No neccessary \"timeStampToken\" inside \"tspResponse\"');\n    //endregion\n\n    //region Append \"ATSHashIndex\" into local unsigned attributes\n    const cmsSignedData = new SignedData({ schema: this.content });\n\n    cmsSignedData.signerInfos[0].unsignedAttrs = new SignedAndUnsignedAttributes(\n      {\n        type: 1, // UnsignedAttributes\n        attributes: [this.aTSHashIndex.makeAttribute()],\n      }\n    );\n\n    this.content = cmsSignedData.toSchema();\n    //endregion\n\n    //region Create and return attribute\n    return new Attribute({\n      type: \"0.4.0.1733.2.4\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}