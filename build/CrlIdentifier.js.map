{"version":3,"sources":["../src/CrlIdentifier.js"],"names":["asn1js","CrlIdentifier","constructor","parameters","crlissuer","defaultValues","crlIssuedTime","crlNumber","fromSchema","schema","memberName","RelativeDistinguishedNames","Date","Integer","Error","compareWithDefault","memberValue","typesAndValues","valueBeforeDecode","isEqual","names","Sequence","name","blockName","optional","value","UTCTime","asn1","compareSchema","verified","result","toDate","toSchema","outputArray","valueDate","push","toJSON","_object","fillValues","crl","issuer","thisUpdate"],"mappings":"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","file":"CrlIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { RelativeDistinguishedNames } from \"pkijs\";\r\n//**************************************************************************************\r\nexport default class CrlIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CrlIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @description crlissuer\r\n\t\t */\r\n\t\tthis.crlissuer = getParametersValue(parameters, \"crlissuer\", CrlIdentifier.defaultValues(\"crlissuer\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @description crlIssuedTime\r\n\t\t */\r\n\t\tthis.crlIssuedTime = getParametersValue(parameters, \"crlIssuedTime\", CrlIdentifier.defaultValues(\"crlIssuedTime\"));\r\n\t\t\r\n\t\tif(\"crlNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @description crlNumber\r\n\t\t\t */\r\n\t\t\tthis.crlNumber = getParametersValue(parameters, \"crlNumber\", CrlIdentifier.defaultValues(\"crlNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlissuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"crlIssuedTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"crlNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CrlIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crlissuer\":\r\n\t\t\t\treturn ((RelativeDistinguishedNames.compareWithDefault(\"typesAndValues\", memberValue.typesAndValues)) &&\r\n\t\t\t\t\t\t(RelativeDistinguishedNames.compareWithDefault(\"valueBeforeDecode\", memberValue.valueBeforeDecode)));\r\n\t\t\tcase \"crlIssuedTime\":\r\n\t\t\t\treturn (memberValue === CrlIdentifier.defaultValues(memberName));\r\n\t\t\tcase \"crlNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CrlIdentifier.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CrlIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CrlIdentifier ::= SEQUENCE {\r\n\t\t//    crlissuer Name,\r\n\t\t//    crlIssuedTime UTCTime,\r\n\t\t//    crlNumber INTEGER OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crlissuer]\r\n\t\t * @property {string} [crlIssuedTime]\r\n\t\t * @property {string} [crlNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tRelativeDistinguishedNames.schema(names.crlissuer || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.crlIssuedTime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.crlNumber || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCrlIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrlissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"crlissuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcrlIssuedTime: \"crlIssuedTime\",\r\n\t\t\t\t\tcrlNumber: \"crlNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CrlIdentifier\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.crlissuer = new RelativeDistinguishedNames({ schema: asn1.result.crlissuer });\r\n\t\tthis.crlIssuedTime = asn1.result.crlIssuedTime.toDate();\r\n\t\t\r\n\t\tif(\"crlNumber\" in asn1.result)\r\n\t\t\tthis.crlNumber = asn1.result.crlNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.crlissuer.toSchema(),\r\n\t\t\tnew asn1js.UTCTime({ valueDate: this.crlIssuedTime })\r\n\t\t];\r\n\t\t\r\n\t\tif(\"crlNumber\" in this)\r\n\t\t\toutputArray.push(this.crlNumber);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcrlissuer: this.crlissuer.toJSON(),\r\n\t\t\tcrlIssuedTime: this.crlIssuedTime\r\n\t\t};\r\n\t\t\r\n\t\tif(\"crlNumber\" in this)\r\n\t\t\t_object.crlNumber = this.crlNumber.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"CrlValidatedID\" for given CRL data\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t */\r\n\tfillValues(parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet crl;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"crl\" in parameters)\r\n\t\t\tcrl = parameters.crl; // in_window.org.pkijs.simpl.CRL\r\n\t\telse\r\n\t\t\tthrow new Error(\"Parameter \\\"crl\\\" is mandatory for making \\\"CrlIdentifier\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal fields\r\n\t\tthis.crlissuer = crl.issuer;\r\n\t\tthis.crlIssuedTime = crl.thisUpdate;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}