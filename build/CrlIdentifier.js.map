{"version":3,"sources":["../src/CrlIdentifier.js"],"names":["asn1js","CrlIdentifier","constructor","parameters","crlissuer","defaultValues","crlIssuedTime","crlNumber","fromSchema","schema","memberName","RelativeDistinguishedNames","Date","Integer","Error","compareWithDefault","memberValue","typesAndValues","valueBeforeDecode","isEqual","names","Sequence","name","blockName","optional","value","UTCTime","asn1","compareSchema","verified","result","toDate","toSchema","outputArray","valueDate","push","toJSON","_object","fillValues","crl","issuer","thisUpdate"],"mappings":"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","file":"CrlIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { RelativeDistinguishedNames } from \"pkijs\";\n//**************************************************************************************\nexport default class CrlIdentifier {\n  //**********************************************************************************\n  /**\n   * Constructor for CrlIdentifier class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {RelativeDistinguishedNames}\n     * @description crlissuer\n     */\n    this.crlissuer = getParametersValue(\n      parameters,\n      \"crlissuer\",\n      CrlIdentifier.defaultValues(\"crlissuer\")\n    );\n    /**\n     * @type {Date}\n     * @description crlIssuedTime\n     */\n    this.crlIssuedTime = getParametersValue(\n      parameters,\n      \"crlIssuedTime\",\n      CrlIdentifier.defaultValues(\"crlIssuedTime\")\n    );\n\n    if (\"crlNumber\" in parameters)\n      /**\n       * @type {Integer}\n       * @description crlNumber\n       */\n      this.crlNumber = getParametersValue(\n        parameters,\n        \"crlNumber\",\n        CrlIdentifier.defaultValues(\"crlNumber\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"crlissuer\":\n        return new RelativeDistinguishedNames();\n      case \"crlIssuedTime\":\n        return new Date(0, 0, 0);\n      case \"crlNumber\":\n        return new asn1js.Integer();\n      default:\n        throw new Error(\n          `Invalid member name for CrlIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"crlissuer\":\n        return (\n          RelativeDistinguishedNames.compareWithDefault(\n            \"typesAndValues\",\n            memberValue.typesAndValues\n          ) &&\n          RelativeDistinguishedNames.compareWithDefault(\n            \"valueBeforeDecode\",\n            memberValue.valueBeforeDecode\n          )\n        );\n      case \"crlIssuedTime\":\n        return memberValue === CrlIdentifier.defaultValues(memberName);\n      case \"crlNumber\":\n        return memberValue.isEqual(CrlIdentifier.defaultValues(memberName));\n      default:\n        throw new Error(\n          `Invalid member name for CrlIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CrlIdentifier ::= SEQUENCE {\n    //    crlissuer Name,\n    //    crlIssuedTime UTCTime,\n    //    crlNumber INTEGER OPTIONAL }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [crlissuer]\n     * @property {string} [crlIssuedTime]\n     * @property {string} [crlNumber]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        RelativeDistinguishedNames.schema(\n          names.crlissuer || {\n            names: {\n              blockName: \"\",\n            },\n          }\n        ),\n        new asn1js.UTCTime({ name: names.crlIssuedTime || \"\" }),\n        new asn1js.Integer({\n          name: names.crlNumber || \"\",\n          optional: true,\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CrlIdentifier.schema({\n        names: {\n          crlissuer: {\n            names: {\n              blockName: \"crlissuer\",\n            },\n          },\n          crlIssuedTime: \"crlIssuedTime\",\n          crlNumber: \"crlNumber\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CrlIdentifier\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.crlissuer = new RelativeDistinguishedNames({\n      schema: asn1.result.crlissuer,\n    });\n    this.crlIssuedTime = asn1.result.crlIssuedTime.toDate();\n\n    if (\"crlNumber\" in asn1.result) this.crlNumber = asn1.result.crlNumber;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [\n      this.crlissuer.toSchema(),\n      new asn1js.UTCTime({ valueDate: this.crlIssuedTime }),\n    ];\n\n    if (\"crlNumber\" in this) outputArray.push(this.crlNumber);\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      crlissuer: this.crlissuer.toJSON(),\n      crlIssuedTime: this.crlIssuedTime,\n    };\n\n    if (\"crlNumber\" in this) _object.crlNumber = this.crlNumber.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"CrlValidatedID\" for given CRL data\n   * @param {Object} parameters Additional parameters for making attribute\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    let crl;\n    //endregion\n\n    //region Check input parameters\n    if (\"crl\" in parameters) crl = parameters.crl;\n    // in_window.org.pkijs.simpl.CRL\n    else\n      throw new Error(\n        'Parameter \"crl\" is mandatory for making \"CrlIdentifier\"'\n      );\n    //endregion\n\n    //region Fill internal fields\n    this.crlissuer = crl.issuer;\n    this.crlIssuedTime = crl.thisUpdate;\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}