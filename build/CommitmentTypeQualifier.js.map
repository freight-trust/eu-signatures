{"version":3,"sources":["../src/CommitmentTypeQualifier.js"],"names":["asn1js","CommitmentTypeQualifier","constructor","parameters","commitmentTypeIdentifier","defaultValues","qualifier","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"CommitmentTypeQualifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\nexport default class CommitmentTypeQualifier {\n  //**********************************************************************************\n  /**\n   * Constructor for CommitmentTypeQualifier class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description commitmentTypeIdentifier\n     */\n    this.commitmentTypeIdentifier = getParametersValue(\n      parameters,\n      \"commitmentTypeIdentifier\",\n      CommitmentTypeQualifier.defaultValues(\"commitmentTypeIdentifier\")\n    );\n    /**\n     * @type {*}\n     * @description qualifier\n     */\n    this.qualifier = getParametersValue(\n      parameters,\n      \"qualifier\",\n      CommitmentTypeQualifier.defaultValues(\"qualifier\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"commitmentTypeIdentifier\":\n        return \"\";\n      case \"qualifier\":\n        return new asn1js.Any();\n      default:\n        throw new Error(\n          `Invalid member name for CommitmentTypeQualifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"commitmentTypeIdentifier\":\n        return memberValue === \"\";\n      case \"qualifier\":\n        return memberValue instanceof asn1js.Any;\n      default:\n        throw new Error(\n          `Invalid member name for CommitmentTypeQualifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CommitmentTypeQualifier ::= SEQUENCE {\n    //    commitmentTypeIdentifier CommitmentTypeIdentifier,\n    //    qualifier ANY DEFINED BY commitmentTypeIdentifier }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [commitmentTypeIdentifier]\n     * @property {string} [qualifier]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.ObjectIdentifier({\n          name: names.commitmentTypeIdentifier || \"\",\n        }),\n        new asn1js.Any({\n          name: names.qualifier || \"\",\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CommitmentTypeQualifier.schema({\n        names: {\n          commitmentTypeIdentifier: \"commitmentTypeIdentifier\",\n          qualifier: \"qualifier\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CommitmentTypeQualifier\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.commitmentTypeIdentifier = asn1.result.commitmentTypeIdentifier.valueBlock.toString();\n    this.qualifier = asn1.result.qualifier;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    if (CommitmentTypeQualifier.compareWithDefault(\"qualifier\", this.qualifier))\n      throw new Error('Member \"qualifier\" was not correctly initialized');\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.ObjectIdentifier({ value: this.commitmentTypeIdentifier }),\n        this.qualifier,\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    if (CommitmentTypeQualifier.compareWithDefault(\"qualifier\", this.qualifier))\n      throw new Error('Member \"qualifier\" was not correctly initialized');\n\n    return {\n      commitmentTypeIdentifier: this.commitmentTypeIdentifier,\n      qualifier: this.qualifier.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}