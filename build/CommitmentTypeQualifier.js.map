{"version":3,"sources":["../src/CommitmentTypeQualifier.js"],"names":["asn1js","CommitmentTypeQualifier","constructor","parameters","commitmentTypeIdentifier","defaultValues","qualifier","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"CommitmentTypeQualifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class CommitmentTypeQualifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CommitmentTypeQualifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description commitmentTypeIdentifier\r\n\t\t */\r\n\t\tthis.commitmentTypeIdentifier = getParametersValue(parameters, \"commitmentTypeIdentifier\", CommitmentTypeQualifier.defaultValues(\"commitmentTypeIdentifier\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description qualifier\r\n\t\t */\r\n\t\tthis.qualifier = getParametersValue(parameters, \"qualifier\", CommitmentTypeQualifier.defaultValues(\"qualifier\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"commitmentTypeIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"qualifier\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CommitmentTypeQualifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"commitmentTypeIdentifier\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"qualifier\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CommitmentTypeQualifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// CommitmentTypeQualifier ::= SEQUENCE {\r\n\t\t//    commitmentTypeIdentifier CommitmentTypeIdentifier,\r\n\t\t//    qualifier ANY DEFINED BY commitmentTypeIdentifier }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [commitmentTypeIdentifier]\r\n\t\t * @property {string} [qualifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.commitmentTypeIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\tname: (names.qualifier || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCommitmentTypeQualifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcommitmentTypeIdentifier: \"commitmentTypeIdentifier\",\r\n\t\t\t\t\tqualifier: \"qualifier\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CommitmentTypeQualifier\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.commitmentTypeIdentifier = asn1.result.commitmentTypeIdentifier.valueBlock.toString();\r\n\t\tthis.qualifier = asn1.result.qualifier;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(CommitmentTypeQualifier.compareWithDefault(\"qualifier\", this.qualifier))\r\n\t\t\tthrow new Error(\"Member \\\"qualifier\\\" was not correctly initialized\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.commitmentTypeIdentifier }),\r\n\t\t\t\tthis.qualifier\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(CommitmentTypeQualifier.compareWithDefault(\"qualifier\", this.qualifier))\r\n\t\t\tthrow new Error(\"Member \\\"qualifier\\\" was not correctly initialized\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\tcommitmentTypeIdentifier: this.commitmentTypeIdentifier,\r\n\t\t\tqualifier: this.qualifier.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}