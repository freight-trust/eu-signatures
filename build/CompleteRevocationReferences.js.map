{"version":3,"sources":["../src/CompleteRevocationReferences.js"],"names":["CompleteRevocationReferences","CompleteRevocationRefs","constructor","parameters","fillValues","cmsSigned","signerIndex","_this","sequence","Promise","resolve","hashAlgorithm","ocspResponses","crlRefs","ocspRefs","then","promises","i","crls","length","push","CrlValidatedID","crl","all","error","reject","OcspResponsesID","ocspResponse","completeRevocationRefs","CrlOcspRef","crlids","CRLListID","ocspids","OcspListID","makeAttribute","Attribute","type","values","toSchema"],"mappings":"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","file":"CompleteRevocationReferences.js","sourcesContent":["import { Attribute } from \"pkijs\";\nimport CompleteRevocationRefs from \"./CompleteRevocationRefs.js\";\nimport CrlValidatedID from \"./CrlValidatedID.js\";\nimport OcspResponsesID from \"./OcspResponsesID.js\";\nimport CrlOcspRef from \"./CrlOcspRef.js\";\nimport CRLListID from \"./CRLListID.js\";\nimport OcspListID from \"./OcspListID.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class CompleteRevocationReferences extends CompleteRevocationRefs {\n  //**********************************************************************************\n  /**\n   * Constructor for CompleteRevocationReferences class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"complete-revocation-references\" for given CMS Signed Data and signer index\n   * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(cmsSigned, signerIndex, parameters) {\n    //region Initial variables\n    const _this = this;\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-1\";\n    let ocspResponses = []; // Array of OCSP Responses\n\n    const crlRefs = []; // CrlValidatedID;\n    const ocspRefs = []; // OcspResponsesID\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"ocspResponses\" in parameters) ocspResponses = parameters.ocspResponses;\n    //endregion\n\n    //region Append references for all CRLs\n    if (\"crls\" in cmsSigned) {\n      sequence = sequence.then(\n        () => {\n          const promises = [];\n\n          for (let i = 0; i < cmsSigned.crls.length; i++) {\n            crlRefs.push(new CrlValidatedID());\n            promises.push(\n              crlRefs[crlRefs.length - 1].fillValues({\n                hashAlgorithm,\n                crl: cmsSigned.crls[i],\n              })\n            );\n          }\n\n          return Promise.all(promises);\n        },\n        (error) => Promise.reject(error)\n      );\n    }\n    //endregion\n\n    //region Append references for all OCSPs\n    if (ocspResponses.length) {\n      sequence = sequence.then(\n        () => {\n          const promises = [];\n\n          for (let i = 0; i < ocspResponses.length; i++) {\n            ocspRefs.push(new OcspResponsesID());\n            promises.push(\n              ocspRefs[ocspRefs.length - 1].fillValues({\n                hashAlgorithm,\n                ocspResponse: ocspResponses[i],\n              })\n            );\n          }\n\n          return Promise.all(promises);\n        },\n        (error) => Promise.reject(error)\n      );\n    }\n    //endregion\n\n    //region Push all values \"in place\"\n    return sequence.then(\n      () => {\n        if (crlRefs.length || ocspRefs.length) {\n          _this.completeRevocationRefs.push(new CrlOcspRef());\n\n          if (crlRefs.length) {\n            _this.completeRevocationRefs[\n              _this.completeRevocationRefs.length - 1\n            ].crlids = new CRLListID({\n              crls: crlRefs,\n            });\n          }\n\n          if (ocspRefs.length) {\n            _this.completeRevocationRefs[\n              _this.completeRevocationRefs.length - 1\n            ].ocspids = new OcspListID({\n              ocspResponses: ocspRefs,\n            });\n          }\n        }\n      },\n      (error) => Promise.reject(error)\n    );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Create \"complete-revocation-references\" CAdES attribute\n   * @param {Object} [parameters] Additional parameters for making attribute\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters = {}) {\n    //region Create and return attribute\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.22\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}