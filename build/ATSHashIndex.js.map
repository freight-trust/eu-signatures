{"version":3,"sources":["../src/ATSHashIndex.js"],"names":["asn1js","ATSHashIndex","constructor","parameters","hashIndAlgorithm","defaultValues","certificatesHashIndex","crlsHashIndex","unsignedAttrsHashIndex","fromSchema","schema","memberName","AlgorithmIdentifier","Error","compareWithDefault","memberValue","algorithmId","length","names","Sequence","name","blockName","value","optional","Repeated","OctetString","asn1","compareSchema","verified","result","Array","from","toSchema","outputArray","push","toJSON","_object","element","fillValues","cmsSigned","signerIndex","_this","sequence","Promise","resolve","hashAlgorithm","crypto","reject","then","toUpperCase","oid","algorithmParams","Null","promises","i","certificates","OtherCertificateFormat","idBlock","tagClass","tagNumber","digest","toBER","all","error","valueHex","crls","OtherRevocationInfoFormat","signerInfos","unsignedAttrs","makeAttribute","Attribute","type","values"],"mappings":"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","file":"ATSHashIndex.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport {\n  getCrypto,\n  getOIDByAlgorithm,\n  AlgorithmIdentifier,\n  OtherCertificateFormat,\n  OtherRevocationInfoFormat,\n  Attribute,\n} from \"pkijs\";\n//**************************************************************************************\nexport default class ATSHashIndex {\n  //**********************************************************************************\n  /**\n   * Constructor for ATSHashIndex class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"hashIndAlgorithm\" in parameters)\n      /**\n       * @type {AlgorithmIdentifier}\n       * @description hashIndAlgorithm\n       */\n      this.hashIndAlgorithm = getParametersValue(\n        parameters,\n        \"hashIndAlgorithm\",\n        ATSHashIndex.defaultValues(\"hashIndAlgorithm\")\n      );\n\n    /**\n     * @type {Array.<OctetString>}\n     * @description certificatesHashIndex\n     */\n    this.certificatesHashIndex = getParametersValue(\n      parameters,\n      \"certificatesHashIndex\",\n      ATSHashIndex.defaultValues(\"certificatesHashIndex\")\n    );\n    /**\n     * @type {Array.<OctetString>}\n     * @description crlsHashIndex\n     */\n    this.crlsHashIndex = getParametersValue(\n      parameters,\n      \"crlsHashIndex\",\n      ATSHashIndex.defaultValues(\"crlsHashIndex\")\n    );\n    /**\n     * @type {Array.<OctetString>}\n     * @description unsignedAttrsHashIndex\n     */\n    this.unsignedAttrsHashIndex = getParametersValue(\n      parameters,\n      \"unsignedAttrsHashIndex\",\n      ATSHashIndex.defaultValues(\"unsignedAttrsHashIndex\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"hashIndAlgorithm\":\n        return new AlgorithmIdentifier();\n      case \"certificatesHashIndex\":\n      case \"crlsHashIndex\":\n      case \"unsignedAttrsHashIndex\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for ATSHashIndex class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"hashIndAlgorithm\":\n        return (\n          AlgorithmIdentifier.compareWithDefault(\n            \"algorithmId\",\n            memberValue.algorithmId\n          ) && \"algorithmParams\" in memberValue === false\n        );\n      case \"certificatesHashIndex\":\n      case \"crlsHashIndex\":\n      case \"unsignedAttrsHashIndex\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for ATSHashIndex class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // ATSHashIndex ::= SEQUENCE {\n    //    hashIndAlgorithm AlgorithmIdentifier DEFAULT {algorithm id-sha256},\n    //    certificatesHashIndex SEQUENCE OF OCTET STRING,\n    //    crlsHashIndex SEQUENCE OF OCTET STRING,\n    //    unsignedAttrsHashIndex SEQUENCE OF OCTET STRING\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [hashIndAlgorithm]\n     * @property {string} [certificatesHashIndex]\n     * @property {string} [crlsHashIndex]\n     * @property {string} [unsignedAttrsHashIndex]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        AlgorithmIdentifier.schema(\n          names.hashIndAlgorithm || {\n            names: {\n              blockName: \"\",\n              optional: true,\n            },\n          }\n        ),\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.certificatesHashIndex || \"\",\n              value: new asn1js.OctetString(),\n            }),\n          ],\n        }),\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.crlsHashIndex || \"\",\n              value: new asn1js.OctetString(),\n            }),\n          ],\n        }),\n        new asn1js.Sequence({\n          value: [\n            new asn1js.Repeated({\n              name: names.unsignedAttrsHashIndex || \"\",\n              value: new asn1js.OctetString(),\n            }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      ATSHashIndex.schema({\n        names: {\n          hashIndAlgorithm: {\n            names: {\n              blockName: \"hashIndAlgorithm\",\n              optional: true,\n            },\n          },\n          certificatesHashIndex: \"certificatesHashIndex\",\n          crlsHashIndex: \"crlsHashIndex\",\n          unsignedAttrsHashIndex: \"unsignedAttrsHashIndex\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for ATSHashIndex\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    //region hashIndAlgorithm\n    if (\"hashIndAlgorithm\" in asn1.result)\n      this.hashIndAlgorithm = new AlgorithmIdentifier({\n        schema: asn1.result.hashIndAlgorithm,\n      });\n    //endregion\n\n    //region certificatesHashIndex\n    this.certificatesHashIndex = Array.from(\n      asn1.result.certificatesHashIndex || []\n    );\n    //endregion\n\n    //region crlsHashIndex\n    this.crlsHashIndex = Array.from(asn1.result.crlsHashIndex || []);\n    //endregion\n\n    //region unsignedAttrsHashIndex\n    this.unsignedAttrsHashIndex = Array.from(\n      asn1.result.unsignedAttrsHashIndex || []\n    );\n    //endregion\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"hashIndAlgorithm\" in this)\n      outputArray.push(this.hashIndAlgorithm.toSchema());\n\n    //region certificatesHashIndex\n    outputArray.push(\n      new asn1js.Sequence({\n        value: Array.from(this.certificatesHashIndex),\n      })\n    );\n    //endregion\n\n    //region crlsHashIndex\n    outputArray.push(\n      new asn1js.Sequence({\n        value: Array.from(this.crlsHashIndex),\n      })\n    );\n    //endregion\n\n    //region unsignedAttrsHashIndex\n    outputArray.push(\n      new asn1js.Sequence({\n        value: Array.from(this.unsignedAttrsHashIndex),\n      })\n    );\n    //endregion\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"hashIndAlgorithm\" in this)\n      _object.hashIndAlgorithm = this.hashIndAlgorithm.toJSON();\n\n    //region certificatesHashIndex\n    _object.certificatesHashIndex = Array.from(\n      this.certificatesHashIndex,\n      (element) => element.toJSON()\n    );\n    //endregion\n\n    //region crlsHashIndex\n    _object.crlsHashIndex = Array.from(this.crlsHashIndex, (element) =>\n      element.toJSON()\n    );\n    //endregion\n\n    //region unsignedAttrsHashIndex\n    _object.unsignedAttrsHashIndex = Array.from(\n      this.unsignedAttrsHashIndex,\n      (element) => element.toJSON()\n    );\n    //endregion\n\n    return _object;\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"ATSHashIndex\" for given CMS Signed Data and signer index\n   * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(cmsSigned, signerIndex, parameters) {\n    //region Initial variables\n    const _this = this;\n\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-256\";\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Fill correct value for \"hashIndAlgorithm\"\n    sequence = sequence.then(() => {\n      if (hashAlgorithm.toUpperCase() !== \"SHA-256\") {\n        const oid = getOIDByAlgorithm({ name: hashAlgorithm });\n        if (oid === \"\")\n          return Promise.reject(\n            `Incorrect hashing algorithm: ${hashAlgorithm}`\n          );\n\n        _this.hashIndAlgorithm = new AlgorithmIdentifier({\n          algorithmId: oid,\n          algorithmParams: new asn1js.Null(),\n        });\n      }\n\n      return Promise.resolve();\n    });\n    //endregion\n\n    //region Create array of indexes for all certificates\n    sequence = sequence\n      .then(\n        () => {\n          const promises = [];\n\n          if (\"certificates\" in cmsSigned === false) return promises;\n\n          //region Prepare \"CertificateChoices\" type from existing values\n          for (let i = 0; i < cmsSigned.certificates.length; i++) {\n            const schema = cmsSigned.certificates[i].toSchema();\n\n            if (cmsSigned.certificates[i] instanceof OtherCertificateFormat) {\n              schema.idBlock.tagClass = 3;\n              schema.idBlock.tagNumber = 3;\n            }\n\n            promises.push(\n              crypto.digest({ name: hashAlgorithm }, schema.toBER(false))\n            );\n          }\n          //endregion\n\n          return Promise.all(promises);\n        },\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          for (let i = 0; i < result.length; i++)\n            _this.certificatesHashIndex.push(\n              new asn1js.OctetString({ valueHex: result[i] })\n            );\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    //region Create array of indexes for all revocation values\n    sequence = sequence\n      .then(\n        () => {\n          const promises = [];\n\n          if (\"crls\" in cmsSigned === false) return promises;\n\n          //region Prepare \"RevocationInfoChoice\" type from existing values\n          for (let i = 0; i < cmsSigned.crls.length; i++) {\n            const schema = cmsSigned.crls[i].toSchema();\n\n            if (cmsSigned.crls[i] instanceof OtherRevocationInfoFormat) {\n              schema.idBlock.tagClass = 3;\n              schema.idBlock.tagNumber = 1;\n            }\n\n            promises.push(\n              crypto.digest({ name: hashAlgorithm }, schema.toBER(false))\n            );\n          }\n          //endregion\n\n          return Promise.all(promises);\n        },\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          for (let i = 0; i < result.length; i++)\n            _this.crlsHashIndex.push(\n              new asn1js.OctetString({ valueHex: result[i] })\n            );\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    //region Create array of indexes for unsigned attributes\n    sequence = sequence\n      .then(\n        () => {\n          const promises = [];\n\n          if (\"unsignedAttrs\" in cmsSigned.signerInfos[signerIndex] === false)\n            return promises;\n\n          //region Prepare \"RevocationInfoChoice\" type from existing values\n          for (\n            let i = 0;\n            i < cmsSigned.signerInfos[signerIndex].unsignedAttrs.length;\n            i++\n          )\n            promises.push(\n              crypto.digest(\n                { name: hashAlgorithm },\n                cmsSigned.signerInfos[signerIndex].unsignedAttrs[i]\n                  .toSchema()\n                  .toBER(false)\n              )\n            );\n          //endregion\n\n          return Promise.all(promises);\n        },\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          for (let i = 0; i < result.length; i++)\n            _this.unsignedAttrsHashIndex.push(\n              new asn1js.OctetString({ valueHex: result[i] })\n            );\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n  /**\n   * Create \"ATSHashIndex\" CAdES attribute\n   * @param {Object} [parameters] Additional parameters for making attribute\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters = {}) {\n    //region Create and return attribute\n    return new Attribute({\n      type: \"0.4.0.1733.2.5\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}