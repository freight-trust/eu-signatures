{"version":3,"sources":["../src/ATSHashIndex.js"],"names":["asn1js","ATSHashIndex","constructor","parameters","hashIndAlgorithm","defaultValues","certificatesHashIndex","crlsHashIndex","unsignedAttrsHashIndex","fromSchema","schema","memberName","AlgorithmIdentifier","Error","compareWithDefault","memberValue","algorithmId","length","names","Sequence","name","blockName","value","optional","Repeated","OctetString","asn1","compareSchema","verified","result","Array","from","toSchema","outputArray","push","toJSON","_object","element","fillValues","cmsSigned","signerIndex","_this","sequence","Promise","resolve","hashAlgorithm","crypto","reject","then","toUpperCase","oid","algorithmParams","Null","promises","i","certificates","OtherCertificateFormat","idBlock","tagClass","tagNumber","digest","toBER","all","error","valueHex","crls","OtherRevocationInfoFormat","signerInfos","unsignedAttrs","makeAttribute","Attribute","type","values"],"mappings":"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","file":"ATSHashIndex.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier, OtherCertificateFormat, OtherRevocationInfoFormat, Attribute } from \"pkijs\";\r\n//**************************************************************************************\r\nexport default class ATSHashIndex\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ATSHashIndex class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"hashIndAlgorithm\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @description hashIndAlgorithm\r\n\t\t\t */\r\n\t\t\tthis.hashIndAlgorithm = getParametersValue(parameters, \"hashIndAlgorithm\", ATSHashIndex.defaultValues(\"hashIndAlgorithm\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Array.<OctetString>}\r\n\t\t * @description certificatesHashIndex\r\n\t\t */\r\n\t\tthis.certificatesHashIndex = getParametersValue(parameters, \"certificatesHashIndex\", ATSHashIndex.defaultValues(\"certificatesHashIndex\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OctetString>}\r\n\t\t * @description crlsHashIndex\r\n\t\t */\r\n\t\tthis.crlsHashIndex = getParametersValue(parameters, \"crlsHashIndex\", ATSHashIndex.defaultValues(\"crlsHashIndex\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OctetString>}\r\n\t\t * @description unsignedAttrsHashIndex\r\n\t\t */\r\n\t\tthis.unsignedAttrsHashIndex = getParametersValue(parameters, \"unsignedAttrsHashIndex\", ATSHashIndex.defaultValues(\"unsignedAttrsHashIndex\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashIndAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"certificatesHashIndex\":\r\n\t\t\tcase \"crlsHashIndex\":\r\n\t\t\tcase \"unsignedAttrsHashIndex\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ATSHashIndex class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashIndAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"certificatesHashIndex\":\r\n\t\t\tcase \"crlsHashIndex\":\r\n\t\t\tcase \"unsignedAttrsHashIndex\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ATSHashIndex class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ATSHashIndex ::= SEQUENCE {\r\n\t\t//    hashIndAlgorithm AlgorithmIdentifier DEFAULT {algorithm id-sha256},\r\n\t\t//    certificatesHashIndex SEQUENCE OF OCTET STRING,\r\n\t\t//    crlsHashIndex SEQUENCE OF OCTET STRING,\r\n\t\t//    unsignedAttrsHashIndex SEQUENCE OF OCTET STRING\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashIndAlgorithm]\r\n\t\t * @property {string} [certificatesHashIndex]\r\n\t\t * @property {string} [crlsHashIndex]\r\n\t\t * @property {string} [unsignedAttrsHashIndex]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashIndAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.certificatesHashIndex || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.crlsHashIndex || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unsignedAttrsHashIndex || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tATSHashIndex.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashIndAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashIndAlgorithm\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertificatesHashIndex: \"certificatesHashIndex\",\r\n\t\t\t\t\tcrlsHashIndex: \"crlsHashIndex\",\r\n\t\t\t\t\tunsignedAttrsHashIndex: \"unsignedAttrsHashIndex\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ATSHashIndex\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t//region hashIndAlgorithm\r\n\t\tif(\"hashIndAlgorithm\" in asn1.result)\r\n\t\t\tthis.hashIndAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashIndAlgorithm });\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region certificatesHashIndex\r\n\t\tthis.certificatesHashIndex = Array.from(asn1.result.certificatesHashIndex || []);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region crlsHashIndex\r\n\t\tthis.crlsHashIndex = Array.from(asn1.result.crlsHashIndex || []);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region unsignedAttrsHashIndex\r\n\t\tthis.unsignedAttrsHashIndex = Array.from(asn1.result.unsignedAttrsHashIndex || []);\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"hashIndAlgorithm\" in this)\r\n\t\t\toutputArray.push(this.hashIndAlgorithm.toSchema());\r\n\t\t\r\n\t\t//region certificatesHashIndex\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificatesHashIndex)\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region crlsHashIndex\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.crlsHashIndex)\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region unsignedAttrsHashIndex\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.unsignedAttrsHashIndex)\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\t\t\r\n\t\tif(\"hashIndAlgorithm\" in this)\r\n\t\t\t_object.hashIndAlgorithm = this.hashIndAlgorithm.toJSON();\r\n\t\t\r\n\t\t//region certificatesHashIndex\r\n\t\t_object.certificatesHashIndex = Array.from(this.certificatesHashIndex, element => element.toJSON());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region crlsHashIndex\r\n\t\t_object.crlsHashIndex = Array.from(this.crlsHashIndex, element => element.toJSON());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region unsignedAttrsHashIndex\r\n\t\t_object.unsignedAttrsHashIndex = Array.from(this.unsignedAttrsHashIndex, element => element.toJSON());\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"ATSHashIndex\" for given CMS Signed Data and signer index\r\n\t * @param {SignedData} cmsSigned CMS Signed Data to make attribute for\r\n\t * @param {number} signerIndex Index of signer to make attribute for\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(cmsSigned, signerIndex, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-256\";\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill correct value for \"hashIndAlgorithm\"\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-256\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\tif(oid === \"\")\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect hashing algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\t_this.hashIndAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: oid,\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create array of indexes for all certificates\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tconst promises = [];\r\n\t\t\t\t\r\n\t\t\t\tif((\"certificates\" in cmsSigned) === false)\r\n\t\t\t\t\treturn promises;\r\n\t\t\t\t\r\n\t\t\t\t//region Prepare \"CertificateChoices\" type from existing values\r\n\t\t\t\tfor(let i = 0; i < cmsSigned.certificates.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst schema = cmsSigned.certificates[i].toSchema();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.certificates[i] instanceof OtherCertificateFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tschema.idBlock.tagNumber = 3;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpromises.push(crypto.digest({ name: hashAlgorithm }, schema.toBER(false)));\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.all(promises);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t\t\t\t_this.certificatesHashIndex.push(new asn1js.OctetString({ valueHex: result[i] }));\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create array of indexes for all revocation values\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tconst promises = [];\r\n\t\t\t\t\r\n\t\t\t\tif((\"crls\" in cmsSigned) === false)\r\n\t\t\t\t\treturn promises;\r\n\t\t\t\t\r\n\t\t\t\t//region Prepare \"RevocationInfoChoice\" type from existing values\r\n\t\t\t\tfor(let i = 0; i < cmsSigned.crls.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst schema = cmsSigned.crls[i].toSchema();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.crls[i] instanceof OtherRevocationInfoFormat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\t\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tpromises.push(crypto.digest({ name: hashAlgorithm }, schema.toBER(false)));\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.all(promises);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t\t\t\t_this.crlsHashIndex.push(new asn1js.OctetString({ valueHex: result[i] }));\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create array of indexes for unsigned attributes\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tconst promises = [];\r\n\t\t\t\t\r\n\t\t\t\tif((\"unsignedAttrs\" in cmsSigned.signerInfos[signerIndex]) === false)\r\n\t\t\t\t\treturn promises;\r\n\t\t\t\t\r\n\t\t\t\t//region Prepare \"RevocationInfoChoice\" type from existing values\r\n\t\t\t\tfor(let i = 0; i < cmsSigned.signerInfos[signerIndex].unsignedAttrs.length; i++)\r\n\t\t\t\t\tpromises.push(crypto.digest({ name: hashAlgorithm }, cmsSigned.signerInfos[signerIndex].unsignedAttrs[i].toSchema().toBER(false)));\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.all(promises);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t\t\t\t_this.unsignedAttrsHashIndex.push(new asn1js.OctetString({ valueHex: result[i] }));\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create \"ATSHashIndex\" CAdES attribute\r\n\t * @param {Object} [parameters] Additional parameters for making attribute\r\n\t * @returns {Attribute}\r\n\t */\r\n\tmakeAttribute(parameters = {})\r\n\t{\r\n\t\t//region Create and return attribute\r\n\t\treturn new Attribute({\r\n\t\t\ttype: \"0.4.0.1733.2.5\",\r\n\t\t\tvalues: [\r\n\t\t\t\tthis.toSchema()\r\n\t\t\t]\r\n\t\t});\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}