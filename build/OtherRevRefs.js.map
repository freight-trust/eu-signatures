{"version":3,"sources":["../src/OtherRevRefs.js"],"names":["asn1js","OtherRevRefs","constructor","parameters","otherRevRefType","defaultValues","otherRevRefs","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"OtherRevRefs.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\nexport default class OtherRevRefs\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherRevRefs class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description otherRevRefType\r\n\t\t */\r\n\t\tthis.otherRevRefType = getParametersValue(parameters, \"otherRevRefType\", OtherRevRefs.defaultValues(\"otherRevRefType\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @description otherRevRefs\r\n\t\t */\r\n\t\tthis.otherRevRefs = getParametersValue(parameters, \"otherRevRefs\", OtherRevRefs.defaultValues(\"otherRevRefs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherRevRefType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherRevRefs\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRevRefs class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherRevRefType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"otherRevRefs\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherRevRefs class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// OtherRevRefType ::= OBJECT IDENTIFIER\r\n\t\t//\r\n\t\t// OtherRevRefs ::= SEQUENCE {\r\n\t\t//    otherRevRefType OtherRevRefType,\r\n\t\t//    otherRevRefs ANY DEFINED BY otherRevRefType\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherRevRefType]\r\n\t\t * @property {string} [otherRevRefs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherRevRefType || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\tname: (names.otherRevRefs || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherRevRefs.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\totherRevRefType: \"otherRevRefType\",\r\n\t\t\t\t\totherRevRefs: \"otherRevRefs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherRevRefs\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherRevRefType = asn1.result.otherRevRefType.valueBlock.toString();\r\n\t\tthis.otherRevRefs = asn1.result.otherRevRefs;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(this.otherRevRefs instanceof asn1js.Any)\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"OtherRevRefs\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherRevRefType }),\r\n\t\t\t\tthis.otherRevRefs\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(this.otherRevRefs instanceof asn1js.Any)\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"OtherRevRefs\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\totherRevRefType: this.otherRevRefType,\r\n\t\t\totherRevRefs: this.otherRevRefs.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}