{"version":3,"sources":["../src/OtherRevRefs.js"],"names":["asn1js","OtherRevRefs","constructor","parameters","otherRevRefType","defaultValues","otherRevRefs","fromSchema","schema","memberName","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;;;AACA;AACe,MAAMC,YAAN,CAAmB;AAChC;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,eAAL,GAAuB,iCACrBD,UADqB,EAErB,iBAFqB,EAGrBF,aAAaI,aAAb,CAA2B,iBAA3B,CAHqB,CAAvB;AAKA;;;;AAIA,SAAKC,YAAL,GAAoB,iCAClBH,UADkB,EAElB,cAFkB,EAGlBF,aAAaI,aAAb,CAA2B,cAA3B,CAHkB,CAApB;AAKA;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOH,aAAP,CAAqBI,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,iBAAL;AACE,eAAO,EAAP;AACF,WAAK,cAAL;AACE,eAAO,IAAIT,OAAOU,GAAX,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,+CAA8CF,UAAW,EADtD,CAAN;AANJ;AAUD;AACD;AACA;;;;;AAKA,SAAOG,kBAAP,CAA0BH,UAA1B,EAAsCI,WAAtC,EAAmD;AACjD,YAAQJ,UAAR;AACE,WAAK,iBAAL;AACE,eAAOI,gBAAgB,EAAvB;AACF,WAAK,cAAL;AACE,eAAOA,uBAAuBb,OAAOU,GAArC;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,+CAA8CF,UAAW,EADtD,CAAN;AANJ;AAUD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcL,aAAa,EAA3B,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAMA,UAAMW,QAAQ,iCAAmBX,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOe,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,aAAO,CACL,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAEH,MAAMF,MAAMV,eAAN,IAAyB,EAAjC,EAA5B,CADK,EAEL,IAAIJ,OAAOU,GAAX,CAAe;AACbM,cAAMF,MAAMR,YAAN,IAAsB;AADf,OAAf,CAFK;AAFkB,KAApB,CAAP;AASD;AACD;AACA;;;;AAIAC,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMY,OAAOpB,OAAOqB,aAAP,CACXb,MADW,EAEXA,MAFW,EAGXP,aAAaO,MAAb,CAAoB;AAClBM,aAAO;AACLV,yBAAiB,iBADZ;AAELE,sBAAc;AAFT;AADW,KAApB,CAHW,CAAb;;AAWA,QAAIc,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAIX,KAAJ,CACJ,sEADI,CAAN;AAGF;;AAEA;AACA,SAAKP,eAAL,GAAuBgB,KAAKG,MAAL,CAAYnB,eAAZ,CAA4BoB,UAA5B,CAAuCC,QAAvC,EAAvB;AACA,SAAKnB,YAAL,GAAoBc,KAAKG,MAAL,CAAYjB,YAAhC;AACA;AACD;AACD;AACA;;;;AAIAoB,aAAW;AACT,QAAI,KAAKpB,YAAL,YAA6BN,OAAOU,GAAxC,EACE,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;;AAEF;AACA,WAAO,IAAIX,OAAOe,QAAX,CAAoB;AACzBG,aAAO,CACL,IAAIlB,OAAOmB,gBAAX,CAA4B,EAAED,OAAO,KAAKd,eAAd,EAA5B,CADK,EAEL,KAAKE,YAFA;AADkB,KAApB,CAAP;AAMA;AACD;AACD;AACA;;;;AAIAqB,WAAS;AACP,QAAI,KAAKrB,YAAL,YAA6BN,OAAOU,GAAxC,EACE,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;;AAEF,WAAO;AACLP,uBAAiB,KAAKA,eADjB;AAELE,oBAAc,KAAKA,YAAL,CAAkBqB,MAAlB;AAFT,KAAP;AAID;AACD;AAjKgC;kBAAb1B,Y,EAmKrB","file":"OtherRevRefs.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\nexport default class OtherRevRefs {\n  //**********************************************************************************\n  /**\n   * Constructor for OtherRevRefs class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description otherRevRefType\n     */\n    this.otherRevRefType = getParametersValue(\n      parameters,\n      \"otherRevRefType\",\n      OtherRevRefs.defaultValues(\"otherRevRefType\")\n    );\n    /**\n     * @type {*}\n     * @description otherRevRefs\n     */\n    this.otherRevRefs = getParametersValue(\n      parameters,\n      \"otherRevRefs\",\n      OtherRevRefs.defaultValues(\"otherRevRefs\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"otherRevRefType\":\n        return \"\";\n      case \"otherRevRefs\":\n        return new asn1js.Any();\n      default:\n        throw new Error(\n          `Invalid member name for OtherRevRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"otherRevRefType\":\n        return memberValue === \"\";\n      case \"otherRevRefs\":\n        return memberValue instanceof asn1js.Any;\n      default:\n        throw new Error(\n          `Invalid member name for OtherRevRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // OtherRevRefType ::= OBJECT IDENTIFIER\n    //\n    // OtherRevRefs ::= SEQUENCE {\n    //    otherRevRefType OtherRevRefType,\n    //    otherRevRefs ANY DEFINED BY otherRevRefType\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [otherRevRefType]\n     * @property {string} [otherRevRefs]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.ObjectIdentifier({ name: names.otherRevRefType || \"\" }),\n        new asn1js.Any({\n          name: names.otherRevRefs || \"\",\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OtherRevRefs.schema({\n        names: {\n          otherRevRefType: \"otherRevRefType\",\n          otherRevRefs: \"otherRevRefs\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OtherRevRefs\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.otherRevRefType = asn1.result.otherRevRefType.valueBlock.toString();\n    this.otherRevRefs = asn1.result.otherRevRefs;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    if (this.otherRevRefs instanceof asn1js.Any)\n      throw new Error('Incorrectly initialized \"OtherRevRefs\" class');\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.ObjectIdentifier({ value: this.otherRevRefType }),\n        this.otherRevRefs,\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    if (this.otherRevRefs instanceof asn1js.Any)\n      throw new Error('Incorrectly initialized \"OtherRevRefs\" class');\n\n    return {\n      otherRevRefType: this.otherRevRefType,\n      otherRevRefs: this.otherRevRefs.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}