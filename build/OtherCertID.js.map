{"version":3,"sources":["../src/OtherCertID.js"],"names":["asn1js","OtherCertID","constructor","parameters","otherCertHash","defaultValues","issuerSerial","fromSchema","schema","memberName","OctetString","IssuerSerial","Error","compareWithDefault","memberValue","isEqual","issuer","serialNumber","names","Sequence","name","blockName","value","Choice","otherCertHashSimple","OtherHashAlgAndValue","otherCertHashObject","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","fillValues","_this","sequence","Promise","resolve","hashAlgorithm","certificate","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","valueBlock","valueHex","hashValue","GeneralNames","GeneralName","type"],"mappings":"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","file":"OtherCertID.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport {\n  getCrypto,\n  getOIDByAlgorithm,\n  AlgorithmIdentifier,\n  GeneralNames,\n  GeneralName,\n} from \"pkijs\";\nimport IssuerSerial from \"./IssuerSerial.js\";\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\n//**************************************************************************************\nexport default class OtherCertID {\n  //**********************************************************************************\n  /**\n   * Constructor for OtherCertID class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {OctetString|OtherHashAlgAndValue}\n     * @description otherCertHash\n     */\n    this.otherCertHash = getParametersValue(\n      parameters,\n      \"otherCertHash\",\n      OtherCertID.defaultValues(\"otherCertHash\")\n    );\n    /**\n     * @type {IssuerSerial}\n     * @description issuerSerial\n     */\n    this.issuerSerial = getParametersValue(\n      parameters,\n      \"issuerSerial\",\n      OtherCertID.defaultValues(\"issuerSerial\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"otherCertHash\":\n        return new asn1js.OctetString();\n      case \"issuerSerial\":\n        return new IssuerSerial();\n      default:\n        throw new Error(\n          `Invalid member name for OtherCertID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"otherCertHash\":\n        return memberValue.isEqual(OtherCertID.defaultValues(memberName));\n      case \"issuerSerial\":\n        return (\n          IssuerSerial.compareWithDefault(\"issuer\", memberValue.issuer) &&\n          IssuerSerial.compareWithDefault(\n            \"serialNumber\",\n            memberValue.serialNumber\n          )\n        );\n      default:\n        throw new Error(\n          `Invalid member name for OtherCertID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // OtherCertID ::= SEQUENCE {\n    //    otherCertHash OtherHash,\n    //    issuerSerial IssuerSerial OPTIONAL }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [otherCertHashSimple]\n     * @property {string} [otherCertHashObject]\n     * @property {string} [issuerSerial]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.Choice({\n          value: [\n            new asn1js.OctetString({\n              name: names.otherCertHashSimple || \"otherCertHash\",\n            }),\n            OtherHashAlgAndValue.schema(\n              names.otherCertHashObject || {\n                names: {\n                  blockName: \"otherCertHash\",\n                },\n              }\n            ),\n          ],\n        }),\n        IssuerSerial.schema(\n          names.issuerSerial || {\n            names: {\n              blockName: \"OtherCertID.issuerSerial\",\n              optional: true,\n            },\n          }\n        ),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OtherCertID.schema({\n        names: {\n          otherCertHashObject: {\n            names: {\n              blockName: \"otherCertHash\",\n            },\n          },\n          otherCertHashSimple: \"otherCertHash\",\n          issuerSerial: {\n            names: {\n              blockName: \"issuerSerial\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OtherCertID\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (asn1.result.otherCertHash instanceof asn1js.OctetString)\n      this.otherCertHash = asn1.result.otherCertHash;\n    else\n      this.otherCertHash = new OtherHashAlgAndValue({\n        schema: asn1.result.otherCertHash,\n      });\n\n    this.issuerSerial = new IssuerSerial({ schema: asn1.result.issuerSerial });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (this.otherCertHash instanceof asn1js.OctetString)\n      outputArray.push(this.otherCertHash);\n    else outputArray.push(this.otherCertHash.toSchema());\n\n    outputArray.push(this.issuerSerial.toSchema());\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      otherCertHash: this.otherCertHash.toJSON(),\n      issuerSerial: this.issuerSerial.toJSON(),\n    };\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"OtherCertID\" for given CMS Signed Data and signer index\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    const _this = this;\n\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-1\";\n\n    let certificate;\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"certificate\" in parameters) certificate = parameters.certificate;\n    // in_window.org.pkijs.simpl.CERT\n    else\n      return Promise.reject(\n        'Parameter \"certificate\" is mandatory for making \"OtherCertID\"'\n      );\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Fill correct value for \"hashIndAlgorithm\"\n    sequence = sequence.then(() => {\n      if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n        const oid = getOIDByAlgorithm({ name: hashAlgorithm });\n        if (oid === \"\")\n          return Promise.reject(\n            `Incorrect hashing algorithm: ${hashAlgorithm}`\n          );\n\n        _this.otherCertHash = new OtherHashAlgAndValue({\n          hashAlgorithm: new AlgorithmIdentifier({\n            algorithmId: oid,\n            algorithmParams: new asn1js.Null(),\n          }),\n        });\n      } else _this.otherCertHash = new asn1js.OctetString();\n\n      return Promise.resolve();\n    });\n    //endregion\n\n    //region Create all remaining attributes\n    sequence = sequence\n      .then(\n        () =>\n          crypto.digest(\n            { name: hashAlgorithm },\n            certificate.toSchema().toBER(false)\n          ),\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          if (_this.otherCertHash instanceof asn1js.OctetString)\n            _this.otherCertHash.valueBlock.valueHex = result;\n          else\n            _this.otherCertHash.hashValue = new asn1js.OctetString({\n              valueHex: result,\n            });\n\n          _this.issuerSerial = new IssuerSerial({\n            issuer: new GeneralNames({\n              names: [\n                new GeneralName({\n                  type: 4,\n                  value: certificate.issuer,\n                }),\n              ],\n            }),\n            serialNumber: certificate.serialNumber,\n          });\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}