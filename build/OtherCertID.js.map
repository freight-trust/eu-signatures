{"version":3,"sources":["../src/OtherCertID.js"],"names":["asn1js","OtherCertID","constructor","parameters","otherCertHash","defaultValues","issuerSerial","fromSchema","schema","memberName","OctetString","IssuerSerial","Error","compareWithDefault","memberValue","isEqual","issuer","serialNumber","names","Sequence","name","blockName","value","Choice","otherCertHashSimple","OtherHashAlgAndValue","otherCertHashObject","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","fillValues","_this","sequence","Promise","resolve","hashAlgorithm","certificate","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","valueBlock","valueHex","hashValue","GeneralNames","GeneralName","type"],"mappings":"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","file":"OtherCertID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier, GeneralNames, GeneralName } from \"pkijs\";\r\nimport IssuerSerial from \"./IssuerSerial.js\";\r\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\r\n//**************************************************************************************\r\nexport default class OtherCertID\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherCertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString|OtherHashAlgAndValue}\r\n\t\t * @description otherCertHash\r\n\t\t */\r\n\t\tthis.otherCertHash = getParametersValue(parameters, \"otherCertHash\", OtherCertID.defaultValues(\"otherCertHash\"));\r\n\t\t/**\r\n\t\t * @type {IssuerSerial}\r\n\t\t * @description issuerSerial\r\n\t\t */\r\n\t\tthis.issuerSerial = getParametersValue(parameters, \"issuerSerial\", OtherCertID.defaultValues(\"issuerSerial\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"issuerSerial\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertHash\":\r\n\t\t\t\treturn (memberValue.isEqual(OtherCertID.defaultValues(memberName)));\r\n\t\t\tcase \"issuerSerial\":\r\n\t\t\t\treturn (IssuerSerial.compareWithDefault(\"issuer\", memberValue.issuer) &&\r\n\t\t\t\t\t\tIssuerSerial.compareWithDefault(\"serialNumber\", memberValue.serialNumber));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// OtherCertID ::= SEQUENCE {\r\n\t\t//    otherCertHash OtherHash,\r\n\t\t//    issuerSerial IssuerSerial OPTIONAL }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherCertHashSimple]\r\n\t\t * @property {string} [otherCertHashObject]\r\n\t\t * @property {string} [issuerSerial]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.otherCertHashSimple || \"otherCertHash\") }),\r\n\t\t\t\t\t\tOtherHashAlgAndValue.schema(names.otherCertHashObject || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"otherCertHash\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tIssuerSerial.schema(names.issuerSerial || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"OtherCertID.issuerSerial\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\totherCertHashObject: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherCertHash\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\totherCertHashSimple: \"otherCertHash\",\r\n\t\t\t\t\tissuerSerial: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuerSerial\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherCertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(asn1.result.otherCertHash instanceof asn1js.OctetString)\r\n\t\t\tthis.otherCertHash = asn1.result.otherCertHash;\r\n\t\telse\r\n\t\t\tthis.otherCertHash = new OtherHashAlgAndValue({ schema: asn1.result.otherCertHash });\r\n\t\t\r\n\t\tthis.issuerSerial = new IssuerSerial({ schema: asn1.result.issuerSerial });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.otherCertHash instanceof asn1js.OctetString)\r\n\t\t\toutputArray.push(this.otherCertHash);\r\n\t\telse\r\n\t\t\toutputArray.push(this.otherCertHash.toSchema());\r\n\t\t\r\n\t\toutputArray.push(this.issuerSerial.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\totherCertHash: this.otherCertHash.toJSON(),\r\n\t\t\tissuerSerial: this.issuerSerial.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"OtherCertID\" for given CMS Signed Data and signer index\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tlet certificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t\r\n\t\tif(\"certificate\" in parameters)\r\n\t\t\tcertificate = parameters.certificate; // in_window.org.pkijs.simpl.CERT\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"certificate\\\" is mandatory for making \\\"OtherCertID\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill correct value for \"hashIndAlgorithm\"\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\tif(oid === \"\")\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect hashing algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\t_this.otherCertHash = new OtherHashAlgAndValue({\r\n\t\t\t\t\t\thashAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oid,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t\t_this.otherCertHash = new asn1js.OctetString();\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all remaining attributes\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => crypto.digest({ name: hashAlgorithm }, certificate.toSchema().toBER(false)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tif(_this.otherCertHash instanceof asn1js.OctetString)\r\n\t\t\t\t\t_this.otherCertHash.valueBlock.valueHex = result;\r\n\t\t\t\telse\r\n\t\t\t\t\t_this.otherCertHash.hashValue = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\r\n\t\t\t\t_this.issuerSerial = new IssuerSerial({\r\n\t\t\t\t\tissuer: new GeneralNames({\r\n\t\t\t\t\t\tnames: [\r\n\t\t\t\t\t\t\tnew GeneralName({\r\n\t\t\t\t\t\t\t\ttype: 4,\r\n\t\t\t\t\t\t\t\tvalue: certificate.issuer\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tserialNumber: certificate.serialNumber\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}