{"version":3,"sources":["../src/OcspResponsesID.js"],"names":["asn1js","OcspResponsesID","constructor","parameters","ocspIdentifier","defaultValues","ocspRepHash","fromSchema","schema","memberName","OcspIdentifier","Any","Error","compareWithDefault","memberValue","ocspResponderID","producedAt","names","Sequence","name","blockName","optional","value","Choice","OctetString","ocspRepHashSimple","OtherHashAlgAndValue","ocspRepHashComplex","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","sequence","Promise","resolve","hashAlgorithm","ocspResponse","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","hashValue","valueHex"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;AACA;;;;AACA;;;;;;;;AACA;AACe,MAAMC,eAAN,CACf;AACC;AACA;;;;;AAKAC,aAAYC,aAAa,EAAzB,EACA;AACC;AACA;;;;AAIA,OAAKC,cAAL,GAAsB,iCAAmBD,UAAnB,EAA+B,gBAA/B,EAAiDF,gBAAgBI,aAAhB,CAA8B,gBAA9B,CAAjD,CAAtB;;AAEA,MAAG,iBAAiBF,UAApB;AACC;;;;AAIA,QAAKG,WAAL,GAAmB,iCAAmBH,UAAnB,EAA+B,aAA/B,EAA8CF,gBAAgBI,aAAhB,CAA8B,aAA9B,CAA9C,CAAnB;AACD;;AAEA;AACA,MAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,WAAWK,MAA3B;AACD;AACA;AACD;AACA;;;;AAIA,QAAOH,aAAP,CAAqBI,UAArB,EACA;AACC,UAAOA,UAAP;AAEC,QAAK,gBAAL;AACC,WAAO,IAAIC,wBAAJ,EAAP;AACD,QAAK,aAAL;AACC,WAAO,IAAIV,OAAOW,GAAX,EAAP;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,kDAAiDH,UAAW,EAAvE,CAAN;AAPF;AASA;AACD;AACA;;;;;AAKA,QAAOI,kBAAP,CAA0BJ,UAA1B,EAAsCK,WAAtC,EACA;AACC,UAAOL,UAAP;AAEC,QAAK,gBAAL;AACC,WAASC,yBAAeG,kBAAf,CAAkC,iBAAlC,EAAqDC,YAAYC,eAAjE,CAAD,IACLL,yBAAeG,kBAAf,CAAkC,YAAlC,EAAgDC,YAAYE,UAA5D,CADH;AAED,QAAK,aAAL;AACC,WAAQF,uBAAuBd,OAAOW,GAAtC;AACD;AACC,UAAM,IAAIC,KAAJ,CAAW,kDAAiDH,UAAW,EAAvE,CAAN;AARF;AAUA;AACD;AACA;;;;;AAKA,QAAOD,MAAP,CAAcL,aAAa,EAA3B,EACA;AACC;AACA;AACA;AACA;;AAEA;;;;;;;AAOA,QAAMc,QAAQ,iCAAmBd,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,SAAQ,IAAIH,OAAOkB,QAAX,CAAoB;AAC3BC,SAAOF,MAAMG,SAAN,IAAmB,EADC;AAE3BC,aAAWJ,MAAMI,QAAN,IAAkB,KAFF;AAG3BC,UAAO,CACNZ,yBAAeF,MAAf,CAAsBS,MAAMb,cAAN,IAAwB;AAC7Ca,WAAO;AACNG,gBAAW;AADL;AADsC,IAA9C,CADM,EAMN,IAAIpB,OAAOuB,MAAX,CAAkB;AACjBF,cAAU,IADO;AAEjBC,WAAO,CACN,IAAItB,OAAOwB,WAAX,CAAuB,EAAEL,MAAOF,MAAMQ,iBAAN,IAA2B,EAApC,EAAvB,CADM,EAENC,+BAAqBlB,MAArB,CAA4BS,MAAMU,kBAAN,IAA4B;AACvDV,YAAO;AACNG,iBAAW;AADL;AADgD,KAAxD,CAFM;AAFU,IAAlB,CANM;AAHoB,GAApB,CAAR;AAsBA;AACD;AACA;;;;AAIAb,YAAWC,MAAX,EACA;AACC;AACA,QAAMoB,OAAO5B,OAAO6B,aAAP,CAAqBrB,MAArB,EACZA,MADY,EAEZP,gBAAgBO,MAAhB,CAAuB;AACtBS,UAAO;AACNb,oBAAgB;AACfa,YAAO;AACNG,iBAAW;AADL;AADQ,KADV;AAMNK,uBAAmB,aANb;AAONE,wBAAoB;AACnBV,YAAO;AACNG,iBAAW;AADL;AADY;AAPd;AADe,GAAvB,CAFY,CAAb;;AAmBA,MAAGQ,KAAKE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIlB,KAAJ,CAAU,yEAAV,CAAN;AACD;;AAEA;AACA,OAAKR,cAAL,GAAsB,IAAIM,wBAAJ,CAAmB,EAAEF,QAAQoB,KAAKG,MAAL,CAAY3B,cAAtB,EAAnB,CAAtB;;AAEA,MAAG,iBAAiBwB,KAAKG,MAAzB,EACA;AACC,OAAGH,KAAKG,MAAL,CAAYzB,WAAZ,YAAmCN,OAAOwB,WAA7C,EACC,KAAKlB,WAAL,GAAmBsB,KAAKG,MAAL,CAAYzB,WAA/B,CADD,KAGC,KAAKA,WAAL,GAAmB,IAAIoB,8BAAJ,CAAyB,EAAElB,QAAQoB,KAAKG,MAAL,CAAYzB,WAAtB,EAAzB,CAAnB;AACD;AACD;AACA;AACD;AACA;;;;AAIA0B,YACA;AACC;AACA,QAAMC,cAAc,CACnB,KAAK7B,cAAL,CAAoB4B,QAApB,EADmB,CAApB;;AAIA,MAAG,iBAAiB,IAApB,EACA;AACC,OAAG,KAAK1B,WAAL,YAA4BN,OAAOwB,WAAtC,EACCS,YAAYC,IAAZ,CAAiB,KAAK5B,WAAtB,EADD,KAGC2B,YAAYC,IAAZ,CAAiB,KAAK5B,WAAL,CAAiB0B,QAAjB,EAAjB;AACD;AACD;;AAEA;AACA,SAAQ,IAAIhC,OAAOkB,QAAX,CAAoB;AAC3BI,UAAOW;AADoB,GAApB,CAAR;AAGA;AACA;AACD;AACA;;;;AAIAE,UACA;AACC,QAAMC,UAAU;AACfhC,mBAAgB,KAAKA,cAAL,CAAoB+B,MAApB;AADD,GAAhB;;AAIA,MAAG,iBAAiB,IAApB,EACCC,QAAQ9B,WAAR,GAAsB,KAAKA,WAAL,CAAiB6B,MAAjB,EAAtB;;AAED,SAAOC,OAAP;AACA;AACD;AACA;;;;;AAKAC,YAAWlC,UAAX,EACA;AACC;AACA,MAAImC,WAAWC,QAAQC,OAAR,EAAf;;AAEA,MAAIC,gBAAgB,OAApB;;AAEA,MAAIC,YAAJ;AACA;;AAEA;AACA,MAAG,mBAAmBvC,UAAtB,EACCsC,gBAAgBtC,WAAWsC,aAA3B;;AAED,MAAG,kBAAkBtC,UAArB,EACCuC,eAAevC,WAAWuC,YAA1B,CADD,CACyC;AADzC,OAGC,OAAOH,QAAQI,MAAR,CAAe,wEAAf,CAAP;AACD;;AAEA;AACA,QAAMC,SAAS,uBAAf;AACA,MAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAOL,QAAQI,MAAR,CAAe,mCAAf,CAAP;AACD;;AAEA;AACAL,aAAWA,SAASO,IAAT,CACV,MAAM;AACL,OAAGJ,cAAcK,WAAd,OAAgC,OAAnC,EACA;AACC,UAAMC,MAAM,8BAAkB,EAAE5B,MAAMsB,aAAR,EAAlB,CAAZ;AACA,QAAGM,QAAQ,EAAX,EACC,OAAOR,QAAQI,MAAR,CAAgB,gCAA+BF,aAAc,EAA7D,CAAP;;AAED,SAAKnC,WAAL,GAAmB,IAAIoB,8BAAJ,CAAyB;AAC3Ce,oBAAe,IAAIO,0BAAJ,CAAwB;AACtCC,mBAAaF,GADyB;AAEtCG,uBAAiB,IAAIlD,OAAOmD,IAAX;AAFqB,MAAxB;AAD4B,KAAzB,CAAnB;AAMA;;AAED,UAAOZ,QAAQC,OAAR,EAAP;AACA,GAjBS,CAAX;AAmBA;;AAEA;AACAF,aAAWA,SAASO,IAAT,CACV,MAAMD,OAAOQ,MAAP,CAAc,EAAEjC,MAAMsB,aAAR,EAAd,EAAuCC,aAAaV,QAAb,GAAwBqB,KAAxB,CAA8B,KAA9B,CAAvC,CADI,EAEVC,SAASf,QAAQI,MAAR,CAAeW,KAAf,CAFC,EAGTT,IAHS,CAIVd,UAAU;AACT,OAAG,KAAKzB,WAAL,YAA4BoB,8BAA/B,EACC,KAAKpB,WAAL,CAAiBiD,SAAjB,GAA6B,IAAIvD,OAAOwB,WAAX,CAAuB,EAAEgC,UAAUzB,MAAZ,EAAvB,CAA7B,CADD,KAGC,KAAKzB,WAAL,GAAmB,IAAIN,OAAOwB,WAAX,CAAuB,EAAEgC,UAAUzB,MAAZ,EAAvB,CAAnB;;AAED,QAAK3B,cAAL,GAAsB,IAAIM,wBAAJ,EAAtB;AACA,QAAKN,cAAL,CAAoBiC,UAApB,CAA+B;AAC9BK;AAD8B,IAA/B;AAGA,GAdS,EAeVY,SAASf,QAAQI,MAAR,CAAeW,KAAf,CAfC,CAAX;AAiBA;;AAEA,SAAOhB,QAAP;AACA;AACD;AAhRD;kBADqBrC,e,EAmRrB","file":"OcspResponsesID.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier } from \"pkijs\";\r\nimport OcspIdentifier from \"./OcspIdentifier.js\";\r\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\r\n//**************************************************************************************\r\nexport default class OcspResponsesID\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OcspResponsesID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OcspIdentifier}\r\n\t\t * @description ocspIdentifier\r\n\t\t */\r\n\t\tthis.ocspIdentifier = getParametersValue(parameters, \"ocspIdentifier\", OcspResponsesID.defaultValues(\"ocspIdentifier\"));\r\n\t\t\r\n\t\tif(\"ocspRepHash\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString|OtherHashAlgAndValue|Any}\r\n\t\t\t * @description ocspRepHash\r\n\t\t\t */\r\n\t\t\tthis.ocspRepHash = getParametersValue(parameters, \"ocspRepHash\", OcspResponsesID.defaultValues(\"ocspRepHash\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"ocspIdentifier\":\r\n\t\t\t\treturn new OcspIdentifier();\r\n\t\t\tcase \"ocspRepHash\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OcspResponsesID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"ocspIdentifier\":\r\n\t\t\t\treturn ((OcspIdentifier.compareWithDefault(\"ocspResponderID\", memberValue.ocspResponderID)) &&\r\n\t\t\t\t\t\t(OcspIdentifier.compareWithDefault(\"producedAt\", memberValue.producedAt)));\r\n\t\t\tcase \"ocspRepHash\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OcspResponsesID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t//OcspResponsesID ::= SEQUENCE {\r\n\t\t//    ocspIdentifier OcspIdentifier,\r\n\t\t//    ocspRepHash OtherHash OPTIONAL\r\n\t\t//}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [ocspIdentifier]\r\n\t\t * @property {string} [ocspRepHashSimple]\r\n\t\t * @property {string} [ocspRepHashComplex]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tOcspIdentifier.schema(names.ocspIdentifier || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.ocspRepHashSimple || \"\") }),\r\n\t\t\t\t\t\tOtherHashAlgAndValue.schema(names.ocspRepHashComplex || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOcspResponsesID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tocspIdentifier: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"ocspIdentifier\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tocspRepHashSimple: \"ocspRepHash\",\r\n\t\t\t\t\tocspRepHashComplex: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"ocspRepHash\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OcspResponsesID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.ocspIdentifier = new OcspIdentifier({ schema: asn1.result.ocspIdentifier });\r\n\t\t\r\n\t\tif(\"ocspRepHash\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.ocspRepHash instanceof asn1js.OctetString)\r\n\t\t\t\tthis.ocspRepHash = asn1.result.ocspRepHash;\r\n\t\t\telse\r\n\t\t\t\tthis.ocspRepHash = new OtherHashAlgAndValue({ schema: asn1.result.ocspRepHash });\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.ocspIdentifier.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"ocspRepHash\" in this)\r\n\t\t{\r\n\t\t\tif(this.ocspRepHash instanceof asn1js.OctetString)\r\n\t\t\t\toutputArray.push(this.ocspRepHash);\r\n\t\t\telse\r\n\t\t\t\toutputArray.push(this.ocspRepHash.toSchema());\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tocspIdentifier: this.ocspIdentifier.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"ocspRepHash\" in this)\r\n\t\t\t_object.ocspRepHash = this.ocspRepHash.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Creates \"OcspResponsesID\" for given CMS Signed Data and signer index\r\n\t * @param {Object} parameters Additional parameters for making attribute\r\n\t * @returns {Promise}\r\n\t */\r\n\tfillValues(parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet hashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tlet ocspResponse;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif(\"hashAlgorithm\" in parameters)\r\n\t\t\thashAlgorithm = parameters.hashAlgorithm;\r\n\t\t\r\n\t\tif(\"ocspResponse\" in parameters)\r\n\t\t\tocspResponse = parameters.ocspResponse; // in_window.org.pkijs.simpl.OCSP_RESPONSE\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"ocspResponse\\\" is mandatory for making \\\"OcspResponsesID\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill correct value for \"hashIndAlgorithm\"\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => {\r\n\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t{\r\n\t\t\t\t\tconst oid = getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\tif(oid === \"\")\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect hashing algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.ocspRepHash = new OtherHashAlgAndValue({\r\n\t\t\t\t\t\thashAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: oid,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all remaining attributes\r\n\t\tsequence = sequence.then(\r\n\t\t\t() => crypto.digest({ name: hashAlgorithm }, ocspResponse.toSchema().toBER(false)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t).then(\r\n\t\t\tresult => {\r\n\t\t\t\tif(this.ocspRepHash instanceof OtherHashAlgAndValue)\r\n\t\t\t\t\tthis.ocspRepHash.hashValue = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\telse\r\n\t\t\t\t\tthis.ocspRepHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\t\r\n\t\t\t\tthis.ocspIdentifier = new OcspIdentifier();\r\n\t\t\t\tthis.ocspIdentifier.fillValues({\r\n\t\t\t\t\tocspResponse\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}