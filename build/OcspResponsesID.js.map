{"version":3,"sources":["../src/OcspResponsesID.js"],"names":["asn1js","OcspResponsesID","constructor","parameters","ocspIdentifier","defaultValues","ocspRepHash","fromSchema","schema","memberName","OcspIdentifier","Any","Error","compareWithDefault","memberValue","ocspResponderID","producedAt","names","Sequence","name","blockName","optional","value","Choice","OctetString","ocspRepHashSimple","OtherHashAlgAndValue","ocspRepHashComplex","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","fillValues","sequence","Promise","resolve","hashAlgorithm","ocspResponse","reject","crypto","then","toUpperCase","oid","AlgorithmIdentifier","algorithmId","algorithmParams","Null","digest","toBER","error","hashValue","valueHex"],"mappings":"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","file":"OcspResponsesID.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { getCrypto, getOIDByAlgorithm, AlgorithmIdentifier } from \"pkijs\";\nimport OcspIdentifier from \"./OcspIdentifier.js\";\nimport OtherHashAlgAndValue from \"./OtherHashAlgAndValue.js\";\n//**************************************************************************************\nexport default class OcspResponsesID {\n  //**********************************************************************************\n  /**\n   * Constructor for OcspResponsesID class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {OcspIdentifier}\n     * @description ocspIdentifier\n     */\n    this.ocspIdentifier = getParametersValue(\n      parameters,\n      \"ocspIdentifier\",\n      OcspResponsesID.defaultValues(\"ocspIdentifier\")\n    );\n\n    if (\"ocspRepHash\" in parameters)\n      /**\n       * @type {OctetString|OtherHashAlgAndValue|Any}\n       * @description ocspRepHash\n       */\n      this.ocspRepHash = getParametersValue(\n        parameters,\n        \"ocspRepHash\",\n        OcspResponsesID.defaultValues(\"ocspRepHash\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"ocspIdentifier\":\n        return new OcspIdentifier();\n      case \"ocspRepHash\":\n        return new asn1js.Any();\n      default:\n        throw new Error(\n          `Invalid member name for OcspResponsesID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"ocspIdentifier\":\n        return (\n          OcspIdentifier.compareWithDefault(\n            \"ocspResponderID\",\n            memberValue.ocspResponderID\n          ) &&\n          OcspIdentifier.compareWithDefault(\n            \"producedAt\",\n            memberValue.producedAt\n          )\n        );\n      case \"ocspRepHash\":\n        return memberValue instanceof asn1js.Any;\n      default:\n        throw new Error(\n          `Invalid member name for OcspResponsesID class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    //OcspResponsesID ::= SEQUENCE {\n    //    ocspIdentifier OcspIdentifier,\n    //    ocspRepHash OtherHash OPTIONAL\n    //}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [ocspIdentifier]\n     * @property {string} [ocspRepHashSimple]\n     * @property {string} [ocspRepHashComplex]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        OcspIdentifier.schema(\n          names.ocspIdentifier || {\n            names: {\n              blockName: \"\",\n            },\n          }\n        ),\n        new asn1js.Choice({\n          optional: true,\n          value: [\n            new asn1js.OctetString({ name: names.ocspRepHashSimple || \"\" }),\n            OtherHashAlgAndValue.schema(\n              names.ocspRepHashComplex || {\n                names: {\n                  blockName: \"\",\n                },\n              }\n            ),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OcspResponsesID.schema({\n        names: {\n          ocspIdentifier: {\n            names: {\n              blockName: \"ocspIdentifier\",\n            },\n          },\n          ocspRepHashSimple: \"ocspRepHash\",\n          ocspRepHashComplex: {\n            names: {\n              blockName: \"ocspRepHash\",\n            },\n          },\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OcspResponsesID\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.ocspIdentifier = new OcspIdentifier({\n      schema: asn1.result.ocspIdentifier,\n    });\n\n    if (\"ocspRepHash\" in asn1.result) {\n      if (asn1.result.ocspRepHash instanceof asn1js.OctetString)\n        this.ocspRepHash = asn1.result.ocspRepHash;\n      else\n        this.ocspRepHash = new OtherHashAlgAndValue({\n          schema: asn1.result.ocspRepHash,\n        });\n    }\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [this.ocspIdentifier.toSchema()];\n\n    if (\"ocspRepHash\" in this) {\n      if (this.ocspRepHash instanceof asn1js.OctetString)\n        outputArray.push(this.ocspRepHash);\n      else outputArray.push(this.ocspRepHash.toSchema());\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {\n      ocspIdentifier: this.ocspIdentifier.toJSON(),\n    };\n\n    if (\"ocspRepHash\" in this) _object.ocspRepHash = this.ocspRepHash.toJSON();\n\n    return _object;\n  }\n  //**********************************************************************************\n  /**\n   * Creates \"OcspResponsesID\" for given CMS Signed Data and signer index\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    let sequence = Promise.resolve();\n\n    let hashAlgorithm = \"SHA-1\";\n\n    let ocspResponse;\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n\n    if (\"ocspResponse\" in parameters) ocspResponse = parameters.ocspResponse;\n    // in_window.org.pkijs.simpl.OCSP_RESPONSE\n    else\n      return Promise.reject(\n        'Parameter \"ocspResponse\" is mandatory for making \"OcspResponsesID\"'\n      );\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Fill correct value for \"hashIndAlgorithm\"\n    sequence = sequence.then(() => {\n      if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\n        const oid = getOIDByAlgorithm({ name: hashAlgorithm });\n        if (oid === \"\")\n          return Promise.reject(\n            `Incorrect hashing algorithm: ${hashAlgorithm}`\n          );\n\n        this.ocspRepHash = new OtherHashAlgAndValue({\n          hashAlgorithm: new AlgorithmIdentifier({\n            algorithmId: oid,\n            algorithmParams: new asn1js.Null(),\n          }),\n        });\n      }\n\n      return Promise.resolve();\n    });\n    //endregion\n\n    //region Create all remaining attributes\n    sequence = sequence\n      .then(\n        () =>\n          crypto.digest(\n            { name: hashAlgorithm },\n            ocspResponse.toSchema().toBER(false)\n          ),\n        (error) => Promise.reject(error)\n      )\n      .then(\n        (result) => {\n          if (this.ocspRepHash instanceof OtherHashAlgAndValue)\n            this.ocspRepHash.hashValue = new asn1js.OctetString({\n              valueHex: result,\n            });\n          else this.ocspRepHash = new asn1js.OctetString({ valueHex: result });\n\n          this.ocspIdentifier = new OcspIdentifier();\n          this.ocspIdentifier.fillValues({\n            ocspResponse,\n          });\n        },\n        (error) => Promise.reject(error)\n      );\n    //endregion\n\n    return sequence;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}