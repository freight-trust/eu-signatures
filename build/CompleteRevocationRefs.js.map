{"version":3,"sources":["../src/CompleteRevocationRefs.js"],"names":["asn1js","CompleteRevocationRefs","constructor","parameters","completeRevocationRefs","defaultValues","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","Sequence","name","blockName","optional","value","Repeated","CrlOcspRef","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;AAAA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AACA;AACe,MAAMC,sBAAN,CAA6B;AAC1C;AACA;;;;;AAKAC,cAAYC,aAAa,EAAzB,EAA6B;AAC3B;AACA;;;;AAIA,SAAKC,sBAAL,GAA8B,iCAC5BD,UAD4B,EAE5B,wBAF4B,EAG5BF,uBAAuBI,aAAvB,CAAqC,wBAArC,CAH4B,CAA9B;AAKA;;AAEA;AACA,QAAI,YAAYF,UAAhB,EAA4B,KAAKG,UAAL,CAAgBH,WAAWI,MAA3B;AAC5B;AACD;AACD;AACA;;;;AAIA,SAAOF,aAAP,CAAqBG,UAArB,EAAiC;AAC/B,YAAQA,UAAR;AACE,WAAK,wBAAL;AACE,eAAO,EAAP;AACF;AACE,cAAM,IAAIC,KAAJ,CACH,yDAAwDD,UAAW,EADhE,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EAAmD;AACjD,YAAQH,UAAR;AACE,WAAK,wBAAL;AACE,eAAOG,YAAYC,MAAZ,KAAuB,CAA9B;AACF;AACE,cAAM,IAAIH,KAAJ,CACH,yDAAwDD,UAAW,EADhE,CAAN;AAJJ;AAQD;AACD;AACA;;;;;AAKA,SAAOD,MAAP,CAAcJ,aAAa,EAA3B,EAA+B;AAC7B;;AAEA;;;;;;AAMA,UAAMU,QAAQ,iCAAmBV,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;;AAEA,WAAO,IAAIH,OAAOc,QAAX,CAAoB;AACzBC,YAAMF,MAAMG,SAAN,IAAmB,EADA;AAEzBC,gBAAUJ,MAAMI,QAAN,IAAkB,KAFH;AAGzBC,aAAO,CACL,IAAIlB,OAAOmB,QAAX,CAAoB;AAClBJ,cAAMF,MAAMT,sBAAN,IAAgC,EADpB;AAElBc,eAAOE,qBAAWb,MAAX;AAFW,OAApB,CADK;AAHkB,KAApB,CAAP;AAUD;AACD;AACA;;;;AAIAD,aAAWC,MAAX,EAAmB;AACjB;AACA,UAAMc,OAAOrB,OAAOsB,aAAP,CACXf,MADW,EAEXA,MAFW,EAGXN,uBAAuBM,MAAvB,CAA8B;AAC5BM,aAAO;AACLT,gCAAwB;AADnB;AADqB,KAA9B,CAHW,CAAb;;AAUA,QAAIiB,KAAKE,QAAL,KAAkB,KAAtB,EACE,MAAM,IAAId,KAAJ,CACJ,gFADI,CAAN;AAGF;;AAEA;AACA,SAAKL,sBAAL,GAA8BoB,MAAMC,IAAN,CAC5BJ,KAAKK,MAAL,CAAYtB,sBADgB,EAE3BuB,OAAD,IAAa,IAAIP,oBAAJ,CAAe,EAAEb,QAAQoB,OAAV,EAAf,CAFe,CAA9B;AAIA;AACD;AACD;AACA;;;;AAIAC,aAAW;AACT;AACA,WAAO,IAAI5B,OAAOc,QAAX,CAAoB;AACzBI,aAAOM,MAAMC,IAAN,CAAW,KAAKrB,sBAAhB,EAAyCuB,OAAD,IAC7CA,QAAQC,QAAR,EADK;AADkB,KAApB,CAAP;AAKA;AACD;AACD;AACA;;;;AAIAC,WAAS;AACP,WAAO;AACLzB,8BAAwBoB,MAAMC,IAAN,CACtB,KAAKrB,sBADiB,EAErBuB,OAAD,IAAaA,QAAQE,MAAR,EAFS;AADnB,KAAP;AAMD;AACD;AA5I0C;kBAAvB5B,sB,EA8IrB","file":"CompleteRevocationRefs.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport CrlOcspRef from \"./CrlOcspRef.js\";\n//**************************************************************************************\nexport default class CompleteRevocationRefs {\n  //**********************************************************************************\n  /**\n   * Constructor for CompleteRevocationRefs class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {Array.<CrlOcspRef>}\n     * @description completeRevocationRefs\n     */\n    this.completeRevocationRefs = getParametersValue(\n      parameters,\n      \"completeRevocationRefs\",\n      CompleteRevocationRefs.defaultValues(\"completeRevocationRefs\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"completeRevocationRefs\":\n        return [];\n      default:\n        throw new Error(\n          `Invalid member name for CompleteRevocationRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"completeRevocationRefs\":\n        return memberValue.length === 0;\n      default:\n        throw new Error(\n          `Invalid member name for CompleteRevocationRefs class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [optional]\n     * @property {string} [completeRevocationRefs]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Repeated({\n          name: names.completeRevocationRefs || \"\",\n          value: CrlOcspRef.schema(),\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      CompleteRevocationRefs.schema({\n        names: {\n          completeRevocationRefs: \"completeRevocationRefs\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for CompleteRevocationRefs\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.completeRevocationRefs = Array.from(\n      asn1.result.completeRevocationRefs,\n      (element) => new CrlOcspRef({ schema: element })\n    );\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: Array.from(this.completeRevocationRefs, (element) =>\n        element.toSchema()\n      ),\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      completeRevocationRefs: Array.from(\n        this.completeRevocationRefs,\n        (element) => element.toJSON()\n      ),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}