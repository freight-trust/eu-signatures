{"version":3,"sources":["../src/ContentReference.js"],"names":["asn1js","ContentReference","constructor","parameters","contentType","defaultValues","signedContentIdentifier","originatorSignatureValue","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"ContentReference.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class ContentReference\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentReference class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @description contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentReference.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description signedContentIdentifier\r\n\t\t */\r\n\t\tthis.signedContentIdentifier = getParametersValue(parameters, \"signedContentIdentifier\", ContentReference.defaultValues(\"signedContentIdentifier\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @description originatorSignatureValue\r\n\t\t */\r\n\t\tthis.originatorSignatureValue = getParametersValue(parameters, \"originatorSignatureValue\", ContentReference.defaultValues(\"originatorSignatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"signedContentIdentifier\":\r\n\t\t\tcase \"originatorSignatureValue\":\r\n\t\t\t\treturn new asn1js.OctetString;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentReference class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"signedContentIdentifier\":\r\n\t\t\tcase \"originatorSignatureValue\":\r\n\t\t\t\treturn (memberValue.isEqual(ContentReference.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentReference class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// ContentType ::= OBJECT IDENTIFIER\r\n\t\t// ContentIdentifier ::= OCTET STRING\r\n\t\t//\r\n\t\t// ContentReference ::= SEQUENCE {\r\n\t\t//    contentType ContentType,\r\n\t\t//    signedContentIdentifier ContentIdentifier,\r\n\t\t//    originatorSignatureValue OCTET STRING }\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [signedContentIdentifier]\r\n\t\t * @property {string} [originatorSignatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.signedContentIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.originatorSignatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentReference.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tsignedContentIdentifier: \"signedContentIdentifier\",\r\n\t\t\t\t\toriginatorSignatureValue: \"originatorSignatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentReference\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.signedContentIdentifier = asn1.result.signedContentIdentifier;\r\n\t\tthis.originatorSignatureValue = asn1.result.originatorSignatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tthis.signedContentIdentifier,\r\n\t\t\t\tthis.originatorSignatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tsignedContentIdentifier: this.signedContentIdentifier.toJSON(),\r\n\t\t\toriginatorSignatureValue: this.originatorSignatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}