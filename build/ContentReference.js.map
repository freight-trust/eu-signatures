{"version":3,"sources":["../src/ContentReference.js"],"names":["asn1js","ContentReference","constructor","parameters","contentType","defaultValues","signedContentIdentifier","originatorSignatureValue","fromSchema","schema","memberName","OctetString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","file":"ContentReference.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class ContentReference {\n  //**********************************************************************************\n  /**\n   * Constructor for ContentReference class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {string}\n     * @description contentType\n     */\n    this.contentType = getParametersValue(\n      parameters,\n      \"contentType\",\n      ContentReference.defaultValues(\"contentType\")\n    );\n    /**\n     * @type {OctetString}\n     * @description signedContentIdentifier\n     */\n    this.signedContentIdentifier = getParametersValue(\n      parameters,\n      \"signedContentIdentifier\",\n      ContentReference.defaultValues(\"signedContentIdentifier\")\n    );\n    /**\n     * @type {OctetString}\n     * @description originatorSignatureValue\n     */\n    this.originatorSignatureValue = getParametersValue(\n      parameters,\n      \"originatorSignatureValue\",\n      ContentReference.defaultValues(\"originatorSignatureValue\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"contentType\":\n        return \"\";\n      case \"signedContentIdentifier\":\n      case \"originatorSignatureValue\":\n        return new asn1js.OctetString();\n      default:\n        throw new Error(\n          `Invalid member name for ContentReference class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"contentType\":\n        return memberValue === \"\";\n      case \"signedContentIdentifier\":\n      case \"originatorSignatureValue\":\n        return memberValue.isEqual(ContentReference.defaultValues(memberName));\n      default:\n        throw new Error(\n          `Invalid member name for ContentReference class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // ContentType ::= OBJECT IDENTIFIER\n    // ContentIdentifier ::= OCTET STRING\n    //\n    // ContentReference ::= SEQUENCE {\n    //    contentType ContentType,\n    //    signedContentIdentifier ContentIdentifier,\n    //    originatorSignatureValue OCTET STRING }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [contentType]\n     * @property {string} [signedContentIdentifier]\n     * @property {string} [originatorSignatureValue]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        new asn1js.ObjectIdentifier({ name: names.contentType || \"\" }),\n        new asn1js.OctetString({ name: names.signedContentIdentifier || \"\" }),\n        new asn1js.OctetString({ name: names.originatorSignatureValue || \"\" }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      ContentReference.schema({\n        names: {\n          contentType: \"contentType\",\n          signedContentIdentifier: \"signedContentIdentifier\",\n          originatorSignatureValue: \"originatorSignatureValue\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for ContentReference\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    // noinspection JSUnusedGlobalSymbols\n    this.contentType = asn1.result.contentType.valueBlock.toString();\n    this.signedContentIdentifier = asn1.result.signedContentIdentifier;\n    this.originatorSignatureValue = asn1.result.originatorSignatureValue;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: [\n        new asn1js.ObjectIdentifier({ value: this.contentType }),\n        this.signedContentIdentifier,\n        this.originatorSignatureValue,\n      ],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    return {\n      contentType: this.contentType,\n      signedContentIdentifier: this.signedContentIdentifier.toJSON(),\n      originatorSignatureValue: this.originatorSignatureValue.toJSON(),\n    };\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}