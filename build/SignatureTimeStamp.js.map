{"version":3,"sources":["../src/SignatureTimeStamp.js"],"names":["asn1js","SignatureTimeStamp","ContentInfo","constructor","parameters","tspResponse","defaultValues","tstInfo","fromSchema","schema","contentType","Error","cmsSigned","SignedData","content","encapContentInfo","eContentType","eContent","OctetString","asn1","fromBER","valueBlock","valueHex","TSTInfo","result","getStampingBuffer","cmsSignedData","signerIndex","hashAlgorithm","crypto","Promise","reject","resolve","then","digest","name","signerInfos","signature","error","makeAttribute","TimeStampResp","timeStampToken","toSchema","Attribute","type","values"],"mappings":"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","file":"SignatureTimeStamp.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport {\n  getCrypto,\n  ContentInfo,\n  TSTInfo,\n  SignedData,\n  Attribute,\n  TimeStampResp,\n} from \"pkijs\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class SignatureTimeStamp extends ContentInfo {\n  //**********************************************************************************\n  /**\n   * Constructor for SignatureTimeStamp class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    super(parameters);\n\n    //region Internal properties of the object\n    if (\"tspResponse\" in parameters)\n      /**\n       * @type {ArrayBuffer}\n       * @description tspResponse\n       */\n      this.tspResponse = getParametersValue(\n        parameters,\n        \"tspResponse\",\n        SignatureTimeStamp.defaultValues(\"tspResponse\")\n      );\n\n    if (\"tstInfo\" in parameters)\n      /**\n       * @type {TSTInfo}\n       * @description tstInfo\n       */\n      this.tstInfo = getParametersValue(\n        parameters,\n        \"tstInfo\",\n        SignatureTimeStamp.defaultValues(\"tstInfo\")\n      );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    super.fromSchema(schema);\n\n    //region Check \"contentType\"\n    if (this.contentType !== \"1.2.840.113549.1.7.2\")\n      // signedData\n      throw new Error(\n        \"Object's schema was not verified against input data for SignatureTimeStamp\"\n      );\n    //endregion\n\n    //region Get internal \"CMS_SIGNED_DATA\"\n    const cmsSigned = new SignedData({ schema: this.content });\n    //endregion\n\n    //region Get internal TST_INFO\n    if (cmsSigned.encapContentInfo.eContentType !== \"1.2.840.113549.1.9.16.1.4\")\n      throw new Error(\"Incorrect format for SignatureTimeStamp\");\n\n    if (\"eContent\" in cmsSigned.encapContentInfo === false)\n      throw new Error(\"Incorrect format for SignatureTimeStamp\");\n\n    if (\n      cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString ===\n      false\n    )\n      throw new Error(\"Incorrect format for SignatureTimeStamp\");\n\n    const asn1 = asn1js.fromBER(\n      cmsSigned.encapContentInfo.eContent.valueBlock.valueHex\n    );\n    this.tstInfo = new TSTInfo({ schema: asn1.result });\n    //endregion\n  }\n  //**********************************************************************************\n  // noinspection JSUnusedGlobalSymbols\n  /**\n   * Get \"ArrayBuffer\" to transfer to time-stamp server\n   * @param {SignedData} cmsSignedData CMS Signed Data to make attribute for\n   * @param {number} signerIndex Index of signer to make attribute for\n   * @param {Object} parameters Additional parameters for making attribute\n   * @returns {Promise}\n   */\n  getStampingBuffer(cmsSignedData, signerIndex, parameters) {\n    //region Initial variables\n    let hashAlgorithm = \"SHA-256\";\n    //endregion\n\n    //region Get a \"crypto\" extension\n    const crypto = getCrypto();\n    if (typeof crypto === \"undefined\")\n      return Promise.reject(\"Unable to create WebCrypto object\");\n    //endregion\n\n    //region Check input parameters\n    if (\"hashAlgorithm\" in parameters) hashAlgorithm = parameters.hashAlgorithm;\n    //endregion\n\n    return Promise.resolve().then(\n      () =>\n        crypto.digest(\n          { name: hashAlgorithm },\n          cmsSignedData.signerInfos[signerIndex].signature.valueBlock.valueHex\n        ),\n      (error) => Promise.reject(error)\n    );\n  }\n  //**********************************************************************************\n  /**\n   * Create \"signature-time-stamp\" CAdES attribute\n   * @param {Object} [parameters] Additional parameters for making attribute\n   * @returns {Attribute}\n   */\n  makeAttribute(parameters = {}) {\n    //region Initial variables\n    let tspResponse;\n    //endregion\n\n    //region Check input parameters\n    if (\"tspResponse\" in parameters) tspResponse = parameters.tspResponse;\n    else {\n      if (\"tspResponse\" in this) tspResponse = this.tspResponse;\n      else\n        throw new Error(\n          'Parameter \"tspResponse\" is mandatory for making \"signature-time-stamp\" attribute'\n        );\n    }\n\n    this.tspResponse = tspResponse;\n    //endregion\n\n    //region Change type of \"tspResponse\"\n    const asn1 = asn1js.fromBER(tspResponse);\n    tspResponse = new TimeStampResp({ schema: asn1.result });\n    //endregion\n\n    //region Initialize internal variables from \"tspResponse\"\n    if (\"timeStampToken\" in tspResponse)\n      this.fromSchema(tspResponse.timeStampToken.toSchema());\n    else throw new Error('No neccessary \"timeStampToken\" inside \"tspResponse\"');\n    //endregion\n\n    //region Create and return attribute\n    return new Attribute({\n      type: \"1.2.840.113549.1.9.16.2.14\",\n      values: [this.toSchema()],\n    });\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}