{"version":3,"sources":["../src/SPUserNotice.js"],"names":["asn1js","SPUserNotice","constructor","parameters","noticeRef","defaultValues","explicitText","_explicitTextType","fromSchema","schema","memberName","NoticeReference","Error","compareWithDefault","memberValue","organization","noticeNumbers","names","Sequence","name","blockName","value","sPUserNotice","optional","Choice","VisibleString","BmpString","Utf8String","asn1","compareSchema","verified","result","valueBlock","idBlock","tagNumber","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"SPUserNotice.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport NoticeReference from \"./NoticeReference.js\";\n//**************************************************************************************\n// noinspection JSUnusedGlobalSymbols\nexport default class SPUserNotice {\n  //**********************************************************************************\n  /**\n   * Constructor for SPUserNotice class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    if (\"noticeRef\" in parameters)\n      /**\n       * @type {NoticeReference}\n       * @description noticeRef\n       */\n      this.noticeRef = getParametersValue(\n        parameters,\n        \"noticeRef\",\n        SPUserNotice.defaultValues(\"noticeRef\")\n      );\n\n    if (\"explicitText\" in parameters) {\n      /**\n       * @type {string}\n       * @description explicitText\n       */\n      this.explicitText = getParametersValue(\n        parameters,\n        \"explicitText\",\n        SPUserNotice.defaultValues(\"explicitText\")\n      );\n\n      this._explicitTextType = -1; // 0 - VISIBLESTRING, 1 - BMPSTRING, 2 - UTF8STRING\n    }\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"noticeRef\":\n        return new NoticeReference();\n      case \"explicitText\":\n        return \"\";\n      default:\n        throw new Error(\n          `Invalid member name for SPUserNotice class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"noticeRef\":\n        return (\n          NoticeReference.compareWithDefault(\n            \"organization\",\n            memberValue.organization\n          ) &&\n          NoticeReference.compareWithDefault(\n            \"noticeNumbers\",\n            memberValue.noticeNumbers\n          )\n        );\n      case \"explicitText\":\n        return memberValue === \"\";\n      default:\n        throw new Error(\n          `Invalid member name for SPUserNotice class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // SPUserNotice ::= SEQUENCE {\n    //    noticeRef NoticeReference OPTIONAL,\n    //    explicitText DisplayText OPTIONAL}\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [sPUserNotice]\n     * @property {string} [explicitText]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      value: [\n        NoticeReference.schema(\n          names.sPUserNotice || {\n            names: {\n              blockName: \"\",\n              optional: true,\n            },\n          }\n        ),\n        new asn1js.Choice({\n          value: [\n            new asn1js.VisibleString({ name: names.explicitText || \"\" }),\n            new asn1js.BmpString({ name: names.explicitText || \"\" }),\n            new asn1js.Utf8String({ name: names.explicitText || \"\" }),\n          ],\n        }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      SPUserNotice.schema({\n        names: {\n          noticeRef: {\n            names: {\n              blockName: \"noticeRef\",\n            },\n          },\n          explicitText: \"explicitText\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for SPUserNotice\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (\"noticeRef\" in asn1.result)\n      this.noticeRef = new NoticeReference({ schema: asn1.result.noticeRef });\n\n    if (\"explicitText\" in asn1.result) {\n      this.explicitText = asn1.result.explicitText.valueBlock.value;\n\n      switch (asn1.result.explicitText.idBlock.tagNumber) {\n        case 26: // VISIBLESTRING\n          this._explicitTextType = 0;\n          break;\n        case 30: // BMPSTRING\n          this._explicitTextType = 1;\n          break;\n        case 12: // UTF8STRING\n          this._explicitTextType = 2;\n          break;\n        default:\n          throw new Error(\n            \"Object's schema was not verified against input data for SPUserNotice\"\n          );\n      }\n    }\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (\"noticeRef\" in this) outputArray.push(this.noticeRef.toSchema());\n\n    if (\"explicitText\" in this) {\n      switch (this._explicitTextType) {\n        case 0:\n          outputArray.push(\n            new asn1js.VisibleString({ value: this.explicitText })\n          );\n          break;\n        case 1:\n          outputArray.push(new asn1js.BmpString({ value: this.explicitText }));\n          break;\n        case 2:\n          outputArray.push(new asn1js.Utf8String({ value: this.explicitText }));\n          break;\n        default:\n          throw new Error(\n            'The \"explicitText\" property was not correctly initialized'\n          );\n      }\n    }\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const _object = {};\n\n    if (\"noticeRef\" in this) _object.noticeRef = this.noticeRef.toJSON();\n\n    if (\"explicitText\" in this) _object.explicitText = this.explicitText;\n\n    return _object;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}