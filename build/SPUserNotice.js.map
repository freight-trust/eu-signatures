{"version":3,"sources":["../src/SPUserNotice.js"],"names":["asn1js","SPUserNotice","constructor","parameters","noticeRef","defaultValues","explicitText","_explicitTextType","fromSchema","schema","memberName","NoticeReference","Error","compareWithDefault","memberValue","organization","noticeNumbers","names","Sequence","name","blockName","value","sPUserNotice","optional","Choice","VisibleString","BmpString","Utf8String","asn1","compareSchema","verified","result","valueBlock","idBlock","tagNumber","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","file":"SPUserNotice.js","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue } from \"pvutils\";\r\nimport NoticeReference from \"./NoticeReference.js\";\r\n//**************************************************************************************\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default class SPUserNotice\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SPUserNotice class\r\n\t * @param {Object} [parameters={}]\r\n\t * @property {Object} [schema] asn1js parsed value\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"noticeRef\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {NoticeReference}\r\n\t\t\t * @description noticeRef\r\n\t\t\t */\r\n\t\t\tthis.noticeRef = getParametersValue(parameters, \"noticeRef\", SPUserNotice.defaultValues(\"noticeRef\"));\r\n\t\t\r\n\t\tif(\"explicitText\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @description explicitText\r\n\t\t\t */\r\n\t\t\tthis.explicitText = getParametersValue(parameters, \"explicitText\", SPUserNotice.defaultValues(\"explicitText\"));\r\n\t\t\t\r\n\t\t\tthis._explicitTextType = (-1); // 0 - VISIBLESTRING, 1 - BMPSTRING, 2 - UTF8STRING\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"noticeRef\":\r\n\t\t\t\treturn new NoticeReference();\r\n\t\t\tcase \"explicitText\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SPUserNotice class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"noticeRef\":\r\n\t\t\t\treturn ((NoticeReference.compareWithDefault(\"organization\", memberValue.organization)) &&\r\n\t\t\t\t\t\t(NoticeReference.compareWithDefault(\"noticeNumbers\", memberValue.noticeNumbers)));\r\n\t\t\tcase \"explicitText\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SPUserNotice class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of asn1js schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t// SPUserNotice ::= SEQUENCE {\r\n\t\t//    noticeRef NoticeReference OPTIONAL,\r\n\t\t//    explicitText DisplayText OPTIONAL}\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [sPUserNotice]\r\n\t\t * @property {string} [explicitText]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tNoticeReference.schema(names.sPUserNotice || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.VisibleString({ name: (names.explicitText || \"\") }),\r\n\t\t\t\t\t\tnew asn1js.BmpString({ name: (names.explicitText || \"\") }),\r\n\t\t\t\t\t\tnew asn1js.Utf8String({ name: (names.explicitText || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSPUserNotice.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnoticeRef: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"noticeRef\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\texplicitText: \"explicitText\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SPUserNotice\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"noticeRef\" in asn1.result)\r\n\t\t\tthis.noticeRef = new NoticeReference({ schema: asn1.result.noticeRef });\r\n\t\t\r\n\t\tif(\"explicitText\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.explicitText = asn1.result.explicitText.valueBlock.value;\r\n\t\t\t\r\n\t\t\tswitch(asn1.result.explicitText.idBlock.tagNumber)\r\n\t\t\t{\r\n\t\t\t\tcase 26: // VISIBLESTRING\r\n\t\t\t\t\tthis._explicitTextType = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 30: // BMPSTRING\r\n\t\t\t\t\tthis._explicitTextType = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12: // UTF8STRING\r\n\t\t\t\t\tthis._explicitTextType = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"Object's schema was not verified against input data for SPUserNotice\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"noticeRef\" in this)\r\n\t\t\toutputArray.push(this.noticeRef.toSchema());\r\n\t\t\r\n\t\tif(\"explicitText\" in this)\r\n\t\t{\r\n\t\t\tswitch(this._explicitTextType)\r\n\t\t\t{\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\toutputArray.push(new asn1js.VisibleString({ value: this.explicitText }));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\toutputArray.push(new asn1js.BmpString({ value: this.explicitText }));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\toutputArray.push(new asn1js.Utf8String({ value: this.explicitText }));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(\"The \\\"explicitText\\\" property was not correctly initialized\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {};\r\n\t\t\r\n\t\tif(\"noticeRef\" in this)\r\n\t\t\t_object.noticeRef = this.noticeRef.toJSON();\r\n\t\t\r\n\t\tif(\"explicitText\" in this)\r\n\t\t\t_object.explicitText = this.explicitText;\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"]}