{"version":3,"sources":["../src/OcspIdentifier.js"],"names":["asn1js","OcspIdentifier","constructor","parameters","ocspResponderID","defaultValues","producedAt","fromSchema","schema","memberName","Any","Date","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","optional","value","Choice","Constructed","idBlock","tagClass","tagNumber","RelativeDistinguishedNames","OctetString","GeneralizedTime","asn1","compareSchema","verified","result","valueBlock","toDate","toSchema","outputArray","push","valueDate","toJSON","fillValues","ocspResponse","responseBytes","responseType","fromBER","response","valueHex","basicResponse","BasicOCSPResponse","tbsResponseData","responderID"],"mappings":"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","file":"OcspIdentifier.js","sourcesContent":["import * as asn1js from \"asn1js\";\nimport { getParametersValue } from \"pvutils\";\nimport { RelativeDistinguishedNames, BasicOCSPResponse } from \"pkijs\";\n//**************************************************************************************\nexport default class OcspIdentifier {\n  //**********************************************************************************\n  /**\n   * Constructor for OcspIdentifier class\n   * @param {Object} [parameters={}]\n   * @property {Object} [schema] asn1js parsed value\n   */\n  constructor(parameters = {}) {\n    //region Internal properties of the object\n    /**\n     * @type {RelativeDistinguishedNames|OctetString|Any}\n     * @description ocspResponderID\n     */\n    this.ocspResponderID = getParametersValue(\n      parameters,\n      \"ocspResponderID\",\n      OcspIdentifier.defaultValues(\"ocspResponderID\")\n    );\n    /**\n     * @type {Date}\n     * @description producedAt\n     */\n    this.producedAt = getParametersValue(\n      parameters,\n      \"producedAt\",\n      OcspIdentifier.defaultValues(\"producedAt\")\n    );\n    //endregion\n\n    //region If input argument array contains \"schema\" for this object\n    if (\"schema\" in parameters) this.fromSchema(parameters.schema);\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"ocspResponderID\":\n        return new asn1js.Any();\n      case \"producedAt\":\n        return new Date(0, 0, 0);\n      default:\n        throw new Error(\n          `Invalid member name for OcspIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"ocspResponderID\":\n        return memberValue instanceof asn1js.Any;\n      case \"producedAt\":\n        return memberValue === OcspIdentifier.defaultValues(memberName);\n      default:\n        throw new Error(\n          `Invalid member name for OcspIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of asn1js schema for current class\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    // OcspIdentifier ::= SEQUENCE {\n    //    ocspResponderID ResponderID, -- As in OCSP response data\n    //    producedAt GeneralizedTime -- As in OCSP response data  }\n\n    /**\n     * @type {Object}\n     * @property {string} [blockName]\n     * @property {string} [ocspResponderID]\n     * @property {string} [producedAt]\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new asn1js.Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new asn1js.Choice({\n          value: [\n            new asn1js.Constructed({\n              name: names.ocspResponderID || \"\",\n              idBlock: {\n                tagClass: 3, // CONTEXT-SPECIFIC\n                tagNumber: 1, // [1]\n              },\n              value: [RelativeDistinguishedNames.schema()],\n            }),\n            new asn1js.Constructed({\n              name: names.ocspResponderID || \"\",\n              idBlock: {\n                tagClass: 3, // CONTEXT-SPECIFIC\n                tagNumber: 2, // [2]\n              },\n              value: [new asn1js.OctetString()],\n            }),\n          ],\n        }),\n        new asn1js.GeneralizedTime({ name: names.producedAt || \"\" }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Check the schema is valid\n    const asn1 = asn1js.compareSchema(\n      schema,\n      schema,\n      OcspIdentifier.schema({\n        names: {\n          ocspResponderID: \"ocspResponderID\",\n          producedAt: \"producedAt\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for OcspIdentifier\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    if (asn1.result.ocspResponderID.idBlock.tagNumber === 1)\n      this.ocspResponderID = new RelativeDistinguishedNames({\n        schema: asn1.result.ocspResponderID.valueBlock.value[0],\n      });\n    else this.ocspResponderID = asn1.result.ocspResponderID.valueBlock.value[0]; // OCTETSTRING\n\n    this.producedAt = asn1.result.producedAt.toDate();\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    if (this.ocspResponderID instanceof asn1js.Any)\n      throw new Error('Incorrectly initialized \"OcspIdentifier\" class');\n\n    //region Create array for output sequence\n    const outputArray = [];\n\n    if (this.ocspResponderID instanceof RelativeDistinguishedNames)\n      outputArray.push(this.ocspResponderID.toSchema());\n    else outputArray.push(this.ocspResponderID);\n\n    outputArray.push(\n      new asn1js.GeneralizedTime({ valueDate: this.producedAt })\n    );\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new asn1js.Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    if (this.ocspResponderID instanceof asn1js.Any)\n      throw new Error('Incorrectly initialized \"OcspIdentifier\" class');\n\n    return {\n      ocspResponderID: this.ocspResponderID.toJSON(),\n      producedAt: this.producedAt,\n    };\n  }\n  //**********************************************************************************\n  /**\n   * Fill internal values of current class\n   * @param {Object} parameters\n   */\n  fillValues(parameters) {\n    //region Initial variables\n    let ocspResponse;\n    //endregion\n\n    //region Check input parameters\n    if (\"ocspResponse\" in parameters) ocspResponse = parameters.ocspResponse;\n    // in_window.org.pkijs.simpl.OCSP_RESPONSE\n    else\n      throw new Error(\n        'Parameter \"ocspResponse\" is mandatory for making \"OcspResponsesID\"'\n      );\n    //endregion\n\n    //region Fill internal fields\n    if (\"responseBytes\" in ocspResponse) {\n      if (ocspResponse.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\") {\n        // id-pkix-ocsp-basic\n        const asn1 = asn1js.fromBER(\n          ocspResponse.responseBytes.response.valueBlock.valueHex\n        );\n        const basicResponse = new BasicOCSPResponse({ schema: asn1.result });\n\n        if (\n          basicResponse.tbsResponseData.responderID instanceof\n          RelativeDistinguishedNames\n        ) {\n          this.ocspResponderID = new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3, // CONTEXT-SPECIFIC\n              tagNumber: 1, // [1]\n            },\n            value: [basicResponse.tbsResponseData.responderID.toSchema()],\n          });\n        } else {\n          this.ocspResponderID = new asn1js.Constructed({\n            idBlock: {\n              tagClass: 3, // CONTEXT-SPECIFIC\n              tagNumber: 2, // [2]\n            },\n            value: [basicResponse.tbsResponseData.responderID],\n          });\n        }\n\n        this.producedAt = basicResponse.tbsResponseData.producedAt;\n      }\n    }\n    //endregion\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n"]}